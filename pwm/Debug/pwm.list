
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009b54  08009b54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b70  08009b70  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b70  08009b70  0000ab70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b78  08009b78  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b78  08009b78  0000ab78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b7c  08009b7c  0000ab7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009b80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019249  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003db5  00000000  00000000  000242f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  000280b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001189  00000000  00000000  00029760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243a0  00000000  00000000  0002a8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf4d  00000000  00000000  0004ec89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41bf  00000000  00000000  0006bbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fd95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063c0  00000000  00000000  0013fdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00146198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b3c 	.word	0x08009b3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009b3c 	.word	0x08009b3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80004f8:	f000 fd7e 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f816 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f994 	bl	800082c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f87c 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8a8 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8d6 	bl	80006bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 febe 	bl	8009290 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000514:	f000 f908 	bl	8000728 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // CONDICIONES INICIALES
  inicio(); // Prueba inicial del sistema
 8000518:	f000 fa86 	bl	8000a28 <inicio>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051c:	f008 fede 	bl	80092dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    transicion1(); //  gradualmente disminuye rojo, aumenta verde
 8000520:	f000 fab0 	bl	8000a84 <transicion1>
    transicion2(); //  gradualmente disminuye verde, aumenta rojo
 8000524:	f000 fae8 	bl	8000af8 <transicion2>
    MX_USB_HOST_Process();
 8000528:	bf00      	nop
 800052a:	e7f7      	b.n	800051c <main+0x28>

0800052c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f009 fa70 	bl	8009a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	@ (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ff96 	bl	80044e4 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
    Error_Handler();
 80005be:	f000 fad5 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 f9f7 	bl	80049d4 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
    Error_Handler();
 80005ec:	f000 fabe 	bl	8000b6c <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f003 f96d 	bl	800391c <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
    Error_Handler();
 8000648:	f000 fa90 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	@ (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f003 fa82 	bl	8003ba4 <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
    Error_Handler();
 80006a6:	f000 fa61 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000ec 	.word	0x200000ec
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f004 fcaf 	bl	8005070 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
    Error_Handler();
 8000718:	f000 fa28 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000134 	.word	0x20000134
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	@ 0x38
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000758:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <MX_TIM4_Init+0xfc>)
 800075a:	4a33      	ldr	r2, [pc, #204]	@ (8000828 <MX_TIM4_Init+0x100>)
 800075c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800075e:	4b31      	ldr	r3, [pc, #196]	@ (8000824 <MX_TIM4_Init+0xfc>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b2f      	ldr	r3, [pc, #188]	@ (8000824 <MX_TIM4_Init+0xfc>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 800076a:	4b2e      	ldr	r3, [pc, #184]	@ (8000824 <MX_TIM4_Init+0xfc>)
 800076c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000770:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <MX_TIM4_Init+0xfc>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <MX_TIM4_Init+0xfc>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800077e:	4829      	ldr	r0, [pc, #164]	@ (8000824 <MX_TIM4_Init+0xfc>)
 8000780:	f004 fcff 	bl	8005182 <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM4_Init+0x66>
    Error_Handler();
 800078a:	f000 f9ef 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000798:	4619      	mov	r1, r3
 800079a:	4822      	ldr	r0, [pc, #136]	@ (8000824 <MX_TIM4_Init+0xfc>)
 800079c:	f004 ff24 	bl	80055e8 <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM4_Init+0x82>
    Error_Handler();
 80007a6:	f000 f9e1 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80007aa:	481e      	ldr	r0, [pc, #120]	@ (8000824 <MX_TIM4_Init+0xfc>)
 80007ac:	f004 fd38 	bl	8005220 <HAL_TIM_PWM_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM4_Init+0x92>
    Error_Handler();
 80007b6:	f000 f9d9 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4619      	mov	r1, r3
 80007c8:	4816      	ldr	r0, [pc, #88]	@ (8000824 <MX_TIM4_Init+0xfc>)
 80007ca:	f005 faeb 	bl	8005da4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM4_Init+0xb0>
    Error_Handler();
 80007d4:	f000 f9ca 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d8:	2360      	movs	r3, #96	@ 0x60
 80007da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_TIM4_Init+0xfc>)
 80007f0:	f004 fe38 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM4_Init+0xd6>
    Error_Handler();
 80007fa:	f000 f9b7 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2204      	movs	r2, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4807      	ldr	r0, [pc, #28]	@ (8000824 <MX_TIM4_Init+0xfc>)
 8000806:	f004 fe2d 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM4_Init+0xec>
    Error_Handler();
 8000810:	f000 f9ac 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000814:	4803      	ldr	r0, [pc, #12]	@ (8000824 <MX_TIM4_Init+0xfc>)
 8000816:	f000 fb09 	bl	8000e2c <HAL_TIM_MspPostInit>
}
 800081a:	bf00      	nop
 800081c:	3738      	adds	r7, #56	@ 0x38
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000018c 	.word	0x2000018c
 8000828:	40000800 	.word	0x40000800

0800082c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	@ 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b72      	ldr	r3, [pc, #456]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a71      	ldr	r2, [pc, #452]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b6f      	ldr	r3, [pc, #444]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b6b      	ldr	r3, [pc, #428]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a6a      	ldr	r2, [pc, #424]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b68      	ldr	r3, [pc, #416]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b64      	ldr	r3, [pc, #400]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a63      	ldr	r2, [pc, #396]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b61      	ldr	r3, [pc, #388]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b5d      	ldr	r3, [pc, #372]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a5c      	ldr	r2, [pc, #368]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b56      	ldr	r3, [pc, #344]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a55      	ldr	r2, [pc, #340]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b4c      	ldr	r3, [pc, #304]	@ (8000a10 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	4849      	ldr	r0, [pc, #292]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008f0:	f000 fec6 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4847      	ldr	r0, [pc, #284]	@ (8000a18 <MX_GPIO_Init+0x1ec>)
 80008fa:	f000 fec1 	bl	8001680 <HAL_GPIO_WritePin>
                    GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f24c 0110 	movw	r1, #49168	@ 0xc010
 8000904:	4845      	ldr	r0, [pc, #276]	@ (8000a1c <MX_GPIO_Init+0x1f0>)
 8000906:	f000 febb 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	483c      	ldr	r0, [pc, #240]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000922:	f000 fd11 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4836      	ldr	r0, [pc, #216]	@ (8000a18 <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fd03 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	482e      	ldr	r0, [pc, #184]	@ (8000a18 <MX_GPIO_Init+0x1ec>)
 800095e:	f000 fcf3 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000966:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	482a      	ldr	r0, [pc, #168]	@ (8000a20 <MX_GPIO_Init+0x1f4>)
 8000978:	f000 fce6 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4825      	ldr	r0, [pc, #148]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000990:	f000 fcda 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 80009b2:	f000 fcc9 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80009b6:	f24c 0310 	movw	r3, #49168	@ 0xc010
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <MX_GPIO_Init+0x1f0>)
 80009d0:	f000 fcba 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d4:	2320      	movs	r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_GPIO_Init+0x1f0>)
 80009e8:	f000 fcae 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000a02:	f000 fca1 	bl	8001348 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <inicio>:

/* USER CODE BEGIN 4 */
// ACA LAS FUNCIONEEEES
// Prueba inicial del sistema
void inicio(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  // Obtenemos el valor máximo de ciclo de trabajo de la configuración del hw
  uint16_t ciclomaximo = TIM4->ARR; // Valor máximo de ciclo de trabajo
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <inicio+0x54>)
 8000a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a32:	80fb      	strh	r3, [r7, #6]
  // Configuramos el PWM para que inicie con los LED encendidos
  TIM4->CCR1 = ciclomaximo; // LED verde al 100 %
 8000a34:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <inicio+0x54>)
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM4->CCR2 = ciclomaximo; // LED rojo al 100 %
 8000a3a:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <inicio+0x54>)
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	6393      	str	r3, [r2, #56]	@ 0x38
  // Arrancamos el PWM
  HAL_TIM_PWM_Start(&htim4,
 8000a40:	2100      	movs	r1, #0
 8000a42:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <inicio+0x58>)
 8000a44:	f004 fc46 	bl	80052d4 <HAL_TIM_PWM_Start>
                    TIM_CHANNEL_1); // Inicio de la modulación PWM, LED verde
  HAL_TIM_PWM_Start(&htim4,
 8000a48:	2104      	movs	r1, #4
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <inicio+0x58>)
 8000a4c:	f004 fc42 	bl	80052d4 <HAL_TIM_PWM_Start>
                    TIM_CHANNEL_2); // Inicio de la modulación PWM, LED rojo
  // Mantenemos los LED encendidos por un tiempo
  HAL_Delay(TENCENDIDO); // Retardo de TENCENDIDO milisegundos
 8000a50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a54:	f000 fb42 	bl	80010dc <HAL_Delay>
  // Apagamos los LED
  TIM4->CCR1 = 0; // LED verde al 0 %
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <inicio+0x54>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4->CCR2 = 0; // LED rojo al 0 %
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <inicio+0x54>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	639a      	str	r2, [r3, #56]	@ 0x38
  // Mantenemos los LED apagados por un tiempo
  HAL_Delay(TAPAGADO); // Retardo de TAPAGADO milisegundos
 8000a64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a68:	f000 fb38 	bl	80010dc <HAL_Delay>
  // Encendemos el LED rojo
  TIM4->CCR2 = ciclomaximo; // LED rojo al 100 %
 8000a6c:	4a03      	ldr	r2, [pc, #12]	@ (8000a7c <inicio+0x54>)
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40000800 	.word	0x40000800
 8000a80:	2000018c 	.word	0x2000018c

08000a84 <transicion1>:

/*-------------  transición 1 -------------*/
// Disminuye rojo, aumenta verde
void transicion1(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  // Obtenemos valores de la configuración del hgardware
  uint16_t ciclomaximo = TIM4->ARR; // Valor máximo de ciclo de trabajo
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <transicion1+0x70>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	807b      	strh	r3, [r7, #2]
  uint16_t cicloverde =
      TIM4->CCR1; // Valor actual de ciclo de trabajo en LED verde
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <transicion1+0x70>)
 8000a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  uint16_t cicloverde =
 8000a94:	80fb      	strh	r3, [r7, #6]
  uint16_t ciclorojo =
      TIM4->CCR2; // Valor actual de ciclo de trabajo en LED rojo
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <transicion1+0x70>)
 8000a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  uint16_t ciclorojo =
 8000a9a:	80bb      	strh	r3, [r7, #4]
  do {
    // Esperamos un tiempo antes de cambiar las intencidades de lso LED
    HAL_Delay(TCAMBIO); // Espera por TCAMBIO milisegndos
 8000a9c:	2014      	movs	r0, #20
 8000a9e:	f000 fb1d 	bl	80010dc <HAL_Delay>
    // Disminuimos un poco la intensidad del LED rojo
    ciclorojo = (ciclorojo > VALCAMBIO) ? ciclorojo - VALCAMBIO
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000aa8:	bf38      	it	cc
 8000aaa:	f44f 7320 	movcc.w	r3, #640	@ 0x280
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000ab4:	80bb      	strh	r3, [r7, #4]
                                        : 0; // Decremento con saturación en 0 %
    TIM4->CCR2 = ciclorojo; // Actualiza el ciclo de trabajo en LED rojo
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <transicion1+0x70>)
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	6393      	str	r3, [r2, #56]	@ 0x38
    // Aumentaqmos un poco la intensidad del LED verde
    cicloverde = (ciclomaximo - cicloverde > VALCAMBIO)
 8000abc:	887a      	ldrh	r2, [r7, #2]
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000ac6:	dd04      	ble.n	8000ad2 <transicion1+0x4e>
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	e000      	b.n	8000ad4 <transicion1+0x50>
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	80fb      	strh	r3, [r7, #6]
                     ? cicloverde + VALCAMBIO
                     : ciclomaximo; // Incremento con saturación en 100 %
    TIM4->CCR1 = cicloverde; // Actualiza el ciclo de trabajo en LED verde
 8000ad6:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <transicion1+0x70>)
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	6353      	str	r3, [r2, #52]	@ 0x34
    // Verficamos si repetimos o invertimos
  } while (ciclorojo > 0 &&
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <transicion1+0x66>
 8000ae2:	88fa      	ldrh	r2, [r7, #6]
 8000ae4:	887b      	ldrh	r3, [r7, #2]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d3d8      	bcc.n	8000a9c <transicion1+0x18>
           cicloverde <
               ciclomaximo); // Repetimos mientras no se alcance un límite
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40000800 	.word	0x40000800

08000af8 <transicion2>:

/*-------------  transición 2 -------------*/
// Disminuye verde, aumenta rojo
void transicion2(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  // Obtenemos valores de la configuración del hgardware
  uint16_t ciclomaximo = TIM4->ARR; // Valor máximo de ciclo de trabajo
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <transicion2+0x70>)
 8000b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b02:	807b      	strh	r3, [r7, #2]
  uint16_t cicloverde =
      TIM4->CCR1; // Valor actual de ciclo de trabajo en LED verde
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <transicion2+0x70>)
 8000b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  uint16_t cicloverde =
 8000b08:	80fb      	strh	r3, [r7, #6]
  uint16_t ciclorojo =
      TIM4->CCR2; // Valor actual de ciclo de trabajo en LED rojo
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <transicion2+0x70>)
 8000b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  uint16_t ciclorojo =
 8000b0e:	80bb      	strh	r3, [r7, #4]
  do {
    // Esperamos un tiempo antes de cambiar las intensidades de los LED
    HAL_Delay(TCAMBIO); // Espera por TCAMBIO milisegundos
 8000b10:	2014      	movs	r0, #20
 8000b12:	f000 fae3 	bl	80010dc <HAL_Delay>
    // Disminuimos un poco la intensidad del LED verde
    cicloverde = (cicloverde > VALCAMBIO)
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000b1c:	bf38      	it	cc
 8000b1e:	f44f 7320 	movcc.w	r3, #640	@ 0x280
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000b28:	80fb      	strh	r3, [r7, #6]
                     ? cicloverde - VALCAMBIO
                     : 0;    // Decremento con saturación en 0 %
    TIM4->CCR1 = cicloverde; // Actualiza el ciclo de trabajo en LED rojo
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <transicion2+0x70>)
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	6353      	str	r3, [r2, #52]	@ 0x34
    // Aumentaqmos un poco la intensidad del LED rojo
    ciclorojo = (ciclomaximo - ciclorojo > VALCAMBIO)
 8000b30:	887a      	ldrh	r2, [r7, #2]
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000b3a:	dd04      	ble.n	8000b46 <transicion2+0x4e>
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	e000      	b.n	8000b48 <transicion2+0x50>
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	80bb      	strh	r3, [r7, #4]
                    ? ciclorojo + VALCAMBIO
                    : ciclomaximo; // Incremento con saturación en 100 %
    TIM4->CCR2 = ciclorojo;        // Actualiza el ciclo de trabajo en LED rojo
 8000b4a:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <transicion2+0x70>)
 8000b4c:	88bb      	ldrh	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	@ 0x38
    // Verficamos si repetimos o invertimos
  } while (cicloverde > 0 &&
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <transicion2+0x66>
 8000b56:	88ba      	ldrh	r2, [r7, #4]
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3d8      	bcc.n	8000b10 <transicion2+0x18>
           ciclorojo <
               ciclomaximo); // Repetimos mientras no se alcance un límite
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40000800 	.word	0x40000800

08000b6c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f000 fb84 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_I2C_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12c      	bne.n	8000c44 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <HAL_I2C_MspInit+0x8c>)
 8000c24:	f000 fb90 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a31      	ldr	r2, [pc, #196]	@ (8000d48 <HAL_I2S_MspInit+0xf0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d15a      	bne.n	8000d3e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c8c:	23c0      	movs	r3, #192	@ 0xc0
 8000c8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 f8a7 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ca4:	f7ff ff62 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb8:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce8:	4a18      	ldr	r2, [pc, #96]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <HAL_I2S_MspInit+0xf4>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <HAL_I2S_MspInit+0xf8>)
 8000d18:	f000 fb16 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d1c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <HAL_I2S_MspInit+0xfc>)
 8000d3a:	f000 fb05 	bl	8001348 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d3e:	bf00      	nop
 8000d40:	3738      	adds	r7, #56	@ 0x38
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40003c00 	.word	0x40003c00
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020800 	.word	0x40020800

08000d58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	@ (8000ddc <HAL_SPI_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_SPI_MspInit+0x88>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	4a17      	ldr	r2, [pc, #92]	@ (8000de0 <HAL_SPI_MspInit+0x88>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_SPI_MspInit+0x88>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <HAL_SPI_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <HAL_SPI_MspInit+0x88>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_SPI_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000db2:	23e0      	movs	r3, #224	@ 0xe0
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000dce:	f000 fabb 	bl	8001348 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40013000 	.word	0x40013000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10d      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_TIM_Base_MspInit+0x40>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <HAL_TIM_Base_MspInit+0x40>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <HAL_TIM_Base_MspInit+0x40>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40000800 	.word	0x40000800
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <HAL_TIM_MspPostInit+0x68>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d11e      	bne.n	8000e8c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_TIM_MspPostInit+0x6c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	@ (8000e98 <HAL_TIM_MspPostInit+0x6c>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_TIM_MspPostInit+0x6c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e6a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_TIM_MspPostInit+0x70>)
 8000e88:	f000 fa5e 	bl	8001348 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40000800 	.word	0x40000800
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f8d1 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <OTG_FS_IRQHandler+0x10>)
 8000f06:	f000 feb5 	bl	8001c74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200005b8 	.word	0x200005b8

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f008 fd84 	bl	8009a50 <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20020000 	.word	0x20020000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	200001d4 	.word	0x200001d4
 8000f7c:	20000ae0 	.word	0x20000ae0

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa8:	f7ff ffea 	bl	8000f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f008 fd43 	bl	8009a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fa8d 	bl	80004f4 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fe8:	08009b80 	.word	0x08009b80
  ldr r2, =_sbss
 8000fec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ff0:	20000ae0 	.word	0x20000ae0

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f94f 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fda4 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f967 	bl	800132e <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001078:	f000 f92f 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	200001d8 	.word	0x200001d8

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200001d8 	.word	0x200001d8

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e16b      	b.n	800163c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 815a 	bne.w	8001636 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d005      	beq.n	800139a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	2b02      	cmp	r3, #2
 8001398:	d130      	bne.n	80013fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d017      	beq.n	8001438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80b4 	beq.w	8001636 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b60      	ldr	r3, [pc, #384]	@ (8001654 <HAL_GPIO_Init+0x30c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001654 <HAL_GPIO_Init+0x30c>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014de:	4b5d      	ldr	r3, [pc, #372]	@ (8001654 <HAL_GPIO_Init+0x30c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001658 <HAL_GPIO_Init+0x310>)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a52      	ldr	r2, [pc, #328]	@ (800165c <HAL_GPIO_Init+0x314>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d02b      	beq.n	800156e <HAL_GPIO_Init+0x226>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a51      	ldr	r2, [pc, #324]	@ (8001660 <HAL_GPIO_Init+0x318>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d025      	beq.n	800156a <HAL_GPIO_Init+0x222>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a50      	ldr	r2, [pc, #320]	@ (8001664 <HAL_GPIO_Init+0x31c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01f      	beq.n	8001566 <HAL_GPIO_Init+0x21e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4f      	ldr	r2, [pc, #316]	@ (8001668 <HAL_GPIO_Init+0x320>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x21a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	@ (800166c <HAL_GPIO_Init+0x324>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x216>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4d      	ldr	r2, [pc, #308]	@ (8001670 <HAL_GPIO_Init+0x328>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x212>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <HAL_GPIO_Init+0x32c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x20e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4b      	ldr	r2, [pc, #300]	@ (8001678 <HAL_GPIO_Init+0x330>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x20a>
 800154e:	2307      	movs	r3, #7
 8001550:	e00e      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001552:	2308      	movs	r3, #8
 8001554:	e00c      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001556:	2306      	movs	r3, #6
 8001558:	e00a      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800155a:	2305      	movs	r3, #5
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800155e:	2304      	movs	r3, #4
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800156e:	2300      	movs	r3, #0
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001580:	4935      	ldr	r1, [pc, #212]	@ (8001658 <HAL_GPIO_Init+0x310>)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158e:	4b3b      	ldr	r3, [pc, #236]	@ (800167c <HAL_GPIO_Init+0x334>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b2:	4a32      	ldr	r2, [pc, #200]	@ (800167c <HAL_GPIO_Init+0x334>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <HAL_GPIO_Init+0x334>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015dc:	4a27      	ldr	r2, [pc, #156]	@ (800167c <HAL_GPIO_Init+0x334>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <HAL_GPIO_Init+0x334>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001606:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <HAL_GPIO_Init+0x334>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_GPIO_Init+0x334>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <HAL_GPIO_Init+0x334>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3301      	adds	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	f67f ae90 	bls.w	8001364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40021400 	.word	0x40021400
 8001674:	40021800 	.word	0x40021800
 8001678:	40021c00 	.word	0x40021c00
 800167c:	40013c00 	.word	0x40013c00

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af02      	add	r7, sp, #8
 80016b8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e059      	b.n	8001778 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f007 fe34 	bl	800934c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f2:	d102      	bne.n	80016fa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 fc41 	bl	8005f86 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7c1a      	ldrb	r2, [r3, #16]
 800170c:	f88d 2000 	strb.w	r2, [sp]
 8001710:	3304      	adds	r3, #4
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	f004 fbc2 	bl	8005e9c <USB_CoreInit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e026      	b.n	8001778 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f004 fc39 	bl	8005fa8 <USB_SetCurrentMode>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e017      	b.n	8001778 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7c1a      	ldrb	r2, [r3, #16]
 8001750:	f88d 2000 	strb.w	r2, [sp]
 8001754:	3304      	adds	r3, #4
 8001756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001758:	f004 fde2 	bl	8006320 <USB_HostInit>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e004      	b.n	8001778 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b08b      	sub	sp, #44	@ 0x2c
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	70fb      	strb	r3, [r7, #3]
 8001792:	460b      	mov	r3, r1
 8001794:	70bb      	strb	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800179a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800179c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_HCD_HC_Init+0x2c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e09d      	b.n	80018e8 <HAL_HCD_HC_Init+0x168>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3319      	adds	r3, #25
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3314      	adds	r3, #20
 80017d8:	787a      	ldrb	r2, [r7, #1]
 80017da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3315      	adds	r3, #21
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3326      	adds	r3, #38	@ 0x26
 8001800:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001804:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800180e:	b2d8      	uxtb	r0, r3
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3316      	adds	r3, #22
 800181e:	4602      	mov	r2, r0
 8001820:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fbc8 	bl	8001fbc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800182c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da0a      	bge.n	800184a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3317      	adds	r3, #23
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e009      	b.n	800185e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3317      	adds	r3, #23
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fec0 	bl	80065e8 <USB_GetHostSpeed>
 8001868:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800186a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d10b      	bne.n	800188a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_HCD_HC_Init+0x10a>
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d104      	bne.n	800188a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2bbc      	cmp	r3, #188	@ 0xbc
 8001884:	d901      	bls.n	800188a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001886:	23bc      	movs	r3, #188	@ 0xbc
 8001888:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3318      	adds	r3, #24
 800189a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800189e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	b298      	uxth	r0, r3
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3328      	adds	r3, #40	@ 0x28
 80018b4:	4602      	mov	r2, r0
 80018b6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	787c      	ldrb	r4, [r7, #1]
 80018c2:	78ba      	ldrb	r2, [r7, #2]
 80018c4:	78f9      	ldrb	r1, [r7, #3]
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4623      	mov	r3, r4
 80018d6:	f004 feaf 	bl	8006638 <USB_HC_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_HCD_HC_Halt+0x1e>
 800190a:	2302      	movs	r3, #2
 800190c:	e00f      	b.n	800192e <HAL_HCD_HC_Halt+0x3e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f005 fa41 	bl	8006da6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4603      	mov	r3, r0
 8001948:	70fb      	strb	r3, [r7, #3]
 800194a:	460b      	mov	r3, r1
 800194c:	70bb      	strb	r3, [r7, #2]
 800194e:	4613      	mov	r3, r2
 8001950:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3317      	adds	r3, #23
 8001962:	78ba      	ldrb	r2, [r7, #2]
 8001964:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3326      	adds	r3, #38	@ 0x26
 8001976:	787a      	ldrb	r2, [r7, #1]
 8001978:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800197a:	7c3b      	ldrb	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d114      	bne.n	80019aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	332a      	adds	r3, #42	@ 0x2a
 8001990:	2203      	movs	r2, #3
 8001992:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3319      	adds	r3, #25
 80019a4:	7f3a      	ldrb	r2, [r7, #28]
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e009      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	332a      	adds	r3, #42	@ 0x2a
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019be:	787b      	ldrb	r3, [r7, #1]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	f200 8102 	bhi.w	8001bca <HAL_HCD_HC_SubmitRequest+0x292>
 80019c6:	a201      	add	r2, pc, #4	@ (adr r2, 80019cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	08001bb5 	.word	0x08001bb5
 80019d4:	08001aa1 	.word	0x08001aa1
 80019d8:	08001b2b 	.word	0x08001b2b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80019dc:	7c3b      	ldrb	r3, [r7, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80f5 	bne.w	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80019e4:	78bb      	ldrb	r3, [r7, #2]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d12d      	bne.n	8001a46 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80019ea:	8b3b      	ldrh	r3, [r7, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	333d      	adds	r3, #61	@ 0x3d
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	333d      	adds	r3, #61	@ 0x3d
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10a      	bne.n	8001a30 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	332a      	adds	r3, #42	@ 0x2a
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a2e:	e0ce      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	332a      	adds	r3, #42	@ 0x2a
 8001a40:	2202      	movs	r2, #2
 8001a42:	701a      	strb	r2, [r3, #0]
      break;
 8001a44:	e0c3      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	331a      	adds	r3, #26
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	f040 80b8 	bne.w	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	333c      	adds	r3, #60	@ 0x3c
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	332a      	adds	r3, #42	@ 0x2a
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
      break;
 8001a88:	e0a1      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	332a      	adds	r3, #42	@ 0x2a
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e096      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001aa0:	78bb      	ldrb	r3, [r7, #2]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d120      	bne.n	8001ae8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	333d      	adds	r3, #61	@ 0x3d
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	332a      	adds	r3, #42	@ 0x2a
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ad0:	e07e      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	332a      	adds	r3, #42	@ 0x2a
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	701a      	strb	r2, [r3, #0]
      break;
 8001ae6:	e073      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	333c      	adds	r3, #60	@ 0x3c
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10a      	bne.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	332a      	adds	r3, #42	@ 0x2a
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
      break;
 8001b12:	e05d      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	332a      	adds	r3, #42	@ 0x2a
 8001b24:	2202      	movs	r2, #2
 8001b26:	701a      	strb	r2, [r3, #0]
      break;
 8001b28:	e052      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d120      	bne.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	333d      	adds	r3, #61	@ 0x3d
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	332a      	adds	r3, #42	@ 0x2a
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b5a:	e039      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	332a      	adds	r3, #42	@ 0x2a
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	701a      	strb	r2, [r3, #0]
      break;
 8001b70:	e02e      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	333c      	adds	r3, #60	@ 0x3c
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	332a      	adds	r3, #42	@ 0x2a
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
      break;
 8001b9c:	e018      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	332a      	adds	r3, #42	@ 0x2a
 8001bae:	2202      	movs	r2, #2
 8001bb0:	701a      	strb	r2, [r3, #0]
      break;
 8001bb2:	e00d      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	332a      	adds	r3, #42	@ 0x2a
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
      break;
 8001bc8:	e002      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001bce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	332c      	adds	r3, #44	@ 0x2c
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	8b39      	ldrh	r1, [r7, #24]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4403      	add	r3, r0
 8001bf4:	3334      	adds	r3, #52	@ 0x34
 8001bf6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	334c      	adds	r3, #76	@ 0x4c
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	3338      	adds	r3, #56	@ 0x38
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3315      	adds	r3, #21
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	334d      	adds	r3, #77	@ 0x4d
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3310      	adds	r3, #16
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	1d19      	adds	r1, r3, #4
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	799b      	ldrb	r3, [r3, #6]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f004 fe14 	bl	8006890 <USB_HC_StartXfer>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop

08001c74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fb02 	bl	8006294 <USB_GetMode>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f040 80fb 	bne.w	8001e8e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f004 fac5 	bl	800622c <USB_ReadInterrupts>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80f1 	beq.w	8001e8c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fabc 	bl	800622c <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001cbe:	d104      	bne.n	8001cca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 faac 	bl	800622c <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cde:	d104      	bne.n	8001cea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fa9c 	bl	800622c <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001cfe:	d104      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 fa8c 	bl	800622c <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d103      	bne.n	8001d26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 fa7e 	bl	800622c <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d3a:	d120      	bne.n	8001d7e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d113      	bne.n	8001d7e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d56:	2110      	movs	r1, #16
 8001d58:	6938      	ldr	r0, [r7, #16]
 8001d5a:	f004 f971 	bl	8006040 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	f004 f9a0 	bl	80060a4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7a5b      	ldrb	r3, [r3, #9]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d105      	bne.n	8001d78 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fb98 	bl	80064a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f007 fb65 	bl	8009448 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fa52 	bl	800622c <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d92:	d102      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f001 fd4d 	bl	8003834 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fa44 	bl	800622c <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d106      	bne.n	8001dbc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f007 fb2e 	bl	8009410 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2208      	movs	r2, #8
 8001dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 fa33 	bl	800622c <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dd0:	d139      	bne.n	8001e46 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 ffd4 	bl	8006d84 <USB_HC_ReadInterrupt>
 8001ddc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e025      	b.n	8001e30 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d018      	beq.n	8001e2a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e0e:	d106      	bne.n	8001e1e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f905 	bl	8002026 <HCD_HC_IN_IRQHandler>
 8001e1c:	e005      	b.n	8001e2a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4619      	mov	r1, r3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 ff67 	bl	8002cf8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	795b      	ldrb	r3, [r3, #5]
 8001e34:	461a      	mov	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d3d3      	bcc.n	8001de4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 f9ee 	bl	800622c <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d101      	bne.n	8001e5e <HAL_HCD_IRQHandler+0x1ea>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_HCD_IRQHandler+0x1ec>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d014      	beq.n	8001e8e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0210 	bic.w	r2, r2, #16
 8001e72:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f001 fbfe 	bl	8003676 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0210 	orr.w	r2, r2, #16
 8001e88:	619a      	str	r2, [r3, #24]
 8001e8a:	e000      	b.n	8001e8e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e8c:	bf00      	nop
    }
  }
}
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_HCD_Start+0x16>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e013      	b.n	8001ed2 <HAL_HCD_Start+0x3e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fb5c 	bl	8006576 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 f84e 	bl	8005f64 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_HCD_Stop+0x16>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e00d      	b.n	8001f0c <HAL_HCD_Stop+0x32>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f005 f8af 	bl	8007060 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fafe 	bl	8006522 <USB_ResetPort>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	334c      	adds	r3, #76	@ 0x4c
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3338      	adds	r3, #56	@ 0x38
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 fb40 	bl	8006616 <USB_GetCurrentFrame>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 fb1b 	bl	80065e8 <USB_GetHostSpeed>
 8001fb2:	4603      	mov	r3, r0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	331a      	adds	r3, #26
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	331b      	adds	r3, #27
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3325      	adds	r3, #37	@ 0x25
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3324      	adds	r3, #36	@ 0x24
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f004 f904 	bl	8006252 <USB_ReadChInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d11a      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002060:	461a      	mov	r2, r3
 8002062:	2304      	movs	r3, #4
 8002064:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	334d      	adds	r3, #77	@ 0x4d
 8002076:	2207      	movs	r2, #7
 8002078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fe8f 	bl	8006da6 <USB_HC_Halt>
 8002088:	e09e      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f8dd 	bl	8006252 <USB_ReadChInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a2:	d11b      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	334d      	adds	r3, #77	@ 0x4d
 80020c8:	2208      	movs	r2, #8
 80020ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 fe66 	bl	8006da6 <USB_HC_Halt>
 80020da:	e075      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 f8b4 	bl	8006252 <USB_ReadChInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d11a      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	2308      	movs	r3, #8
 8002104:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	334d      	adds	r3, #77	@ 0x4d
 8002116:	2206      	movs	r2, #6
 8002118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f004 fe3f 	bl	8006da6 <USB_HC_Halt>
 8002128:	e04e      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f004 f88d 	bl	8006252 <USB_ReadChInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002142:	d11b      	bne.n	800217c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002156:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	334d      	adds	r3, #77	@ 0x4d
 8002168:	2209      	movs	r2, #9
 800216a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f004 fe16 	bl	8006da6 <USB_HC_Halt>
 800217a:	e025      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f864 	bl	8006252 <USB_ReadChInterrupts>
 800218a:	4603      	mov	r3, r0
 800218c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002190:	2b80      	cmp	r3, #128	@ 0x80
 8002192:	d119      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a0:	461a      	mov	r2, r3
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334d      	adds	r3, #77	@ 0x4d
 80021b6:	2207      	movs	r2, #7
 80021b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 fdef 	bl	8006da6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 f83e 	bl	8006252 <USB_ReadChInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e0:	d112      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f004 fddb 	bl	8006da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002202:	6093      	str	r3, [r2, #8]
 8002204:	f000 bd75 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f004 f81e 	bl	8006252 <USB_ReadChInterrupts>
 8002216:	4603      	mov	r3, r0
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	f040 8128 	bne.w	8002472 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800222e:	461a      	mov	r2, r3
 8002230:	2320      	movs	r3, #32
 8002232:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	331b      	adds	r3, #27
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d119      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	331b      	adds	r3, #27
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	0151      	lsls	r1, r2, #5
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	440a      	add	r2, r1
 8002274:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	799b      	ldrb	r3, [r3, #6]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01b      	beq.n	80022be <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3330      	adds	r3, #48	@ 0x30
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4403      	add	r3, r0
 80022ba:	3338      	adds	r3, #56	@ 0x38
 80022bc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	334d      	adds	r3, #77	@ 0x4d
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3344      	adds	r3, #68	@ 0x44
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3326      	adds	r3, #38	@ 0x26
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3326      	adds	r3, #38	@ 0x26
 800231e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002320:	2b02      	cmp	r3, #2
 8002322:	d110      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fd3a 	bl	8006da6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	2310      	movs	r3, #16
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e03d      	b.n	80023c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3326      	adds	r3, #38	@ 0x26
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d00a      	beq.n	8002372 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3326      	adds	r3, #38	@ 0x26
 800236c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800236e:	2b01      	cmp	r3, #1
 8002370:	d127      	bne.n	80023c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	0151      	lsls	r1, r2, #5
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	440a      	add	r2, r1
 8002388:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800238c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002390:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	334c      	adds	r3, #76	@ 0x4c
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334c      	adds	r3, #76	@ 0x4c
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f007 f851 	bl	8009464 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	799b      	ldrb	r3, [r3, #6]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d13b      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3338      	adds	r3, #56	@ 0x38
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4403      	add	r3, r0
 80023ea:	3328      	adds	r3, #40	@ 0x28
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	440b      	add	r3, r1
 80023f0:	1e59      	subs	r1, r3, #1
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4403      	add	r3, r0
 8002400:	3328      	adds	r3, #40	@ 0x28
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	fbb1 f3f3 	udiv	r3, r1, r3
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8470 	beq.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	333c      	adds	r3, #60	@ 0x3c
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	b2d8      	uxtb	r0, r3
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	333c      	adds	r3, #60	@ 0x3c
 800243a:	4602      	mov	r2, r0
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	f000 bc58 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	333c      	adds	r3, #60	@ 0x3c
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	f083 0301 	eor.w	r3, r3, #1
 800245a:	b2d8      	uxtb	r0, r3
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	333c      	adds	r3, #60	@ 0x3c
 800246a:	4602      	mov	r2, r0
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	f000 bc40 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f003 fee9 	bl	8006252 <USB_ReadChInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d131      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	2320      	movs	r3, #32
 800249a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	331a      	adds	r3, #26
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f040 841f 	bne.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	331b      	adds	r3, #27
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	334d      	adds	r3, #77	@ 0x4d
 80024d8:	2203      	movs	r2, #3
 80024da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 fc5e 	bl	8006da6 <USB_HC_Halt>
 80024ea:	f000 bc02 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 feab 	bl	8006252 <USB_ReadChInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	f040 8305 	bne.w	8002b12 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2302      	movs	r3, #2
 8002518:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334d      	adds	r3, #77	@ 0x4d
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d114      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	334d      	adds	r3, #77	@ 0x4d
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334c      	adds	r3, #76	@ 0x4c
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e2cc      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	334d      	adds	r3, #77	@ 0x4d
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d114      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334d      	adds	r3, #77	@ 0x4d
 8002580:	2202      	movs	r2, #2
 8002582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334c      	adds	r3, #76	@ 0x4c
 8002594:	2205      	movs	r2, #5
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e2ac      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	334d      	adds	r3, #77	@ 0x4d
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b07      	cmp	r3, #7
 80025ae:	d00b      	beq.n	80025c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	334d      	adds	r3, #77	@ 0x4d
 80025c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	f040 80a6 	bne.w	8002714 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	334d      	adds	r3, #77	@ 0x4d
 80025d8:	2202      	movs	r2, #2
 80025da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3344      	adds	r3, #68	@ 0x44
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	1c59      	adds	r1, r3, #1
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4403      	add	r3, r0
 80025fc:	3344      	adds	r3, #68	@ 0x44
 80025fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3344      	adds	r3, #68	@ 0x44
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d943      	bls.n	800269e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3344      	adds	r3, #68	@ 0x44
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	331a      	adds	r3, #26
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d123      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	331b      	adds	r3, #27
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	331c      	adds	r3, #28
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	440a      	add	r2, r1
 800267e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002686:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	@ 0x4c
 8002698:	2204      	movs	r2, #4
 800269a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800269c:	e229      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334c      	adds	r3, #76	@ 0x4c
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	@ 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	@ 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026da:	2b02      	cmp	r3, #2
 80026dc:	f040 8209 	bne.w	8002af2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002712:	e1ee      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b05      	cmp	r3, #5
 8002728:	f040 80c8 	bne.w	80028bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	@ 0x4d
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	331b      	adds	r3, #27
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 81ce 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3326      	adds	r3, #38	@ 0x26
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d16b      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3348      	adds	r3, #72	@ 0x48
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1c59      	adds	r1, r3, #1
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4403      	add	r3, r0
 800278e:	3348      	adds	r3, #72	@ 0x48
 8002790:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3348      	adds	r3, #72	@ 0x48
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d943      	bls.n	8002830 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3348      	adds	r3, #72	@ 0x48
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	331b      	adds	r3, #27
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3344      	adds	r3, #68	@ 0x44
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d809      	bhi.n	80027fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	331c      	adds	r3, #28
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	440a      	add	r2, r1
 8002810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002818:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334c      	adds	r3, #76	@ 0x4c
 800282a:	2204      	movs	r2, #4
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e014      	b.n	800285a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334c      	adds	r3, #76	@ 0x4c
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e009      	b.n	800285a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	334c      	adds	r3, #76	@ 0x4c
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3326      	adds	r3, #38	@ 0x26
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3326      	adds	r3, #38	@ 0x26
 8002880:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002882:	2b02      	cmp	r3, #2
 8002884:	f040 8136 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800289e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e11b      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	334d      	adds	r3, #77	@ 0x4d
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	f040 8081 	bne.w	80029d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	@ 0x4d
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	331b      	adds	r3, #27
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	f040 80fa 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334c      	adds	r3, #76	@ 0x4c
 8002910:	2202      	movs	r2, #2
 8002912:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	0151      	lsls	r1, r2, #5
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	440a      	add	r2, r1
 800292a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800292e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002932:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	0151      	lsls	r1, r2, #5
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	440a      	add	r2, r1
 800294a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800294e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002952:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800296e:	f023 0320 	bic.w	r3, r3, #32
 8002972:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3326      	adds	r3, #38	@ 0x26
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3326      	adds	r3, #38	@ 0x26
 800299a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800299c:	2b02      	cmp	r3, #2
 800299e:	f040 80a9 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e08e      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	334d      	adds	r3, #77	@ 0x4d
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d143      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334d      	adds	r3, #77	@ 0x4d
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334c      	adds	r3, #76	@ 0x4c
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3326      	adds	r3, #38	@ 0x26
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3326      	adds	r3, #38	@ 0x26
 8002a3a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d159      	bne.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e03f      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334d      	adds	r3, #77	@ 0x4d
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d126      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	334d      	adds	r3, #77	@ 0x4d
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3344      	adds	r3, #68	@ 0x44
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c59      	adds	r1, r3, #1
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4403      	add	r3, r0
 8002abe:	3344      	adds	r3, #68	@ 0x44
 8002ac0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	334c      	adds	r3, #76	@ 0x4c
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e00d      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	@ 0x4d
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	f000 8100 	beq.w	8002cf0 <HCD_HC_IN_IRQHandler+0xcca>
 8002af0:	e000      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002af2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334c      	adds	r3, #76	@ 0x4c
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f006 fcaa 	bl	8009464 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b10:	e0ef      	b.n	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 fb99 	bl	8006252 <USB_ReadChInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b26:	2b40      	cmp	r3, #64	@ 0x40
 8002b28:	d12f      	bne.n	8002b8a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	2340      	movs	r3, #64	@ 0x40
 8002b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	334d      	adds	r3, #77	@ 0x4d
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	331a      	adds	r3, #26
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3344      	adds	r3, #68	@ 0x44
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 f90f 	bl	8006da6 <USB_HC_Halt>
 8002b88:	e0b3      	b.n	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 fb5d 	bl	8006252 <USB_ReadChInterrupts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	f040 80a7 	bne.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3326      	adds	r3, #38	@ 0x26
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d11b      	bne.n	8002bf2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3344      	adds	r3, #68	@ 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	334d      	adds	r3, #77	@ 0x4d
 8002bde:	2204      	movs	r2, #4
 8002be0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 f8db 	bl	8006da6 <USB_HC_Halt>
 8002bf0:	e03f      	b.n	8002c72 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3326      	adds	r3, #38	@ 0x26
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3326      	adds	r3, #38	@ 0x26
 8002c18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d129      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3344      	adds	r3, #68	@ 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	799b      	ldrb	r3, [r3, #6]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	331b      	adds	r3, #27
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d110      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334d      	adds	r3, #77	@ 0x4d
 8002c60:	2204      	movs	r2, #4
 8002c62:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 f89a 	bl	8006da6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	331b      	adds	r3, #27
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d129      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	331b      	adds	r3, #27
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	0151      	lsls	r1, r2, #5
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	440a      	add	r2, r1
 8002cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	0151      	lsls	r1, r2, #5
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2310      	movs	r3, #16
 8002cec:	6093      	str	r3, [r2, #8]
 8002cee:	e000      	b.n	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002cf0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fa9b 	bl	8006252 <USB_ReadChInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d11b      	bne.n	8002d5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2304      	movs	r3, #4
 8002d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	334d      	adds	r3, #77	@ 0x4d
 8002d48:	2207      	movs	r2, #7
 8002d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 f826 	bl	8006da6 <USB_HC_Halt>
 8002d5a:	f000 bc89 	b.w	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 fa73 	bl	8006252 <USB_ReadChInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 8082 	bne.w	8002e7c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	2320      	movs	r3, #32
 8002d88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3319      	adds	r3, #25
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d124      	bne.n	8002dea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3319      	adds	r3, #25
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	@ 0x4c
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334d      	adds	r3, #77	@ 0x4d
 8002dd8:	2203      	movs	r2, #3
 8002dda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 ffde 	bl	8006da6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	331a      	adds	r3, #26
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f040 8437 	bne.w	8003670 <HCD_HC_OUT_IRQHandler+0x978>
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	331b      	adds	r3, #27
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 842b 	bne.w	8003670 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3326      	adds	r3, #38	@ 0x26
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d009      	beq.n	8002e44 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	331b      	adds	r3, #27
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334d      	adds	r3, #77	@ 0x4d
 8002e54:	2203      	movs	r2, #3
 8002e56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f003 ffa0 	bl	8006da6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3344      	adds	r3, #68	@ 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e3f9      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 f9e4 	bl	8006252 <USB_ReadChInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e94:	d111      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ea8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 ff77 	bl	8006da6 <USB_HC_Halt>
 8002eb8:	e3da      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 f9c5 	bl	8006252 <USB_ReadChInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d168      	bne.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3344      	adds	r3, #68	@ 0x44
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 f9af 	bl	8006252 <USB_ReadChInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b40      	cmp	r3, #64	@ 0x40
 8002efc:	d112      	bne.n	8002f24 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3319      	adds	r3, #25
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2340      	movs	r3, #64	@ 0x40
 8002f22:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	331b      	adds	r3, #27
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d019      	beq.n	8002f6e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	331b      	adds	r3, #27
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	0151      	lsls	r1, r2, #5
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	440a      	add	r2, r1
 8002f64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334d      	adds	r3, #77	@ 0x4d
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 ff02 	bl	8006da6 <USB_HC_Halt>
 8002fa2:	e365      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 f950 	bl	8006252 <USB_ReadChInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b40      	cmp	r3, #64	@ 0x40
 8002fba:	d139      	bne.n	8003030 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	334d      	adds	r3, #77	@ 0x4d
 8002fcc:	2205      	movs	r2, #5
 8002fce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	331a      	adds	r3, #26
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3319      	adds	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3344      	adds	r3, #68	@ 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fec5 	bl	8006da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2340      	movs	r3, #64	@ 0x40
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e31f      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f003 f90a 	bl	8006252 <USB_ReadChInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d11a      	bne.n	800307e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2308      	movs	r3, #8
 8003058:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	334d      	adds	r3, #77	@ 0x4d
 800306a:	2206      	movs	r2, #6
 800306c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fe95 	bl	8006da6 <USB_HC_Halt>
 800307c:	e2f8      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f8e3 	bl	8006252 <USB_ReadChInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b10      	cmp	r3, #16
 8003094:	d144      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3344      	adds	r3, #68	@ 0x44
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334d      	adds	r3, #77	@ 0x4d
 80030ba:	2204      	movs	r2, #4
 80030bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3319      	adds	r3, #25
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d114      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3318      	adds	r3, #24
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3319      	adds	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fe4d 	bl	8006da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2310      	movs	r3, #16
 800311c:	6093      	str	r3, [r2, #8]
 800311e:	e2a7      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f003 f892 	bl	8006252 <USB_ReadChInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003134:	2b80      	cmp	r3, #128	@ 0x80
 8003136:	f040 8083 	bne.w	8003240 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	799b      	ldrb	r3, [r3, #6]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d111      	bne.n	8003166 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334d      	adds	r3, #77	@ 0x4d
 8003152:	2207      	movs	r2, #7
 8003154:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f003 fe21 	bl	8006da6 <USB_HC_Halt>
 8003164:	e062      	b.n	800322c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3344      	adds	r3, #68	@ 0x44
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1c59      	adds	r1, r3, #1
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4403      	add	r3, r0
 8003186:	3344      	adds	r3, #68	@ 0x44
 8003188:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3344      	adds	r3, #68	@ 0x44
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d922      	bls.n	80031e6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3344      	adds	r3, #68	@ 0x44
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	334c      	adds	r3, #76	@ 0x4c
 80031c4:	2204      	movs	r2, #4
 80031c6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334c      	adds	r3, #76	@ 0x4c
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f006 f940 	bl	8009464 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031e4:	e022      	b.n	800322c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	334c      	adds	r3, #76	@ 0x4c
 80031f6:	2202      	movs	r2, #2
 80031f8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003210:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003218:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003238:	461a      	mov	r2, r3
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	e217      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f802 	bl	8006252 <USB_ReadChInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003258:	d11b      	bne.n	8003292 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334d      	adds	r3, #77	@ 0x4d
 800326a:	2209      	movs	r2, #9
 800326c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fd95 	bl	8006da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e1ee      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f002 ffd9 	bl	8006252 <USB_ReadChInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	f040 81df 	bne.w	800366a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b8:	461a      	mov	r2, r3
 80032ba:	2302      	movs	r3, #2
 80032bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	334d      	adds	r3, #77	@ 0x4d
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	f040 8093 	bne.w	80033fc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	@ 0x4d
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	@ 0x4c
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3326      	adds	r3, #38	@ 0x26
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d00b      	beq.n	800332c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3326      	adds	r3, #38	@ 0x26
 8003324:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003326:	2b03      	cmp	r3, #3
 8003328:	f040 8190 	bne.w	800364c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	799b      	ldrb	r3, [r3, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d115      	bne.n	8003360 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	333d      	adds	r3, #61	@ 0x3d
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2d8      	uxtb	r0, r3
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	333d      	adds	r3, #61	@ 0x3d
 800335c:	4602      	mov	r2, r0
 800335e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	799b      	ldrb	r3, [r3, #6]
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 8171 	bne.w	800364c <HCD_HC_OUT_IRQHandler+0x954>
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3334      	adds	r3, #52	@ 0x34
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8165 	beq.w	800364c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3334      	adds	r3, #52	@ 0x34
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4403      	add	r3, r0
 80033a2:	3328      	adds	r3, #40	@ 0x28
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	440b      	add	r3, r1
 80033a8:	1e59      	subs	r1, r3, #1
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4403      	add	r3, r0
 80033b8:	3328      	adds	r3, #40	@ 0x28
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 813f 	beq.w	800364c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	333d      	adds	r3, #61	@ 0x3d
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	f083 0301 	eor.w	r3, r3, #1
 80033e6:	b2d8      	uxtb	r0, r3
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	333d      	adds	r3, #61	@ 0x3d
 80033f6:	4602      	mov	r2, r0
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e127      	b.n	800364c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	@ 0x4d
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d120      	bne.n	8003454 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	@ 0x4d
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	331b      	adds	r3, #27
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	f040 8107 	bne.w	800364c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	334c      	adds	r3, #76	@ 0x4c
 800344e:	2202      	movs	r2, #2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e0fb      	b.n	800364c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	334d      	adds	r3, #77	@ 0x4d
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b04      	cmp	r3, #4
 8003468:	d13a      	bne.n	80034e0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	334d      	adds	r3, #77	@ 0x4d
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	334c      	adds	r3, #76	@ 0x4c
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	331b      	adds	r3, #27
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f040 80d1 	bne.w	800364c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	331b      	adds	r3, #27
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	0151      	lsls	r1, r2, #5
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	440a      	add	r2, r1
 80034d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034dc:	6053      	str	r3, [r2, #4]
 80034de:	e0b5      	b.n	800364c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	334d      	adds	r3, #77	@ 0x4d
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d114      	bne.n	8003520 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	334d      	adds	r3, #77	@ 0x4d
 8003506:	2202      	movs	r2, #2
 8003508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	334c      	adds	r3, #76	@ 0x4c
 800351a:	2202      	movs	r2, #2
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e095      	b.n	800364c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	334d      	adds	r3, #77	@ 0x4d
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d114      	bne.n	8003560 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	334d      	adds	r3, #77	@ 0x4d
 8003546:	2202      	movs	r2, #2
 8003548:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	334c      	adds	r3, #76	@ 0x4c
 800355a:	2205      	movs	r2, #5
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e075      	b.n	800364c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	334d      	adds	r3, #77	@ 0x4d
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b07      	cmp	r3, #7
 8003574:	d00a      	beq.n	800358c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	334d      	adds	r3, #77	@ 0x4d
 8003586:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003588:	2b09      	cmp	r3, #9
 800358a:	d170      	bne.n	800366e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	@ 0x4d
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3344      	adds	r3, #68	@ 0x44
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4403      	add	r3, r0
 80035c0:	3344      	adds	r3, #68	@ 0x44
 80035c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3344      	adds	r3, #68	@ 0x44
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d914      	bls.n	8003604 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	3344      	adds	r3, #68	@ 0x44
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334c      	adds	r3, #76	@ 0x4c
 80035fe:	2204      	movs	r2, #4
 8003600:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003602:	e022      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	334c      	adds	r3, #76	@ 0x4c
 8003614:	2202      	movs	r2, #2
 8003616:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800362e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003636:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800364a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334c      	adds	r3, #76	@ 0x4c
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f005 fefe 	bl	8009464 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003668:	e002      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800366e:	bf00      	nop
  }
}
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	@ 0x28
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	0c5b      	lsrs	r3, r3, #17
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d004      	beq.n	80036bc <HCD_RXQLVL_IRQHandler+0x46>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	f000 80b6 	beq.w	8003826 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036ba:	e0b7      	b.n	800382c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b3 	beq.w	800382a <HCD_RXQLVL_IRQHandler+0x1b4>
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	332c      	adds	r3, #44	@ 0x2c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a7 	beq.w	800382a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3338      	adds	r3, #56	@ 0x38
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	18d1      	adds	r1, r2, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4403      	add	r3, r0
 8003700:	3334      	adds	r3, #52	@ 0x34
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4299      	cmp	r1, r3
 8003706:	f200 8083 	bhi.w	8003810 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	332c      	adds	r3, #44	@ 0x2c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	b292      	uxth	r2, r2
 8003724:	4619      	mov	r1, r3
 8003726:	f002 fd29 	bl	800617c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	332c      	adds	r3, #44	@ 0x2c
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	18d1      	adds	r1, r2, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4403      	add	r3, r0
 800374e:	332c      	adds	r3, #44	@ 0x2c
 8003750:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3338      	adds	r3, #56	@ 0x38
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	18d1      	adds	r1, r2, r3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4403      	add	r3, r0
 8003776:	3338      	adds	r3, #56	@ 0x38
 8003778:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	0cdb      	lsrs	r3, r3, #19
 800378a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3328      	adds	r3, #40	@ 0x28
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d13f      	bne.n	800382a <HCD_RXQLVL_IRQHandler+0x1b4>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03c      	beq.n	800382a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	333c      	adds	r3, #60	@ 0x3c
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f083 0301 	eor.w	r3, r3, #1
 80037f8:	b2d8      	uxtb	r0, r3
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	333c      	adds	r3, #60	@ 0x3c
 800380a:	4602      	mov	r2, r0
 800380c:	701a      	strb	r2, [r3, #0]
      break;
 800380e:	e00c      	b.n	800382a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	334c      	adds	r3, #76	@ 0x4c
 8003820:	2204      	movs	r2, #4
 8003822:	701a      	strb	r2, [r3, #0]
      break;
 8003824:	e001      	b.n	800382a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800382a:	bf00      	nop
  }
}
 800382c:	bf00      	nop
 800382e:	3728      	adds	r7, #40	@ 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003860:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d10b      	bne.n	8003884 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f005 fdd8 	bl	800942c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f043 0302 	orr.w	r3, r3, #2
 8003882:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b08      	cmp	r3, #8
 800388c:	d132      	bne.n	80038f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d126      	bne.n	80038ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7a5b      	ldrb	r3, [r3, #9]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d113      	bne.n	80038d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80038ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038b2:	d106      	bne.n	80038c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2102      	movs	r1, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f002 fdf4 	bl	80064a8 <USB_InitFSLSPClkSel>
 80038c0:	e011      	b.n	80038e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 fded 	bl	80064a8 <USB_InitFSLSPClkSel>
 80038ce:	e00a      	b.n	80038e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	79db      	ldrb	r3, [r3, #7]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038de:	461a      	mov	r2, r3
 80038e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80038e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f005 fdca 	bl	8009480 <HAL_HCD_PortEnabled_Callback>
 80038ec:	e002      	b.n	80038f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f005 fdd4 	bl	800949c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d103      	bne.n	8003906 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f043 0320 	orr.w	r3, r3, #32
 8003904:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6013      	str	r3, [r2, #0]
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e12b      	b.n	8003b86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd f940 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	@ 0x24
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800396e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800397e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003980:	f001 fa20 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 8003984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4a81      	ldr	r2, [pc, #516]	@ (8003b90 <HAL_I2C_Init+0x274>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d807      	bhi.n	80039a0 <HAL_I2C_Init+0x84>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a80      	ldr	r2, [pc, #512]	@ (8003b94 <HAL_I2C_Init+0x278>)
 8003994:	4293      	cmp	r3, r2
 8003996:	bf94      	ite	ls
 8003998:	2301      	movls	r3, #1
 800399a:	2300      	movhi	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e006      	b.n	80039ae <HAL_I2C_Init+0x92>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003b98 <HAL_I2C_Init+0x27c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bf94      	ite	ls
 80039a8:	2301      	movls	r3, #1
 80039aa:	2300      	movhi	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0e7      	b.n	8003b86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a78      	ldr	r2, [pc, #480]	@ (8003b9c <HAL_I2C_Init+0x280>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0c9b      	lsrs	r3, r3, #18
 80039c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b90 <HAL_I2C_Init+0x274>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d802      	bhi.n	80039f0 <HAL_I2C_Init+0xd4>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	3301      	adds	r3, #1
 80039ee:	e009      	b.n	8003a04 <HAL_I2C_Init+0xe8>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	4a69      	ldr	r2, [pc, #420]	@ (8003ba0 <HAL_I2C_Init+0x284>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	099b      	lsrs	r3, r3, #6
 8003a02:	3301      	adds	r3, #1
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	495c      	ldr	r1, [pc, #368]	@ (8003b90 <HAL_I2C_Init+0x274>)
 8003a20:	428b      	cmp	r3, r1
 8003a22:	d819      	bhi.n	8003a58 <HAL_I2C_Init+0x13c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e59      	subs	r1, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a32:	1c59      	adds	r1, r3, #1
 8003a34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a38:	400b      	ands	r3, r1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_I2C_Init+0x138>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1e59      	subs	r1, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a52:	e051      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003a54:	2304      	movs	r3, #4
 8003a56:	e04f      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d111      	bne.n	8003a84 <HAL_I2C_Init+0x168>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	440b      	add	r3, r1
 8003a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e012      	b.n	8003aaa <HAL_I2C_Init+0x18e>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e58      	subs	r0, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Init+0x196>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e022      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_I2C_Init+0x1bc>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e58      	subs	r0, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6859      	ldr	r1, [r3, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	440b      	add	r3, r1
 8003ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003acc:	3301      	adds	r3, #1
 8003ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ad6:	e00f      	b.n	8003af8 <HAL_I2C_Init+0x1dc>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e58      	subs	r0, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	0099      	lsls	r1, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	6809      	ldr	r1, [r1, #0]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6911      	ldr	r1, [r2, #16]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68d2      	ldr	r2, [r2, #12]
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	000186a0 	.word	0x000186a0
 8003b94:	001e847f 	.word	0x001e847f
 8003b98:	003d08ff 	.word	0x003d08ff
 8003b9c:	431bde83 	.word	0x431bde83
 8003ba0:	10624dd3 	.word	0x10624dd3

08003ba4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e128      	b.n	8003e08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a90      	ldr	r2, [pc, #576]	@ (8003e10 <HAL_I2S_Init+0x26c>)
 8003bce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fd f841 	bl	8000c58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bec:	f023 030f 	bic.w	r3, r3, #15
 8003bf0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d060      	beq.n	8003cc4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e001      	b.n	8003c14 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d802      	bhi.n	8003c22 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f001 f9c4 	bl	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c28:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c32:	d125      	bne.n	8003c80 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d010      	beq.n	8003c5e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	3305      	adds	r3, #5
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e01f      	b.n	8003c9e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	3305      	adds	r3, #5
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	e00e      	b.n	8003c9e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	3305      	adds	r3, #5
 8003c9c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e14 <HAL_I2S_Init+0x270>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e003      	b.n	8003ccc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d902      	bls.n	8003cd8 <HAL_I2S_Init+0x134>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	2bff      	cmp	r3, #255	@ 0xff
 8003cd6:	d907      	bls.n	8003ce8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cdc:	f043 0210 	orr.w	r2, r3, #16
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e08f      	b.n	8003e08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	ea42 0103 	orr.w	r1, r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d06:	f023 030f 	bic.w	r3, r3, #15
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6851      	ldr	r1, [r2, #4]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6892      	ldr	r2, [r2, #8]
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68d2      	ldr	r2, [r2, #12]
 8003d18:	4311      	orrs	r1, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6992      	ldr	r2, [r2, #24]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d161      	bne.n	8003df8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a38      	ldr	r2, [pc, #224]	@ (8003e18 <HAL_I2S_Init+0x274>)
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a37      	ldr	r2, [pc, #220]	@ (8003e1c <HAL_I2S_Init+0x278>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_I2S_Init+0x1a4>
 8003d44:	4b36      	ldr	r3, [pc, #216]	@ (8003e20 <HAL_I2S_Init+0x27c>)
 8003d46:	e001      	b.n	8003d4c <HAL_I2S_Init+0x1a8>
 8003d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	4932      	ldr	r1, [pc, #200]	@ (8003e1c <HAL_I2S_Init+0x278>)
 8003d54:	428a      	cmp	r2, r1
 8003d56:	d101      	bne.n	8003d5c <HAL_I2S_Init+0x1b8>
 8003d58:	4a31      	ldr	r2, [pc, #196]	@ (8003e20 <HAL_I2S_Init+0x27c>)
 8003d5a:	e001      	b.n	8003d60 <HAL_I2S_Init+0x1bc>
 8003d5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d60:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d64:	f023 030f 	bic.w	r3, r3, #15
 8003d68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e1c <HAL_I2S_Init+0x278>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_I2S_Init+0x1d4>
 8003d74:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <HAL_I2S_Init+0x27c>)
 8003d76:	e001      	b.n	8003d7c <HAL_I2S_Init+0x1d8>
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a25      	ldr	r2, [pc, #148]	@ (8003e1c <HAL_I2S_Init+0x278>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_I2S_Init+0x1ea>
 8003d8a:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <HAL_I2S_Init+0x27c>)
 8003d8c:	e001      	b.n	8003d92 <HAL_I2S_Init+0x1ee>
 8003d8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d9e:	d003      	beq.n	8003da8 <HAL_I2S_Init+0x204>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003da8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e001      	b.n	8003db4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003de0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a0d      	ldr	r2, [pc, #52]	@ (8003e1c <HAL_I2S_Init+0x278>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d101      	bne.n	8003df0 <HAL_I2S_Init+0x24c>
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <HAL_I2S_Init+0x27c>)
 8003dee:	e001      	b.n	8003df4 <HAL_I2S_Init+0x250>
 8003df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df4:	897a      	ldrh	r2, [r7, #10]
 8003df6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08003f1b 	.word	0x08003f1b
 8003e14:	cccccccd 	.word	0xcccccccd
 8003e18:	08004031 	.word	0x08004031
 8003e1c:	40003800 	.word	0x40003800
 8003e20:	40003400 	.word	0x40003400

08003e24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10e      	bne.n	8003eb4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ea4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ffb8 	bl	8003e24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10e      	bne.n	8003f12 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff93 	bl	8003e38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d13a      	bne.n	8003fac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d109      	bne.n	8003f54 <I2S_IRQHandler+0x3a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d102      	bne.n	8003f54 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ffb4 	bl	8003ebc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5a:	2b40      	cmp	r3, #64	@ 0x40
 8003f5c:	d126      	bne.n	8003fac <I2S_IRQHandler+0x92>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d11f      	bne.n	8003fac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ff50 	bl	8003e4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d136      	bne.n	8004026 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d109      	bne.n	8003fd6 <I2S_IRQHandler+0xbc>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fcc:	2b80      	cmp	r3, #128	@ 0x80
 8003fce:	d102      	bne.n	8003fd6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ff45 	bl	8003e60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d122      	bne.n	8004026 <I2S_IRQHandler+0x10c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d11b      	bne.n	8004026 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ffc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff13 	bl	8003e4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a92      	ldr	r2, [pc, #584]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800404a:	4b92      	ldr	r3, [pc, #584]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800404c:	e001      	b.n	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800404e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a8b      	ldr	r2, [pc, #556]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004068:	4b8a      	ldr	r3, [pc, #552]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406a:	e001      	b.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800406c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800407c:	d004      	beq.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 8099 	bne.w	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d107      	bne.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f925 	bl	80042ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f9c8 	bl	800444c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c2:	2b40      	cmp	r3, #64	@ 0x40
 80040c4:	d13a      	bne.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d035      	beq.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040da:	4b6e      	ldr	r3, [pc, #440]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040dc:	e001      	b.n	80040e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4969      	ldr	r1, [pc, #420]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ea:	428b      	cmp	r3, r1
 80040ec:	d101      	bne.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040ee:	4b69      	ldr	r3, [pc, #420]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040f0:	e001      	b.n	80040f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800410a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f043 0202 	orr.w	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fe88 	bl	8003e4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b08      	cmp	r3, #8
 8004144:	f040 80c3 	bne.w	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80bd 	beq.w	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004162:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a49      	ldr	r2, [pc, #292]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800416e:	4b49      	ldr	r3, [pc, #292]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004170:	e001      	b.n	8004176 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4944      	ldr	r1, [pc, #272]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800417e:	428b      	cmp	r3, r1
 8004180:	d101      	bne.n	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004182:	4b44      	ldr	r3, [pc, #272]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004184:	e001      	b.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004186:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800418e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f043 0204 	orr.w	r2, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fe4a 	bl	8003e4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041b8:	e089      	b.n	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d107      	bne.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8be 	bl	8004350 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f8fd 	bl	80043e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f4:	2b40      	cmp	r3, #64	@ 0x40
 80041f6:	d12f      	bne.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d02a      	beq.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004210:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1e      	ldr	r2, [pc, #120]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800421c:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800421e:	e001      	b.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4919      	ldr	r1, [pc, #100]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422c:	428b      	cmp	r3, r1
 800422e:	d101      	bne.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004230:	4b18      	ldr	r3, [pc, #96]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004232:	e001      	b.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004234:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004238:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800423c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fdfa 	bl	8003e4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b08      	cmp	r3, #8
 8004260:	d136      	bne.n	80042d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d031      	beq.n	80042d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a07      	ldr	r2, [pc, #28]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004276:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004278:	e001      	b.n	800427e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800427a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4902      	ldr	r1, [pc, #8]	@ (8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004286:	428b      	cmp	r3, r1
 8004288:	d106      	bne.n	8004298 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800428a:	4b02      	ldr	r3, [pc, #8]	@ (8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800428c:	e006      	b.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800428e:	bf00      	nop
 8004290:	40003800 	.word	0x40003800
 8004294:	40003400 	.word	0x40003400
 8004298:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800429c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff fdc0 	bl	8003e4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042cc:	e000      	b.n	80042d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042ce:	bf00      	nop
}
 80042d0:	bf00      	nop
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	1c99      	adds	r1, r3, #2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6251      	str	r1, [r2, #36]	@ 0x24
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800432c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ffc9 	bl	80042d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	1c99      	adds	r1, r3, #2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6251      	str	r1, [r2, #36]	@ 0x24
 8004362:	8819      	ldrh	r1, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <I2SEx_TxISR_I2SExt+0x90>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <I2SEx_TxISR_I2SExt+0x22>
 800436e:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <I2SEx_TxISR_I2SExt+0x94>)
 8004370:	e001      	b.n	8004376 <I2SEx_TxISR_I2SExt+0x26>
 8004372:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004376:	460a      	mov	r2, r1
 8004378:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d121      	bne.n	80043d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a12      	ldr	r2, [pc, #72]	@ (80043e0 <I2SEx_TxISR_I2SExt+0x90>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <I2SEx_TxISR_I2SExt+0x50>
 800439c:	4b11      	ldr	r3, [pc, #68]	@ (80043e4 <I2SEx_TxISR_I2SExt+0x94>)
 800439e:	e001      	b.n	80043a4 <I2SEx_TxISR_I2SExt+0x54>
 80043a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	490d      	ldr	r1, [pc, #52]	@ (80043e0 <I2SEx_TxISR_I2SExt+0x90>)
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d101      	bne.n	80043b4 <I2SEx_TxISR_I2SExt+0x64>
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <I2SEx_TxISR_I2SExt+0x94>)
 80043b2:	e001      	b.n	80043b8 <I2SEx_TxISR_I2SExt+0x68>
 80043b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff81 	bl	80042d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40003800 	.word	0x40003800
 80043e4:	40003400 	.word	0x40003400

080043e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68d8      	ldr	r0, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	1c99      	adds	r1, r3, #2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004400:	b282      	uxth	r2, r0
 8004402:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d113      	bne.n	8004444 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800442a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ff4a 	bl	80042d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a20      	ldr	r2, [pc, #128]	@ (80044dc <I2SEx_RxISR_I2SExt+0x90>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <I2SEx_RxISR_I2SExt+0x16>
 800445e:	4b20      	ldr	r3, [pc, #128]	@ (80044e0 <I2SEx_RxISR_I2SExt+0x94>)
 8004460:	e001      	b.n	8004466 <I2SEx_RxISR_I2SExt+0x1a>
 8004462:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004466:	68d8      	ldr	r0, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	1c99      	adds	r1, r3, #2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004472:	b282      	uxth	r2, r0
 8004474:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d121      	bne.n	80044d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a12      	ldr	r2, [pc, #72]	@ (80044dc <I2SEx_RxISR_I2SExt+0x90>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <I2SEx_RxISR_I2SExt+0x50>
 8004498:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <I2SEx_RxISR_I2SExt+0x94>)
 800449a:	e001      	b.n	80044a0 <I2SEx_RxISR_I2SExt+0x54>
 800449c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	490d      	ldr	r1, [pc, #52]	@ (80044dc <I2SEx_RxISR_I2SExt+0x90>)
 80044a8:	428b      	cmp	r3, r1
 80044aa:	d101      	bne.n	80044b0 <I2SEx_RxISR_I2SExt+0x64>
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <I2SEx_RxISR_I2SExt+0x94>)
 80044ae:	e001      	b.n	80044b4 <I2SEx_RxISR_I2SExt+0x68>
 80044b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff03 	bl	80042d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40003800 	.word	0x40003800
 80044e0:	40003400 	.word	0x40003400

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e267      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d075      	beq.n	80045ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004502:	4b88      	ldr	r3, [pc, #544]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b04      	cmp	r3, #4
 800450c:	d00c      	beq.n	8004528 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450e:	4b85      	ldr	r3, [pc, #532]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004516:	2b08      	cmp	r3, #8
 8004518:	d112      	bne.n	8004540 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451a:	4b82      	ldr	r3, [pc, #520]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004526:	d10b      	bne.n	8004540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	4b7e      	ldr	r3, [pc, #504]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05b      	beq.n	80045ec <HAL_RCC_OscConfig+0x108>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d157      	bne.n	80045ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e242      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x74>
 800454a:	4b76      	ldr	r3, [pc, #472]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a75      	ldr	r2, [pc, #468]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e01d      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x98>
 8004562:	4b70      	ldr	r3, [pc, #448]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6f      	ldr	r2, [pc, #444]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b6d      	ldr	r3, [pc, #436]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a6c      	ldr	r2, [pc, #432]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e00b      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 800457c:	4b69      	ldr	r3, [pc, #420]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a68      	ldr	r2, [pc, #416]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b66      	ldr	r3, [pc, #408]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a65      	ldr	r2, [pc, #404]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fc fd92 	bl	80010c4 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fc fd8e 	bl	80010c4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e207      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0xc0>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fc fd7e 	bl	80010c4 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fc fd7a 	bl	80010c4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1f3      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	4b51      	ldr	r3, [pc, #324]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0xe8>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d063      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800460e:	2b08      	cmp	r3, #8
 8004610:	d11c      	bne.n	800464c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004612:	4b44      	ldr	r3, [pc, #272]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	4b41      	ldr	r3, [pc, #260]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_RCC_OscConfig+0x152>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e1c7      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004636:	4b3b      	ldr	r3, [pc, #236]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4937      	ldr	r1, [pc, #220]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	e03a      	b.n	80046c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004654:	4b34      	ldr	r3, [pc, #208]	@ (8004728 <HAL_RCC_OscConfig+0x244>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fc fd33 	bl	80010c4 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004662:	f7fc fd2f 	bl	80010c4 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1a8      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	4b2b      	ldr	r3, [pc, #172]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004680:	4b28      	ldr	r3, [pc, #160]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4925      	ldr	r1, [pc, #148]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
 8004694:	e015      	b.n	80046c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCC_OscConfig+0x244>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fc fd12 	bl	80010c4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a4:	f7fc fd0e 	bl	80010c4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e187      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d036      	beq.n	800473c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d016      	beq.n	8004704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d6:	4b15      	ldr	r3, [pc, #84]	@ (800472c <HAL_RCC_OscConfig+0x248>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fc fcf2 	bl	80010c4 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fc fcee 	bl	80010c4 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e167      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_OscConfig+0x240>)
 80046f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x200>
 8004702:	e01b      	b.n	800473c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004704:	4b09      	ldr	r3, [pc, #36]	@ (800472c <HAL_RCC_OscConfig+0x248>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470a:	f7fc fcdb 	bl	80010c4 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	e00e      	b.n	8004730 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004712:	f7fc fcd7 	bl	80010c4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d907      	bls.n	8004730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e150      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
 8004724:	40023800 	.word	0x40023800
 8004728:	42470000 	.word	0x42470000
 800472c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b88      	ldr	r3, [pc, #544]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ea      	bne.n	8004712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8097 	beq.w	8004878 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b81      	ldr	r3, [pc, #516]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	4b7d      	ldr	r3, [pc, #500]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	4a7c      	ldr	r2, [pc, #496]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	@ 0x40
 800476a:	4b7a      	ldr	r3, [pc, #488]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b77      	ldr	r3, [pc, #476]	@ (8004958 <HAL_RCC_OscConfig+0x474>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004786:	4b74      	ldr	r3, [pc, #464]	@ (8004958 <HAL_RCC_OscConfig+0x474>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a73      	ldr	r2, [pc, #460]	@ (8004958 <HAL_RCC_OscConfig+0x474>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fc fc97 	bl	80010c4 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fc fc93 	bl	80010c4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e10c      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004958 <HAL_RCC_OscConfig+0x474>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x2ea>
 80047c0:	4b64      	ldr	r3, [pc, #400]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a63      	ldr	r2, [pc, #396]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80047cc:	e01c      	b.n	8004808 <HAL_RCC_OscConfig+0x324>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x30c>
 80047d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	4a5e      	ldr	r2, [pc, #376]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0x324>
 80047f0:	4b58      	ldr	r3, [pc, #352]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	4a57      	ldr	r2, [pc, #348]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80047fc:	4b55      	ldr	r3, [pc, #340]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004800:	4a54      	ldr	r2, [pc, #336]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004802:	f023 0304 	bic.w	r3, r3, #4
 8004806:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d015      	beq.n	800483c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fc fc58 	bl	80010c4 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fc fc54 	bl	80010c4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e0cb      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482e:	4b49      	ldr	r3, [pc, #292]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ee      	beq.n	8004818 <HAL_RCC_OscConfig+0x334>
 800483a:	e014      	b.n	8004866 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483c:	f7fc fc42 	bl	80010c4 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fc fc3e 	bl	80010c4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e0b5      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485a:	4b3e      	ldr	r3, [pc, #248]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1ee      	bne.n	8004844 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486c:	4b39      	ldr	r3, [pc, #228]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	4a38      	ldr	r2, [pc, #224]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004876:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a1 	beq.w	80049c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004882:	4b34      	ldr	r3, [pc, #208]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b08      	cmp	r3, #8
 800488c:	d05c      	beq.n	8004948 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d141      	bne.n	800491a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b31      	ldr	r3, [pc, #196]	@ (800495c <HAL_RCC_OscConfig+0x478>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fc fc12 	bl	80010c4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fc fc0e 	bl	80010c4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e087      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	4b27      	ldr	r3, [pc, #156]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	3b01      	subs	r3, #1
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	491b      	ldr	r1, [pc, #108]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ec:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <HAL_RCC_OscConfig+0x478>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fc fbe7 	bl	80010c4 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fa:	f7fc fbe3 	bl	80010c4 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e05c      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490c:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x416>
 8004918:	e054      	b.n	80049c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491a:	4b10      	ldr	r3, [pc, #64]	@ (800495c <HAL_RCC_OscConfig+0x478>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fc fbd0 	bl	80010c4 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004928:	f7fc fbcc 	bl	80010c4 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e045      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <HAL_RCC_OscConfig+0x470>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x444>
 8004946:	e03d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e038      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
 8004954:	40023800 	.word	0x40023800
 8004958:	40007000 	.word	0x40007000
 800495c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004960:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <HAL_RCC_OscConfig+0x4ec>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d028      	beq.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d121      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d11a      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004998:	4293      	cmp	r3, r2
 800499a:	d111      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	3b01      	subs	r3, #1
 80049aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800

080049d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0cc      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e8:	4b68      	ldr	r3, [pc, #416]	@ (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d90c      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f6:	4b65      	ldr	r3, [pc, #404]	@ (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b63      	ldr	r3, [pc, #396]	@ (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0b8      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a28:	4b59      	ldr	r3, [pc, #356]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4a58      	ldr	r2, [pc, #352]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a40:	4b53      	ldr	r3, [pc, #332]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4a52      	ldr	r2, [pc, #328]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a4c:	4b50      	ldr	r3, [pc, #320]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	494d      	ldr	r1, [pc, #308]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d044      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	4b47      	ldr	r3, [pc, #284]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d119      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e07f      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a92:	4b3f      	ldr	r3, [pc, #252]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e06f      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e067      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ab2:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 0203 	bic.w	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4934      	ldr	r1, [pc, #208]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac4:	f7fc fafe 	bl	80010c4 <HAL_GetTick>
 8004ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004acc:	f7fc fafa 	bl	80010c4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e04f      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 020c 	and.w	r2, r3, #12
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d1eb      	bne.n	8004acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af4:	4b25      	ldr	r3, [pc, #148]	@ (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d20c      	bcs.n	8004b1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b22      	ldr	r3, [pc, #136]	@ (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b20      	ldr	r3, [pc, #128]	@ (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e032      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b28:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4916      	ldr	r1, [pc, #88]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b46:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	490e      	ldr	r1, [pc, #56]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b5a:	f000 f821 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	490a      	ldr	r1, [pc, #40]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	5ccb      	ldrb	r3, [r1, r3]
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	4a09      	ldr	r2, [pc, #36]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b76:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fc fa5e 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023c00 	.word	0x40023c00
 8004b90:	40023800 	.word	0x40023800
 8004b94:	08009b58 	.word	0x08009b58
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	20000004 	.word	0x20000004

08004ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b094      	sub	sp, #80	@ 0x50
 8004ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb8:	4b79      	ldr	r3, [pc, #484]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d00d      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	f200 80e1 	bhi.w	8004d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x3a>
 8004bd2:	e0db      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b73      	ldr	r3, [pc, #460]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd8:	e0db      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bda:	4b73      	ldr	r3, [pc, #460]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bde:	e0d8      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be0:	4b6f      	ldr	r3, [pc, #444]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bea:	4b6d      	ldr	r3, [pc, #436]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d063      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	f04f 0000 	mov.w	r0, #0
 8004c1a:	f04f 0100 	mov.w	r1, #0
 8004c1e:	0159      	lsls	r1, r3, #5
 8004c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c24:	0150      	lsls	r0, r2, #5
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	1a51      	subs	r1, r2, r1
 8004c2e:	6139      	str	r1, [r7, #16]
 8004c30:	4629      	mov	r1, r5
 8004c32:	eb63 0301 	sbc.w	r3, r3, r1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c44:	4659      	mov	r1, fp
 8004c46:	018b      	lsls	r3, r1, #6
 8004c48:	4651      	mov	r1, sl
 8004c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c4e:	4651      	mov	r1, sl
 8004c50:	018a      	lsls	r2, r1, #6
 8004c52:	4651      	mov	r1, sl
 8004c54:	ebb2 0801 	subs.w	r8, r2, r1
 8004c58:	4659      	mov	r1, fp
 8004c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c72:	4690      	mov	r8, r2
 8004c74:	4699      	mov	r9, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	eb18 0303 	adds.w	r3, r8, r3
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	462b      	mov	r3, r5
 8004c80:	eb49 0303 	adc.w	r3, r9, r3
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c92:	4629      	mov	r1, r5
 8004c94:	024b      	lsls	r3, r1, #9
 8004c96:	4621      	mov	r1, r4
 8004c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	024a      	lsls	r2, r1, #9
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cb0:	f7fb fa8a 	bl	80001c8 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cbc:	e058      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b38      	ldr	r3, [pc, #224]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	4611      	mov	r1, r2
 8004cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cce:	623b      	str	r3, [r7, #32]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	f04f 0000 	mov.w	r0, #0
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	0159      	lsls	r1, r3, #5
 8004ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cea:	0150      	lsls	r0, r2, #5
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d10:	ebb2 040a 	subs.w	r4, r2, sl
 8004d14:	eb63 050b 	sbc.w	r5, r3, fp
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	00eb      	lsls	r3, r5, #3
 8004d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d26:	00e2      	lsls	r2, r4, #3
 8004d28:	4614      	mov	r4, r2
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	4643      	mov	r3, r8
 8004d2e:	18e3      	adds	r3, r4, r3
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	464b      	mov	r3, r9
 8004d34:	eb45 0303 	adc.w	r3, r5, r3
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d46:	4629      	mov	r1, r5
 8004d48:	028b      	lsls	r3, r1, #10
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d50:	4621      	mov	r1, r4
 8004d52:	028a      	lsls	r2, r1, #10
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	61fa      	str	r2, [r7, #28]
 8004d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d64:	f7fb fa30 	bl	80001c8 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3750      	adds	r7, #80	@ 0x50
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	00f42400 	.word	0x00f42400
 8004da8:	007a1200 	.word	0x007a1200

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db0:	4b03      	ldr	r3, [pc, #12]	@ (8004dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000000 	.word	0x20000000

08004dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dc8:	f7ff fff0 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0a9b      	lsrs	r3, r3, #10
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	@ (8004de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	08009b68 	.word	0x08009b68

08004dec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d035      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e14:	4b62      	ldr	r3, [pc, #392]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e1a:	f7fc f953 	bl	80010c4 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e22:	f7fc f94f 	bl	80010c4 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e0b0      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e34:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	019a      	lsls	r2, r3, #6
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	071b      	lsls	r3, r3, #28
 8004e4c:	4955      	ldr	r1, [pc, #340]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e54:	4b52      	ldr	r3, [pc, #328]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5a:	f7fc f933 	bl	80010c4 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e62:	f7fc f92f 	bl	80010c4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e090      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e74:	4b4b      	ldr	r3, [pc, #300]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8083 	beq.w	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	4b44      	ldr	r3, [pc, #272]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	4a43      	ldr	r2, [pc, #268]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e9e:	4b41      	ldr	r3, [pc, #260]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb6:	f7fc f905 	bl	80010c4 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebe:	f7fc f901 	bl	80010c4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e062      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ed0:	4b35      	ldr	r3, [pc, #212]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004edc:	4b31      	ldr	r3, [pc, #196]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02f      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d028      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004efa:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f04:	4b29      	ldr	r3, [pc, #164]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0a:	4b28      	ldr	r3, [pc, #160]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f10:	4a24      	ldr	r2, [pc, #144]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f16:	4b23      	ldr	r3, [pc, #140]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d114      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fc f8cf 	bl	80010c4 <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f28:	e00a      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fc f8cb 	bl	80010c4 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e02a      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f40:	4b18      	ldr	r3, [pc, #96]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ee      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f58:	d10d      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f5a:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f6e:	490d      	ldr	r1, [pc, #52]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	608b      	str	r3, [r1, #8]
 8004f74:	e005      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f76:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f80:	6093      	str	r3, [r2, #8]
 8004f82:	4b08      	ldr	r3, [pc, #32]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8e:	4905      	ldr	r1, [pc, #20]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	42470068 	.word	0x42470068
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40007000 	.word	0x40007000
 8004fac:	42470e40 	.word	0x42470e40

08004fb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d13f      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fce:	4b24      	ldr	r3, [pc, #144]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fd6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fe4:	d12f      	bne.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fe8:	617b      	str	r3, [r7, #20]
          break;
 8004fea:	e02f      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fec:	4b1c      	ldr	r3, [pc, #112]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff8:	d108      	bne.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ffa:	4b19      	ldr	r3, [pc, #100]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005002:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	e007      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800500c:	4b14      	ldr	r3, [pc, #80]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005014:	4a15      	ldr	r2, [pc, #84]	@ (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800501c:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005030:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005036:	0f1b      	lsrs	r3, r3, #28
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	617b      	str	r3, [r7, #20]
          break;
 8005044:	e002      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
          break;
 800504a:	bf00      	nop
        }
      }
      break;
 800504c:	e000      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800504e:	bf00      	nop
    }
  }
  return frequency;
 8005050:	697b      	ldr	r3, [r7, #20]
}
 8005052:	4618      	mov	r0, r3
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800
 8005064:	00bb8000 	.word	0x00bb8000
 8005068:	007a1200 	.word	0x007a1200
 800506c:	00f42400 	.word	0x00f42400

08005070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07b      	b.n	800517a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d108      	bne.n	800509c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005092:	d009      	beq.n	80050a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	61da      	str	r2, [r3, #28]
 800509a:	e005      	b.n	80050a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fb fe48 	bl	8000d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512c:	ea42 0103 	orr.w	r1, r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	f003 0104 	and.w	r1, r3, #4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	f003 0210 	and.w	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005168:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e041      	b.n	8005218 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fb fe1d 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f000 fad9 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e041      	b.n	80052b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f839 	bl	80052be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 fa8a 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x24>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e022      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d109      	bne.n	8005312 <HAL_TIM_PWM_Start+0x3e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e015      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d109      	bne.n	800532c <HAL_TIM_PWM_Start+0x58>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e008      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07c      	b.n	8005440 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0x82>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005354:	e013      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0x92>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005364:	e00b      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xa2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005374:	e003      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fce6 	bl	8005d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <HAL_TIM_PWM_Start+0x174>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_PWM_Start+0xcc>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2c      	ldr	r2, [pc, #176]	@ (800544c <HAL_TIM_PWM_Start+0x178>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d101      	bne.n	80053a4 <HAL_TIM_PWM_Start+0xd0>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_TIM_PWM_Start+0xd2>
 80053a4:	2300      	movs	r3, #0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a22      	ldr	r2, [pc, #136]	@ (8005448 <HAL_TIM_PWM_Start+0x174>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053cc:	d01d      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005450 <HAL_TIM_PWM_Start+0x17c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005454 <HAL_TIM_PWM_Start+0x180>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <HAL_TIM_PWM_Start+0x184>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	@ (800544c <HAL_TIM_PWM_Start+0x178>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a18      	ldr	r2, [pc, #96]	@ (800545c <HAL_TIM_PWM_Start+0x188>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIM_PWM_Start+0x136>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a16      	ldr	r2, [pc, #88]	@ (8005460 <HAL_TIM_PWM_Start+0x18c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d111      	bne.n	800542e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b06      	cmp	r3, #6
 800541a:	d010      	beq.n	800543e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	e007      	b.n	800543e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40010000 	.word	0x40010000
 800544c:	40010400 	.word	0x40010400
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40014000 	.word	0x40014000
 8005460:	40001800 	.word	0x40001800

08005464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800547e:	2302      	movs	r3, #2
 8005480:	e0ae      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	f200 809f 	bhi.w	80055d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005492:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054cd 	.word	0x080054cd
 800549c:	080055d1 	.word	0x080055d1
 80054a0:	080055d1 	.word	0x080055d1
 80054a4:	080055d1 	.word	0x080055d1
 80054a8:	0800550d 	.word	0x0800550d
 80054ac:	080055d1 	.word	0x080055d1
 80054b0:	080055d1 	.word	0x080055d1
 80054b4:	080055d1 	.word	0x080055d1
 80054b8:	0800554f 	.word	0x0800554f
 80054bc:	080055d1 	.word	0x080055d1
 80054c0:	080055d1 	.word	0x080055d1
 80054c4:	080055d1 	.word	0x080055d1
 80054c8:	0800558f 	.word	0x0800558f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f9f6 	bl	80058c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0208 	orr.w	r2, r2, #8
 80054e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0204 	bic.w	r2, r2, #4
 80054f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6999      	ldr	r1, [r3, #24]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	619a      	str	r2, [r3, #24]
      break;
 800550a:	e064      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fa46 	bl	80059a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	619a      	str	r2, [r3, #24]
      break;
 800554c:	e043      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fa9b 	bl	8005a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0208 	orr.w	r2, r2, #8
 8005568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0204 	bic.w	r2, r2, #4
 8005578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69d9      	ldr	r1, [r3, #28]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	61da      	str	r2, [r3, #28]
      break;
 800558c:	e023      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 faef 	bl	8005b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	021a      	lsls	r2, r3, #8
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	61da      	str	r2, [r3, #28]
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055de:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_TIM_ConfigClockSource+0x1c>
 8005600:	2302      	movs	r3, #2
 8005602:	e0b4      	b.n	800576e <HAL_TIM_ConfigClockSource+0x186>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800562a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563c:	d03e      	beq.n	80056bc <HAL_TIM_ConfigClockSource+0xd4>
 800563e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005642:	f200 8087 	bhi.w	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564a:	f000 8086 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x172>
 800564e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005652:	d87f      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b70      	cmp	r3, #112	@ 0x70
 8005656:	d01a      	beq.n	800568e <HAL_TIM_ConfigClockSource+0xa6>
 8005658:	2b70      	cmp	r3, #112	@ 0x70
 800565a:	d87b      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b60      	cmp	r3, #96	@ 0x60
 800565e:	d050      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x11a>
 8005660:	2b60      	cmp	r3, #96	@ 0x60
 8005662:	d877      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b50      	cmp	r3, #80	@ 0x50
 8005666:	d03c      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005668:	2b50      	cmp	r3, #80	@ 0x50
 800566a:	d873      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b40      	cmp	r3, #64	@ 0x40
 800566e:	d058      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x13a>
 8005670:	2b40      	cmp	r3, #64	@ 0x40
 8005672:	d86f      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b30      	cmp	r3, #48	@ 0x30
 8005676:	d064      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	2b30      	cmp	r3, #48	@ 0x30
 800567a:	d86b      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d060      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 8005680:	2b20      	cmp	r3, #32
 8005682:	d867      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d05c      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 8005688:	2b10      	cmp	r3, #16
 800568a:	d05a      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 800568c:	e062      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800569e:	f000 fb3b 	bl	8005d18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	609a      	str	r2, [r3, #8]
      break;
 80056ba:	e04f      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056cc:	f000 fb24 	bl	8005d18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056de:	609a      	str	r2, [r3, #8]
      break;
 80056e0:	e03c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 fa98 	bl	8005c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2150      	movs	r1, #80	@ 0x50
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 faf1 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005700:	e02c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800570e:	461a      	mov	r2, r3
 8005710:	f000 fab7 	bl	8005c82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2160      	movs	r1, #96	@ 0x60
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fae1 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005720:	e01c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	461a      	mov	r2, r3
 8005730:	f000 fa78 	bl	8005c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2140      	movs	r1, #64	@ 0x40
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fad1 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005740:	e00c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f000 fac8 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005752:	e003      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
      break;
 8005758:	e000      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800575a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a43      	ldr	r2, [pc, #268]	@ (8005898 <TIM_Base_SetConfig+0x120>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d013      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005796:	d00f      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a40      	ldr	r2, [pc, #256]	@ (800589c <TIM_Base_SetConfig+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00b      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3f      	ldr	r2, [pc, #252]	@ (80058a0 <TIM_Base_SetConfig+0x128>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a3e      	ldr	r2, [pc, #248]	@ (80058a4 <TIM_Base_SetConfig+0x12c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3d      	ldr	r2, [pc, #244]	@ (80058a8 <TIM_Base_SetConfig+0x130>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d108      	bne.n	80057ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a32      	ldr	r2, [pc, #200]	@ (8005898 <TIM_Base_SetConfig+0x120>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d02b      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d8:	d027      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2f      	ldr	r2, [pc, #188]	@ (800589c <TIM_Base_SetConfig+0x124>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d023      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2e      	ldr	r2, [pc, #184]	@ (80058a0 <TIM_Base_SetConfig+0x128>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01f      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	@ (80058a4 <TIM_Base_SetConfig+0x12c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01b      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2c      	ldr	r2, [pc, #176]	@ (80058a8 <TIM_Base_SetConfig+0x130>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d017      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2b      	ldr	r2, [pc, #172]	@ (80058ac <TIM_Base_SetConfig+0x134>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2a      	ldr	r2, [pc, #168]	@ (80058b0 <TIM_Base_SetConfig+0x138>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a29      	ldr	r2, [pc, #164]	@ (80058b4 <TIM_Base_SetConfig+0x13c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a28      	ldr	r2, [pc, #160]	@ (80058b8 <TIM_Base_SetConfig+0x140>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a27      	ldr	r2, [pc, #156]	@ (80058bc <TIM_Base_SetConfig+0x144>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a26      	ldr	r2, [pc, #152]	@ (80058c0 <TIM_Base_SetConfig+0x148>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a0e      	ldr	r2, [pc, #56]	@ (8005898 <TIM_Base_SetConfig+0x120>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_Base_SetConfig+0xf2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a10      	ldr	r2, [pc, #64]	@ (80058a8 <TIM_Base_SetConfig+0x130>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d103      	bne.n	8005872 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f043 0204 	orr.w	r2, r3, #4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]
}
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800
 80058b8:	40001800 	.word	0x40001800
 80058bc:	40001c00 	.word	0x40001c00
 80058c0:	40002000 	.word	0x40002000

080058c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f023 0201 	bic.w	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0302 	bic.w	r3, r3, #2
 800590c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a20      	ldr	r2, [pc, #128]	@ (800599c <TIM_OC1_SetConfig+0xd8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC1_SetConfig+0x64>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a1f      	ldr	r2, [pc, #124]	@ (80059a0 <TIM_OC1_SetConfig+0xdc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10c      	bne.n	8005942 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0308 	bic.w	r3, r3, #8
 800592e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 0304 	bic.w	r3, r3, #4
 8005940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a15      	ldr	r2, [pc, #84]	@ (800599c <TIM_OC1_SetConfig+0xd8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC1_SetConfig+0x8e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <TIM_OC1_SetConfig+0xdc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d111      	bne.n	8005976 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400

080059a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f023 0210 	bic.w	r2, r3, #16
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0320 	bic.w	r3, r3, #32
 80059ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a22      	ldr	r2, [pc, #136]	@ (8005a88 <TIM_OC2_SetConfig+0xe4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_OC2_SetConfig+0x68>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a21      	ldr	r2, [pc, #132]	@ (8005a8c <TIM_OC2_SetConfig+0xe8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d10d      	bne.n	8005a28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a17      	ldr	r2, [pc, #92]	@ (8005a88 <TIM_OC2_SetConfig+0xe4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC2_SetConfig+0x94>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <TIM_OC2_SetConfig+0xe8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d113      	bne.n	8005a60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a21      	ldr	r2, [pc, #132]	@ (8005b70 <TIM_OC3_SetConfig+0xe0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_OC3_SetConfig+0x66>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a20      	ldr	r2, [pc, #128]	@ (8005b74 <TIM_OC3_SetConfig+0xe4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d10d      	bne.n	8005b12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a16      	ldr	r2, [pc, #88]	@ (8005b70 <TIM_OC3_SetConfig+0xe0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_OC3_SetConfig+0x92>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <TIM_OC3_SetConfig+0xe4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d113      	bne.n	8005b4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40010400 	.word	0x40010400

08005b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	031b      	lsls	r3, r3, #12
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a12      	ldr	r2, [pc, #72]	@ (8005c1c <TIM_OC4_SetConfig+0xa4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC4_SetConfig+0x68>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a11      	ldr	r2, [pc, #68]	@ (8005c20 <TIM_OC4_SetConfig+0xa8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d109      	bne.n	8005bf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40010400 	.word	0x40010400

08005c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f023 030a 	bic.w	r3, r3, #10
 8005c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f023 0210 	bic.w	r2, r3, #16
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f043 0307 	orr.w	r3, r3, #7
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1a      	ldr	r2, [r3, #32]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e05a      	b.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a21      	ldr	r2, [pc, #132]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d022      	beq.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e08:	d01d      	beq.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d018      	beq.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1b      	ldr	r2, [pc, #108]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1a      	ldr	r2, [pc, #104]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a18      	ldr	r2, [pc, #96]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a17      	ldr	r2, [pc, #92]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a15      	ldr	r2, [pc, #84]	@ (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d10c      	bne.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40010000 	.word	0x40010000
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40000c00 	.word	0x40000c00
 8005e90:	40010400 	.word	0x40010400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40001800 	.word	0x40001800

08005e9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	f107 001c 	add.w	r0, r7, #28
 8005eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d123      	bne.n	8005efe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ede:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d105      	bne.n	8005ef2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f9dc 	bl	80062b0 <USB_CoreReset>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e01b      	b.n	8005f36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9d0 	bl	80062b0 <USB_CoreReset>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f28:	e005      	b.n	8005f36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f36:	7fbb      	ldrb	r3, [r7, #30]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10b      	bne.n	8005f54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f043 0206 	orr.w	r2, r3, #6
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f60:	b004      	add	sp, #16
 8005f62:	4770      	bx	lr

08005f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d115      	bne.n	8005ff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fd6:	200a      	movs	r0, #10
 8005fd8:	f7fb f880 	bl	80010dc <HAL_Delay>
      ms += 10U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	330a      	adds	r3, #10
 8005fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f956 	bl	8006294 <USB_GetMode>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d01e      	beq.n	800602c <USB_SetCurrentMode+0x84>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ff2:	d9f0      	bls.n	8005fd6 <USB_SetCurrentMode+0x2e>
 8005ff4:	e01a      	b.n	800602c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d115      	bne.n	8006028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006008:	200a      	movs	r0, #10
 800600a:	f7fb f867 	bl	80010dc <HAL_Delay>
      ms += 10U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	330a      	adds	r3, #10
 8006012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f93d 	bl	8006294 <USB_GetMode>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <USB_SetCurrentMode+0x84>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2bc7      	cmp	r3, #199	@ 0xc7
 8006024:	d9f0      	bls.n	8006008 <USB_SetCurrentMode+0x60>
 8006026:	e001      	b.n	800602c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e005      	b.n	8006038 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006030:	d101      	bne.n	8006036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800605a:	d901      	bls.n	8006060 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e01b      	b.n	8006098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	daf2      	bge.n	800604e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	019b      	lsls	r3, r3, #6
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006084:	d901      	bls.n	800608a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e006      	b.n	8006098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b20      	cmp	r3, #32
 8006094:	d0f0      	beq.n	8006078 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060bc:	d901      	bls.n	80060c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e018      	b.n	80060f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	daf2      	bge.n	80060b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2210      	movs	r2, #16
 80060d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060e0:	d901      	bls.n	80060e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e006      	b.n	80060f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d0f0      	beq.n	80060d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	@ 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4611      	mov	r1, r2
 800610c:	461a      	mov	r2, r3
 800610e:	460b      	mov	r3, r1
 8006110:	71fb      	strb	r3, [r7, #7]
 8006112:	4613      	mov	r3, r2
 8006114:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800611e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	d123      	bne.n	800616e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006126:	88bb      	ldrh	r3, [r7, #4]
 8006128:	3303      	adds	r3, #3
 800612a:	089b      	lsrs	r3, r3, #2
 800612c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800612e:	2300      	movs	r3, #0
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	e018      	b.n	8006166 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	031a      	lsls	r2, r3, #12
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4413      	add	r3, r2
 800613c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006140:	461a      	mov	r2, r3
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3301      	adds	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	3301      	adds	r3, #1
 8006158:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	3301      	adds	r3, #1
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	429a      	cmp	r2, r3
 800616c:	d3e2      	bcc.n	8006134 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3724      	adds	r7, #36	@ 0x24
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800617c:	b480      	push	{r7}
 800617e:	b08b      	sub	sp, #44	@ 0x2c
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	089b      	lsrs	r3, r3, #2
 8006196:	b29b      	uxth	r3, r3
 8006198:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	623b      	str	r3, [r7, #32]
 80061a6:	e014      	b.n	80061d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	3301      	adds	r3, #1
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	3301      	adds	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	3301      	adds	r3, #1
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	3301      	adds	r3, #1
 80061ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	3301      	adds	r3, #1
 80061d0:	623b      	str	r3, [r7, #32]
 80061d2:	6a3a      	ldr	r2, [r7, #32]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3e6      	bcc.n	80061a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061da:	8bfb      	ldrh	r3, [r7, #30]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01e      	beq.n	800621e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ea:	461a      	mov	r2, r3
 80061ec:	f107 0310 	add.w	r3, r7, #16
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006200:	b2da      	uxtb	r2, r3
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	701a      	strb	r2, [r3, #0]
      i++;
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	3301      	adds	r3, #1
 800620a:	623b      	str	r3, [r7, #32]
      pDest++;
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	3301      	adds	r3, #1
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006212:	8bfb      	ldrh	r3, [r7, #30]
 8006214:	3b01      	subs	r3, #1
 8006216:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006218:	8bfb      	ldrh	r3, [r7, #30]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1ea      	bne.n	80061f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006220:	4618      	mov	r0, r3
 8006222:	372c      	adds	r7, #44	@ 0x2c
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4013      	ands	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006286:	68bb      	ldr	r3, [r7, #8]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f003 0301 	and.w	r3, r3, #1
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3301      	adds	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062c8:	d901      	bls.n	80062ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e022      	b.n	8006314 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	daf2      	bge.n	80062bc <USB_CoreReset+0xc>

  count = 10U;
 80062d6:	230a      	movs	r3, #10
 80062d8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80062da:	e002      	b.n	80062e2 <USB_CoreReset+0x32>
  {
    count--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b01      	subs	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f9      	bne.n	80062dc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f043 0201 	orr.w	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006300:	d901      	bls.n	8006306 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e006      	b.n	8006314 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d0f0      	beq.n	80062f4 <USB_CoreReset+0x44>

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006320:	b084      	sub	sp, #16
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800632e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006340:	461a      	mov	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d119      	bne.n	80063aa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800637a:	2b01      	cmp	r3, #1
 800637c:	d10a      	bne.n	8006394 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800638c:	f043 0304 	orr.w	r3, r3, #4
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e014      	b.n	80063be <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063a2:	f023 0304 	bic.w	r3, r3, #4
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e009      	b.n	80063be <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063b8:	f023 0304 	bic.w	r3, r3, #4
 80063bc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063be:	2110      	movs	r1, #16
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff fe3d 	bl	8006040 <USB_FlushTxFifo>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fe67 	bl	80060a4 <USB_FlushRxFifo>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e015      	b.n	8006412 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f2:	461a      	mov	r2, r3
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063f8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006406:	461a      	mov	r2, r3
 8006408:	2300      	movs	r3, #0
 800640a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	3301      	adds	r3, #1
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006416:	461a      	mov	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4293      	cmp	r3, r2
 800641c:	d3e3      	bcc.n	80063e6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800642a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a18      	ldr	r2, [pc, #96]	@ (8006490 <USB_HostInit+0x170>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d10b      	bne.n	800644c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800643a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a15      	ldr	r2, [pc, #84]	@ (8006494 <USB_HostInit+0x174>)
 8006440:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a14      	ldr	r2, [pc, #80]	@ (8006498 <USB_HostInit+0x178>)
 8006446:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800644a:	e009      	b.n	8006460 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2280      	movs	r2, #128	@ 0x80
 8006450:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a11      	ldr	r2, [pc, #68]	@ (800649c <USB_HostInit+0x17c>)
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a11      	ldr	r2, [pc, #68]	@ (80064a0 <USB_HostInit+0x180>)
 800645c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006460:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f043 0210 	orr.w	r2, r3, #16
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <USB_HostInit+0x184>)
 800647a:	4313      	orrs	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006480:	7dfb      	ldrb	r3, [r7, #23]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr
 8006490:	40040000 	.word	0x40040000
 8006494:	01000200 	.word	0x01000200
 8006498:	00e00300 	.word	0x00e00300
 800649c:	00600080 	.word	0x00600080
 80064a0:	004000e0 	.word	0x004000e0
 80064a4:	a3200008 	.word	0xa3200008

080064a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064f0:	461a      	mov	r2, r3
 80064f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80064f6:	6053      	str	r3, [r2, #4]
 80064f8:	e00c      	b.n	8006514 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d107      	bne.n	8006510 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006506:	461a      	mov	r2, r3
 8006508:	f241 7370 	movw	r3, #6000	@ 0x1770
 800650c:	6053      	str	r3, [r2, #4]
 800650e:	e001      	b.n	8006514 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006542:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800654c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006550:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006552:	2064      	movs	r0, #100	@ 0x64
 8006554:	f7fa fdc2 	bl	80010dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006564:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006566:	200a      	movs	r0, #10
 8006568:	f7fa fdb8 	bl	80010dc <HAL_Delay>

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	460b      	mov	r3, r1
 8006580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800659a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d109      	bne.n	80065ba <USB_DriveVbus+0x44>
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d106      	bne.n	80065ba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065b8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c4:	d109      	bne.n	80065da <USB_DriveVbus+0x64>
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d106      	bne.n	80065da <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	0c5b      	lsrs	r3, r3, #17
 8006606:	f003 0303 	and.w	r3, r3, #3
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	b29b      	uxth	r3, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	70fb      	strb	r3, [r7, #3]
 800664a:	460b      	mov	r3, r1
 800664c:	70bb      	strb	r3, [r7, #2]
 800664e:	4613      	mov	r3, r2
 8006650:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006666:	461a      	mov	r2, r3
 8006668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800666c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800666e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006672:	2b03      	cmp	r3, #3
 8006674:	d87c      	bhi.n	8006770 <USB_HC_Init+0x138>
 8006676:	a201      	add	r2, pc, #4	@ (adr r2, 800667c <USB_HC_Init+0x44>)
 8006678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667c:	0800668d 	.word	0x0800668d
 8006680:	08006733 	.word	0x08006733
 8006684:	0800668d 	.word	0x0800668d
 8006688:	080066f5 	.word	0x080066f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006698:	461a      	mov	r2, r3
 800669a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800669e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80066a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da10      	bge.n	80066ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80066c8:	e055      	b.n	8006776 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a6f      	ldr	r2, [pc, #444]	@ (800688c <USB_HC_Init+0x254>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d151      	bne.n	8006776 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066f0:	60d3      	str	r3, [r2, #12]
      break;
 80066f2:	e040      	b.n	8006776 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006700:	461a      	mov	r2, r3
 8006702:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006706:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	da34      	bge.n	800677a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	440a      	add	r2, r1
 8006726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800672a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800672e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006730:	e023      	b.n	800677a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800673e:	461a      	mov	r2, r3
 8006740:	f240 2325 	movw	r3, #549	@ 0x225
 8006744:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800674a:	2b00      	cmp	r3, #0
 800674c:	da17      	bge.n	800677e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	78fa      	ldrb	r2, [r7, #3]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	440a      	add	r2, r1
 8006764:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006768:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800676c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800676e:	e006      	b.n	800677e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	77fb      	strb	r3, [r7, #31]
      break;
 8006774:	e004      	b.n	8006780 <USB_HC_Init+0x148>
      break;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <USB_HC_Init+0x148>
      break;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <USB_HC_Init+0x148>
      break;
 800677e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800678c:	461a      	mov	r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ac:	f043 0302 	orr.w	r3, r3, #2
 80067b0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	6939      	ldr	r1, [r7, #16]
 80067c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80067cc:	4313      	orrs	r3, r2
 80067ce:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80067dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	da03      	bge.n	80067ec <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	e001      	b.n	80067f0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fef9 	bl	80065e8 <USB_GetHostSpeed>
 80067f6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d106      	bne.n	800680e <USB_HC_Init+0x1d6>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d003      	beq.n	800680e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006806:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e001      	b.n	8006812 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006812:	787b      	ldrb	r3, [r7, #1]
 8006814:	059b      	lsls	r3, r3, #22
 8006816:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800681a:	78bb      	ldrb	r3, [r7, #2]
 800681c:	02db      	lsls	r3, r3, #11
 800681e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006822:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006824:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006828:	049b      	lsls	r3, r3, #18
 800682a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800682e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006830:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006832:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006836:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	431a      	orrs	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	440a      	add	r2, r1
 8006848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800684c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006850:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006852:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006856:	2b03      	cmp	r3, #3
 8006858:	d003      	beq.n	8006862 <USB_HC_Init+0x22a>
 800685a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d10f      	bne.n	8006882 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	78fa      	ldrb	r2, [r7, #3]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	440a      	add	r2, r1
 8006878:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800687c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006880:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006882:	7ffb      	ldrb	r3, [r7, #31]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40040000 	.word	0x40040000

08006890 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08c      	sub	sp, #48	@ 0x30
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80068a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068ac:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006a28 <USB_HC_StartXfer+0x198>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d12f      	bne.n	8006916 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d11c      	bne.n	80068f6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	7c9b      	ldrb	r3, [r3, #18]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <USB_HC_StartXfer+0x3c>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	7c9b      	ldrb	r3, [r3, #18]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d124      	bne.n	8006916 <USB_HC_StartXfer+0x86>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	799b      	ldrb	r3, [r3, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d120      	bne.n	8006916 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	6a3a      	ldr	r2, [r7, #32]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	60d3      	str	r3, [r2, #12]
 80068f4:	e00f      	b.n	8006916 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	791b      	ldrb	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <USB_HC_StartXfer+0x86>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	795b      	ldrb	r3, [r3, #5]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d107      	bne.n	8006916 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fb6b 	bl	8006fe8 <USB_DoPing>
        return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e232      	b.n	8006d7c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	799b      	ldrb	r3, [r3, #6]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d158      	bne.n	80069d0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800691e:	2301      	movs	r3, #1
 8006920:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	78db      	ldrb	r3, [r3, #3]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800692a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	8a92      	ldrh	r2, [r2, #20]
 8006930:	fb03 f202 	mul.w	r2, r3, r2
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	61da      	str	r2, [r3, #28]
 8006938:	e07c      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7c9b      	ldrb	r3, [r3, #18]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d130      	bne.n	80069a4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	2bbc      	cmp	r3, #188	@ 0xbc
 8006948:	d918      	bls.n	800697c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	8a9b      	ldrh	r3, [r3, #20]
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d003      	beq.n	800696c <USB_HC_StartXfer+0xdc>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d103      	bne.n	8006974 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2202      	movs	r2, #2
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e05f      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2201      	movs	r2, #1
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	e05b      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d007      	beq.n	800699c <USB_HC_StartXfer+0x10c>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d003      	beq.n	800699c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2204      	movs	r2, #4
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	e04b      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2203      	movs	r2, #3
 80069a0:	60da      	str	r2, [r3, #12]
 80069a2:	e047      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d10d      	bne.n	80069c6 <USB_HC_StartXfer+0x136>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	8a92      	ldrh	r2, [r2, #20]
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d907      	bls.n	80069c6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	8a92      	ldrh	r2, [r2, #20]
 80069bc:	fb03 f202 	mul.w	r2, r3, r2
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	61da      	str	r2, [r3, #28]
 80069c4:	e036      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6a1a      	ldr	r2, [r3, #32]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61da      	str	r2, [r3, #28]
 80069ce:	e031      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d018      	beq.n	8006a0a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	8a92      	ldrh	r2, [r2, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	3b01      	subs	r3, #1
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	8a92      	ldrh	r2, [r2, #20]
 80069e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80069ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80069f0:	8b7b      	ldrh	r3, [r7, #26]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d90b      	bls.n	8006a0e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80069f6:	8b7b      	ldrh	r3, [r7, #26]
 80069f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	8a92      	ldrh	r2, [r2, #20]
 8006a00:	fb03 f202 	mul.w	r2, r3, r2
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	61da      	str	r2, [r3, #28]
 8006a08:	e001      	b.n	8006a0e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	78db      	ldrb	r3, [r3, #3]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	8a92      	ldrh	r2, [r2, #20]
 8006a1c:	fb03 f202 	mul.w	r2, r3, r2
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	61da      	str	r2, [r3, #28]
 8006a24:	e006      	b.n	8006a34 <USB_HC_StartXfer+0x1a4>
 8006a26:	bf00      	nop
 8006a28:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6a1a      	ldr	r2, [r3, #32]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a3e:	04d9      	lsls	r1, r3, #19
 8006a40:	4ba3      	ldr	r3, [pc, #652]	@ (8006cd0 <USB_HC_StartXfer+0x440>)
 8006a42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	7d9b      	ldrb	r3, [r3, #22]
 8006a4a:	075b      	lsls	r3, r3, #29
 8006a4c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a50:	69f9      	ldr	r1, [r7, #28]
 8006a52:	0148      	lsls	r0, r1, #5
 8006a54:	6a39      	ldr	r1, [r7, #32]
 8006a56:	4401      	add	r1, r0
 8006a58:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a76:	460a      	mov	r2, r1
 8006a78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	6a3a      	ldr	r2, [r7, #32]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ab0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	7e7b      	ldrb	r3, [r7, #25]
 8006ac2:	075b      	lsls	r3, r3, #29
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	0148      	lsls	r0, r1, #5
 8006ac8:	6a39      	ldr	r1, [r7, #32]
 8006aca:	4401      	add	r1, r0
 8006acc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	799b      	ldrb	r3, [r3, #6]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 80c3 	bne.w	8006c64 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	7c5b      	ldrb	r3, [r3, #17]
 8006ae2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006afa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	6a3a      	ldr	r2, [r7, #32]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	79db      	ldrb	r3, [r3, #7]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d123      	bne.n	8006b6c <USB_HC_StartXfer+0x2dc>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	78db      	ldrb	r3, [r3, #3]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11f      	bne.n	8006b6c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	6a3a      	ldr	r2, [r7, #32]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b4a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	6a3a      	ldr	r2, [r7, #32]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b6a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	7c9b      	ldrb	r3, [r3, #18]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d003      	beq.n	8006b7c <USB_HC_StartXfer+0x2ec>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	7c9b      	ldrb	r3, [r3, #18]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d117      	bne.n	8006bac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d113      	bne.n	8006bac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	78db      	ldrb	r3, [r3, #3]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d10f      	bne.n	8006bac <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	0151      	lsls	r1, r2, #5
 8006b9e:	6a3a      	ldr	r2, [r7, #32]
 8006ba0:	440a      	add	r2, r1
 8006ba2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006baa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	7c9b      	ldrb	r3, [r3, #18]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d162      	bne.n	8006c7a <USB_HC_StartXfer+0x3ea>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	78db      	ldrb	r3, [r3, #3]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d15e      	bne.n	8006c7a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d858      	bhi.n	8006c78 <USB_HC_StartXfer+0x3e8>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <USB_HC_StartXfer+0x33c>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006bff 	.word	0x08006bff
 8006bd4:	08006c21 	.word	0x08006c21
 8006bd8:	08006c43 	.word	0x08006c43
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	6a3a      	ldr	r2, [r7, #32]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfa:	6053      	str	r3, [r2, #4]
          break;
 8006bfc:	e03d      	b.n	8006c7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c18:	f043 030e 	orr.w	r3, r3, #14
 8006c1c:	6053      	str	r3, [r2, #4]
          break;
 8006c1e:	e02c      	b.n	8006c7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	6a3a      	ldr	r2, [r7, #32]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c3e:	6053      	str	r3, [r2, #4]
          break;
 8006c40:	e01b      	b.n	8006c7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c60:	6053      	str	r3, [r2, #4]
          break;
 8006c62:	e00a      	b.n	8006c7a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	6053      	str	r3, [r2, #4]
 8006c76:	e000      	b.n	8006c7a <USB_HC_StartXfer+0x3ea>
          break;
 8006c78:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c90:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	78db      	ldrb	r3, [r3, #3]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	e003      	b.n	8006cac <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006caa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cb2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e055      	b.n	8006d7c <USB_HC_StartXfer+0x4ec>
 8006cd0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	78db      	ldrb	r3, [r3, #3]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d14e      	bne.n	8006d7a <USB_HC_StartXfer+0x4ea>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d04a      	beq.n	8006d7a <USB_HC_StartXfer+0x4ea>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	79db      	ldrb	r3, [r3, #7]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d146      	bne.n	8006d7a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	7c9b      	ldrb	r3, [r3, #18]
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d831      	bhi.n	8006d58 <USB_HC_StartXfer+0x4c8>
 8006cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <USB_HC_StartXfer+0x46c>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d0d 	.word	0x08006d0d
 8006d00:	08006d31 	.word	0x08006d31
 8006d04:	08006d0d 	.word	0x08006d0d
 8006d08:	08006d31 	.word	0x08006d31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	3303      	adds	r3, #3
 8006d12:	089b      	lsrs	r3, r3, #2
 8006d14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d16:	8afa      	ldrh	r2, [r7, #22]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d91c      	bls.n	8006d5c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	f043 0220 	orr.w	r2, r3, #32
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d2e:	e015      	b.n	8006d5c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	3303      	adds	r3, #3
 8006d36:	089b      	lsrs	r3, r3, #2
 8006d38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d3a:	8afa      	ldrh	r2, [r7, #22]
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d90a      	bls.n	8006d60 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d56:	e003      	b.n	8006d60 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006d58:	bf00      	nop
 8006d5a:	e002      	b.n	8006d62 <USB_HC_StartXfer+0x4d2>
        break;
 8006d5c:	bf00      	nop
 8006d5e:	e000      	b.n	8006d62 <USB_HC_StartXfer+0x4d2>
        break;
 8006d60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	785a      	ldrb	r2, [r3, #1]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2000      	movs	r0, #0
 8006d72:	9000      	str	r0, [sp, #0]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff f9c3 	bl	8006100 <USB_WritePacket>
  }

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3728      	adds	r7, #40	@ 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	b29b      	uxth	r3, r3
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b089      	sub	sp, #36	@ 0x24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	0c9b      	lsrs	r3, r3, #18
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	0fdb      	lsrs	r3, r3, #31
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	0fdb      	lsrs	r3, r3, #31
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d10d      	bne.n	8006e28 <USB_HC_Halt+0x82>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <USB_HC_Halt+0x82>
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d002      	beq.n	8006e24 <USB_HC_Halt+0x7e>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d101      	bne.n	8006e28 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	e0d8      	b.n	8006fda <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <USB_HC_Halt+0x8e>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d173      	bne.n	8006f1c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d14a      	bne.n	8006ef6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d133      	bne.n	8006ed4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e8a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ea6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006eaa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb8:	d82e      	bhi.n	8006f18 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ed0:	d0ec      	beq.n	8006eac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ed2:	e081      	b.n	8006fd8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ef2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ef4:	e070      	b.n	8006fd8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f16:	e05f      	b.n	8006fd8 <USB_HC_Halt+0x232>
            break;
 8006f18:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f1a:	e05d      	b.n	8006fd8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f3a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d133      	bne.n	8006fb4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f8a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f98:	d81d      	bhi.n	8006fd6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb0:	d0ec      	beq.n	8006f8c <USB_HC_Halt+0x1e6>
 8006fb2:	e011      	b.n	8006fd8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e000      	b.n	8006fd8 <USB_HC_Halt+0x232>
          break;
 8006fd6:	bf00      	nop
    }
  }

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3724      	adds	r7, #36	@ 0x24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	04da      	lsls	r2, r3, #19
 8007004:	4b15      	ldr	r3, [pc, #84]	@ (800705c <USB_DoPing+0x74>)
 8007006:	4013      	ands	r3, r2
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	440a      	add	r2, r1
 8007010:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007014:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007018:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007030:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007038:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007046:	461a      	mov	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	1ff80000 	.word	0x1ff80000

08007060 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fe ff86 	bl	8005f86 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800707a:	2110      	movs	r1, #16
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7fe ffdf 	bl	8006040 <USB_FlushTxFifo>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff f809 	bl	80060a4 <USB_FlushRxFifo>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800709c:	2300      	movs	r3, #0
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e01f      	b.n	80070e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d6:	461a      	mov	r2, r3
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	3301      	adds	r3, #1
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b0f      	cmp	r3, #15
 80070e6:	d9dc      	bls.n	80070a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80070e8:	2300      	movs	r3, #0
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e034      	b.n	8007158 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007104:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800710c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007114:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007122:	461a      	mov	r2, r3
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007134:	d80c      	bhi.n	8007150 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800714c:	d0ec      	beq.n	8007128 <USB_StopHost+0xc8>
 800714e:	e000      	b.n	8007152 <USB_StopHost+0xf2>
        break;
 8007150:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	3301      	adds	r3, #1
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b0f      	cmp	r3, #15
 800715c:	d9c7      	bls.n	80070ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007164:	461a      	mov	r2, r3
 8007166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800716a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007172:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fe fef5 	bl	8005f64 <USB_EnableGlobalInt>

  return ret;
 800717a:	7ffb      	ldrb	r3, [r7, #31]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007184:	b590      	push	{r4, r7, lr}
 8007186:	b089      	sub	sp, #36	@ 0x24
 8007188:	af04      	add	r7, sp, #16
 800718a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800718c:	2301      	movs	r3, #1
 800718e:	2202      	movs	r2, #2
 8007190:	2102      	movs	r1, #2
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fc83 	bl	8007a9e <USBH_FindInterface>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2bff      	cmp	r3, #255	@ 0xff
 80071a0:	d002      	beq.n	80071a8 <USBH_CDC_InterfaceInit+0x24>
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d901      	bls.n	80071ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071a8:	2302      	movs	r3, #2
 80071aa:	e13d      	b.n	8007428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc58 	bl	8007a66 <USBH_SelectInterface>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80071c0:	2302      	movs	r3, #2
 80071c2:	e131      	b.n	8007428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80071ca:	2050      	movs	r0, #80	@ 0x50
 80071cc:	f002 fb6a 	bl	80098a4 <malloc>
 80071d0:	4603      	mov	r3, r0
 80071d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80071e4:	2302      	movs	r3, #2
 80071e6:	e11f      	b.n	8007428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80071e8:	2250      	movs	r2, #80	@ 0x50
 80071ea:	2100      	movs	r1, #0
 80071ec:	68b8      	ldr	r0, [r7, #8]
 80071ee:	f002 fc17 	bl	8009a20 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	211a      	movs	r1, #26
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	b25b      	sxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	da15      	bge.n	8007236 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	211a      	movs	r1, #26
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	4413      	add	r3, r2
 8007216:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	211a      	movs	r1, #26
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	4413      	add	r3, r2
 800722c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007230:	881a      	ldrh	r2, [r3, #0]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 ffc4 	bl	80091ca <USBH_AllocPipe>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	7819      	ldrb	r1, [r3, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	7858      	ldrb	r0, [r3, #1]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	8952      	ldrh	r2, [r2, #10]
 8007262:	9202      	str	r2, [sp, #8]
 8007264:	2203      	movs	r2, #3
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4623      	mov	r3, r4
 800726c:	4602      	mov	r2, r0
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 ff7c 	bl	800916c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f002 fa8b 	bl	8009798 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007282:	2300      	movs	r3, #0
 8007284:	2200      	movs	r2, #0
 8007286:	210a      	movs	r1, #10
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc08 	bl	8007a9e <USBH_FindInterface>
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2bff      	cmp	r3, #255	@ 0xff
 8007296:	d002      	beq.n	800729e <USBH_CDC_InterfaceInit+0x11a>
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d901      	bls.n	80072a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800729e:	2302      	movs	r3, #2
 80072a0:	e0c2      	b.n	8007428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	211a      	movs	r1, #26
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	4413      	add	r3, r2
 80072ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	b25b      	sxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da16      	bge.n	80072e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	211a      	movs	r1, #26
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	4413      	add	r3, r2
 80072c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072ca:	781a      	ldrb	r2, [r3, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	211a      	movs	r1, #26
 80072d6:	fb01 f303 	mul.w	r3, r1, r3
 80072da:	4413      	add	r3, r2
 80072dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072e0:	881a      	ldrh	r2, [r3, #0]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	835a      	strh	r2, [r3, #26]
 80072e6:	e015      	b.n	8007314 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	211a      	movs	r1, #26
 80072ee:	fb01 f303 	mul.w	r3, r1, r3
 80072f2:	4413      	add	r3, r2
 80072f4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	211a      	movs	r1, #26
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	4413      	add	r3, r2
 800730a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800730e:	881a      	ldrh	r2, [r3, #0]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	211a      	movs	r1, #26
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	4413      	add	r3, r2
 8007320:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	b25b      	sxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	da16      	bge.n	800735a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	211a      	movs	r1, #26
 8007332:	fb01 f303 	mul.w	r3, r1, r3
 8007336:	4413      	add	r3, r2
 8007338:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	211a      	movs	r1, #26
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007352:	881a      	ldrh	r2, [r3, #0]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	835a      	strh	r2, [r3, #26]
 8007358:	e015      	b.n	8007386 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	211a      	movs	r1, #26
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	4413      	add	r3, r2
 8007366:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800736a:	781a      	ldrb	r2, [r3, #0]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	211a      	movs	r1, #26
 8007376:	fb01 f303 	mul.w	r3, r1, r3
 800737a:	4413      	add	r3, r2
 800737c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007380:	881a      	ldrh	r2, [r3, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	7b9b      	ldrb	r3, [r3, #14]
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 ff1c 	bl	80091ca <USBH_AllocPipe>
 8007392:	4603      	mov	r3, r0
 8007394:	461a      	mov	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	7bdb      	ldrb	r3, [r3, #15]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 ff12 	bl	80091ca <USBH_AllocPipe>
 80073a6:	4603      	mov	r3, r0
 80073a8:	461a      	mov	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	7b59      	ldrb	r1, [r3, #13]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	7b98      	ldrb	r0, [r3, #14]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	8b12      	ldrh	r2, [r2, #24]
 80073c6:	9202      	str	r2, [sp, #8]
 80073c8:	2202      	movs	r2, #2
 80073ca:	9201      	str	r2, [sp, #4]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	4623      	mov	r3, r4
 80073d0:	4602      	mov	r2, r0
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 feca 	bl	800916c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	7b19      	ldrb	r1, [r3, #12]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	7bd8      	ldrb	r0, [r3, #15]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	8b52      	ldrh	r2, [r2, #26]
 80073f0:	9202      	str	r2, [sp, #8]
 80073f2:	2202      	movs	r2, #2
 80073f4:	9201      	str	r2, [sp, #4]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4623      	mov	r3, r4
 80073fa:	4602      	mov	r2, r0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 feb5 	bl	800916c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	7b5b      	ldrb	r3, [r3, #13]
 800740e:	2200      	movs	r2, #0
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f002 f9c0 	bl	8009798 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	7b1b      	ldrb	r3, [r3, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 f9b9 	bl	8009798 <USBH_LL_SetToggle>

  return USBH_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	bd90      	pop	{r4, r7, pc}

08007430 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 feaa 	bl	80091aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fed5 	bl	800920c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	7b1b      	ldrb	r3, [r3, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	7b1b      	ldrb	r3, [r3, #12]
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fe97 	bl	80091aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7b1b      	ldrb	r3, [r3, #12]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fec2 	bl	800920c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	7b5b      	ldrb	r3, [r3, #13]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00e      	beq.n	80074b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	7b5b      	ldrb	r3, [r3, #13]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fe84 	bl	80091aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	7b5b      	ldrb	r3, [r3, #13]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 feaf 	bl	800920c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 f9f3 	bl	80098b4 <free>
    phost->pActiveClass->pData = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074d4:	2200      	movs	r2, #0
 80074d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3340      	adds	r3, #64	@ 0x40
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f8b1 	bl	8007662 <GetLineCoding>
 8007500:	4603      	mov	r3, r0
 8007502:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d105      	bne.n	8007516 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007510:	2102      	movs	r1, #2
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007516:	7afb      	ldrb	r3, [r7, #11]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007528:	2301      	movs	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007540:	2b04      	cmp	r3, #4
 8007542:	d877      	bhi.n	8007634 <USBH_CDC_Process+0x114>
 8007544:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <USBH_CDC_Process+0x2c>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	08007561 	.word	0x08007561
 8007550:	08007567 	.word	0x08007567
 8007554:	08007597 	.word	0x08007597
 8007558:	0800760b 	.word	0x0800760b
 800755c:	08007619 	.word	0x08007619
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
      break;
 8007564:	e06d      	b.n	8007642 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f897 	bl	80076a0 <SetLineCoding>
 8007572:	4603      	mov	r3, r0
 8007574:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007584:	e058      	b.n	8007638 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d055      	beq.n	8007638 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2204      	movs	r2, #4
 8007590:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007594:	e050      	b.n	8007638 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	3340      	adds	r3, #64	@ 0x40
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f860 	bl	8007662 <GetLineCoding>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d126      	bne.n	80075fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075be:	791b      	ldrb	r3, [r3, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d13b      	bne.n	800763c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d133      	bne.n	800763c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d12b      	bne.n	800763c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d124      	bne.n	800763c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f958 	bl	80078a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075f8:	e020      	b.n	800763c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d01d      	beq.n	800763c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2204      	movs	r2, #4
 8007604:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007608:	e018      	b.n	800763c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f867 	bl	80076de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f8da 	bl	80077ca <CDC_ProcessReception>
      break;
 8007616:	e014      	b.n	8007642 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007618:	2100      	movs	r1, #0
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f81e 	bl	800865c <USBH_ClrFeature>
 8007620:	4603      	mov	r3, r0
 8007622:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007632:	e005      	b.n	8007640 <USBH_CDC_Process+0x120>

    default:
      break;
 8007634:	bf00      	nop
 8007636:	e004      	b.n	8007642 <USBH_CDC_Process+0x122>
      break;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <USBH_CDC_Process+0x122>
      break;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <USBH_CDC_Process+0x122>
      break;
 8007640:	bf00      	nop

  }

  return status;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	22a1      	movs	r2, #161	@ 0xa1
 8007670:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2221      	movs	r2, #33	@ 0x21
 8007676:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2207      	movs	r2, #7
 8007688:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2207      	movs	r2, #7
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fb17 	bl	8008cc4 <USBH_CtlReq>
 8007696:	4603      	mov	r3, r0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2221      	movs	r2, #33	@ 0x21
 80076ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2207      	movs	r2, #7
 80076c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2207      	movs	r2, #7
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 faf8 	bl	8008cc4 <USBH_CtlReq>
 80076d4:	4603      	mov	r3, r0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af02      	add	r7, sp, #8
 80076e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d002      	beq.n	8007704 <CDC_ProcessTransmission+0x26>
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d023      	beq.n	800774a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007702:	e05e      	b.n	80077c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	8b12      	ldrh	r2, [r2, #24]
 800770c:	4293      	cmp	r3, r2
 800770e:	d90b      	bls.n	8007728 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	69d9      	ldr	r1, [r3, #28]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8b1a      	ldrh	r2, [r3, #24]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	7b5b      	ldrb	r3, [r3, #13]
 800771c:	2001      	movs	r0, #1
 800771e:	9000      	str	r0, [sp, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fce0 	bl	80090e6 <USBH_BulkSendData>
 8007726:	e00b      	b.n	8007740 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	7b5b      	ldrb	r3, [r3, #13]
 8007736:	2001      	movs	r0, #1
 8007738:	9000      	str	r0, [sp, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fcd3 	bl	80090e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007748:	e03b      	b.n	80077c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	7b5b      	ldrb	r3, [r3, #13]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fff7 	bl	8009744 <USBH_LL_GetURBState>
 8007756:	4603      	mov	r3, r0
 8007758:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800775a:	7afb      	ldrb	r3, [r7, #11]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d128      	bne.n	80077b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	8b12      	ldrh	r2, [r2, #24]
 8007768:	4293      	cmp	r3, r2
 800776a:	d90e      	bls.n	800778a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	8b12      	ldrh	r2, [r2, #24]
 8007774:	1a9a      	subs	r2, r3, r2
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	8b12      	ldrh	r2, [r2, #24]
 8007782:	441a      	add	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	61da      	str	r2, [r3, #28]
 8007788:	e002      	b.n	8007790 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80077a0:	e00e      	b.n	80077c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f868 	bl	8007880 <USBH_CDC_TransmitCallback>
      break;
 80077b0:	e006      	b.n	80077c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d103      	bne.n	80077c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80077c0:	bf00      	nop
  }
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077dc:	2300      	movs	r3, #0
 80077de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d002      	beq.n	80077f0 <CDC_ProcessReception+0x26>
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d00e      	beq.n	800780c <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80077ee:	e043      	b.n	8007878 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	6a19      	ldr	r1, [r3, #32]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	8b5a      	ldrh	r2, [r3, #26]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	7b1b      	ldrb	r3, [r3, #12]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fc97 	bl	8009130 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2204      	movs	r2, #4
 8007806:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800780a:	e035      	b.n	8007878 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	7b1b      	ldrb	r3, [r3, #12]
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 ff96 	bl	8009744 <USBH_LL_GetURBState>
 8007818:	4603      	mov	r3, r0
 800781a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800781c:	7cfb      	ldrb	r3, [r7, #19]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d129      	bne.n	8007876 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	7b1b      	ldrb	r3, [r3, #12]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fef9 	bl	8009620 <USBH_LL_GetLastXferSize>
 800782e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	429a      	cmp	r2, r3
 8007838:	d016      	beq.n	8007868 <CDC_ProcessReception+0x9e>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	8b5b      	ldrh	r3, [r3, #26]
 800783e:	461a      	mov	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4293      	cmp	r3, r2
 8007844:	d110      	bne.n	8007868 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	1ad2      	subs	r2, r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	6a1a      	ldr	r2, [r3, #32]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	441a      	add	r2, r3
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2203      	movs	r2, #3
 8007862:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007866:	e006      	b.n	8007876 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f80f 	bl	8007894 <USBH_CDC_ReceiveCallback>
      break;
 8007876:	bf00      	nop
  }
}
 8007878:	bf00      	nop
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80078d0:	2302      	movs	r3, #2
 80078d2:	e029      	b.n	8007928 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	79fa      	ldrb	r2, [r7, #7]
 80078d8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f81f 	bl	8007930 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f001 fdc9 	bl	80094b8 <USBH_LL_Init>

  return USBH_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e009      	b.n	8007952 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	33e0      	adds	r3, #224	@ 0xe0
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	2200      	movs	r2, #0
 800794a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3301      	adds	r3, #1
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b0f      	cmp	r3, #15
 8007956:	d9f2      	bls.n	800793e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	e009      	b.n	8007972 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007978:	d3f1      	bcc.n	800795e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2240      	movs	r2, #64	@ 0x40
 800799e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	331c      	adds	r3, #28
 80079ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f002 f825 	bl	8009a20 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80079dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 f81c 	bl	8009a20 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80079ee:	2212      	movs	r2, #18
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f002 f814 	bl	8009a20 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80079fe:	223e      	movs	r2, #62	@ 0x3e
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f002 f80c 	bl	8009a20 <memset>

  return USBH_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d016      	beq.n	8007a54 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10e      	bne.n	8007a4e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a36:	1c59      	adds	r1, r3, #1
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	33de      	adds	r3, #222	@ 0xde
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
 8007a4c:	e004      	b.n	8007a58 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	73fb      	strb	r3, [r7, #15]
 8007a52:	e001      	b.n	8007a58 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a54:	2302      	movs	r3, #2
 8007a56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007a7c:	78fa      	ldrb	r2, [r7, #3]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d204      	bcs.n	8007a8c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007a8a:	e001      	b.n	8007a90 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4603      	mov	r3, r0
 8007aae:	70fb      	strb	r3, [r7, #3]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70bb      	strb	r3, [r7, #2]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ac6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ac8:	e025      	b.n	8007b16 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	221a      	movs	r2, #26
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3302      	adds	r3, #2
 8007ada:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	795b      	ldrb	r3, [r3, #5]
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d002      	beq.n	8007aec <USBH_FindInterface+0x4e>
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	2bff      	cmp	r3, #255	@ 0xff
 8007aea:	d111      	bne.n	8007b10 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007af0:	78ba      	ldrb	r2, [r7, #2]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d002      	beq.n	8007afc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007af6:	78bb      	ldrb	r3, [r7, #2]
 8007af8:	2bff      	cmp	r3, #255	@ 0xff
 8007afa:	d109      	bne.n	8007b10 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b00:	787a      	ldrb	r2, [r7, #1]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d002      	beq.n	8007b0c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b06:	787b      	ldrb	r3, [r7, #1]
 8007b08:	2bff      	cmp	r3, #255	@ 0xff
 8007b0a:	d101      	bne.n	8007b10 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	e006      	b.n	8007b1e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	3301      	adds	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d9d6      	bls.n	8007aca <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b1c:	23ff      	movs	r3, #255	@ 0xff
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 fcfc 	bl	8009530 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b38:	2101      	movs	r1, #1
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 fe15 	bl	800976a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af04      	add	r7, sp, #16
 8007b52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b54:	2302      	movs	r3, #2
 8007b56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d102      	bne.n	8007b6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b0b      	cmp	r3, #11
 8007b76:	f200 81bc 	bhi.w	8007ef2 <USBH_Process+0x3a6>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <USBH_Process+0x34>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007be3 	.word	0x08007be3
 8007b88:	08007c4d 	.word	0x08007c4d
 8007b8c:	08007e8d 	.word	0x08007e8d
 8007b90:	08007ef3 	.word	0x08007ef3
 8007b94:	08007ced 	.word	0x08007ced
 8007b98:	08007e33 	.word	0x08007e33
 8007b9c:	08007d23 	.word	0x08007d23
 8007ba0:	08007d43 	.word	0x08007d43
 8007ba4:	08007d61 	.word	0x08007d61
 8007ba8:	08007da5 	.word	0x08007da5
 8007bac:	08007e75 	.word	0x08007e75
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 819c 	beq.w	8007ef6 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007bc4:	20c8      	movs	r0, #200	@ 0xc8
 8007bc6:	f001 fe1a 	bl	80097fe <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 fd0d 	bl	80095ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007be0:	e189      	b.n	8007ef6 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d107      	bne.n	8007bfe <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007bfc:	e18a      	b.n	8007f14 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007c04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c08:	d914      	bls.n	8007c34 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007c10:	3301      	adds	r3, #1
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d903      	bls.n	8007c2c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	220d      	movs	r2, #13
 8007c28:	701a      	strb	r2, [r3, #0]
      break;
 8007c2a:	e173      	b.n	8007f14 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e16f      	b.n	8007f14 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007c3a:	f103 020a 	add.w	r2, r3, #10
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007c44:	200a      	movs	r0, #10
 8007c46:	f001 fdda 	bl	80097fe <USBH_Delay>
      break;
 8007c4a:	e163      	b.n	8007f14 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c5c:	2104      	movs	r1, #4
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c62:	2064      	movs	r0, #100	@ 0x64
 8007c64:	f001 fdcb 	bl	80097fe <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fc97 	bl	800959c <USBH_LL_GetSpeed>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	461a      	mov	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 faa2 	bl	80091ca <USBH_AllocPipe>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c8e:	2180      	movs	r1, #128	@ 0x80
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fa9a 	bl	80091ca <USBH_AllocPipe>
 8007c96:	4603      	mov	r3, r0
 8007c98:	461a      	mov	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7919      	ldrb	r1, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cb2:	9202      	str	r2, [sp, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	9201      	str	r2, [sp, #4]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2280      	movs	r2, #128	@ 0x80
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fa54 	bl	800916c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	7959      	ldrb	r1, [r3, #5]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cd8:	9202      	str	r2, [sp, #8]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	9201      	str	r2, [sp, #4]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fa41 	bl	800916c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007cea:	e113      	b.n	8007f14 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f917 	bl	8007f20 <USBH_HandleEnum>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 80fd 	bne.w	8007efa <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d103      	bne.n	8007d1a <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2208      	movs	r2, #8
 8007d16:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007d18:	e0ef      	b.n	8007efa <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2207      	movs	r2, #7
 8007d1e:	701a      	strb	r2, [r3, #0]
      break;
 8007d20:	e0eb      	b.n	8007efa <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80e8 	beq.w	8007efe <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d34:	2101      	movs	r1, #1
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007d40:	e0dd      	b.n	8007efe <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fc3f 	bl	80085ce <USBH_SetCfg>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f040 80d5 	bne.w	8007f02 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2209      	movs	r2, #9
 8007d5c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007d5e:	e0d0      	b.n	8007f02 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d016      	beq.n	8007d9c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d6e:	2101      	movs	r1, #1
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fc4f 	bl	8008614 <USBH_SetFeature>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	220a      	movs	r2, #10
 8007d86:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007d88:	e0bd      	b.n	8007f06 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	f040 80b9 	bne.w	8007f06 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	220a      	movs	r2, #10
 8007d98:	701a      	strb	r2, [r3, #0]
      break;
 8007d9a:	e0b4      	b.n	8007f06 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	220a      	movs	r2, #10
 8007da0:	701a      	strb	r2, [r3, #0]
      break;
 8007da2:	e0b0      	b.n	8007f06 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80ad 	beq.w	8007f0a <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]
 8007dbc:	e016      	b.n	8007dec <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007dbe:	7bfa      	ldrb	r2, [r7, #15]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	32de      	adds	r2, #222	@ 0xde
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	791a      	ldrb	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d108      	bne.n	8007de6 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007dd4:	7bfa      	ldrb	r2, [r7, #15]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32de      	adds	r2, #222	@ 0xde
 8007dda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007de4:	e005      	b.n	8007df2 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	3301      	adds	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0e5      	beq.n	8007dbe <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d016      	beq.n	8007e2a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2206      	movs	r2, #6
 8007e12:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e1a:	2103      	movs	r1, #3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007e20:	e073      	b.n	8007f0a <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	220d      	movs	r2, #13
 8007e26:	701a      	strb	r2, [r3, #0]
      break;
 8007e28:	e06f      	b.n	8007f0a <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	220d      	movs	r2, #13
 8007e2e:	701a      	strb	r2, [r3, #0]
      break;
 8007e30:	e06b      	b.n	8007f0a <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d017      	beq.n	8007e6c <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	4798      	blx	r3
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d103      	bne.n	8007e5c <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	220b      	movs	r2, #11
 8007e58:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007e5a:	e058      	b.n	8007f0e <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d154      	bne.n	8007f0e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	220d      	movs	r2, #13
 8007e68:	701a      	strb	r2, [r3, #0]
      break;
 8007e6a:	e050      	b.n	8007f0e <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	220d      	movs	r2, #13
 8007e70:	701a      	strb	r2, [r3, #0]
      break;
 8007e72:	e04c      	b.n	8007f0e <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d049      	beq.n	8007f12 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
      }
      break;
 8007e8a:	e042      	b.n	8007f12 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff fd4b 	bl	8007930 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ec8:	2105      	movs	r1, #5
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d107      	bne.n	8007eea <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff fe21 	bl	8007b2a <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007ee8:	e014      	b.n	8007f14 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f001 fb20 	bl	8009530 <USBH_LL_Start>
      break;
 8007ef0:	e010      	b.n	8007f14 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ef2:	bf00      	nop
 8007ef4:	e00e      	b.n	8007f14 <USBH_Process+0x3c8>
      break;
 8007ef6:	bf00      	nop
 8007ef8:	e00c      	b.n	8007f14 <USBH_Process+0x3c8>
      break;
 8007efa:	bf00      	nop
 8007efc:	e00a      	b.n	8007f14 <USBH_Process+0x3c8>
    break;
 8007efe:	bf00      	nop
 8007f00:	e008      	b.n	8007f14 <USBH_Process+0x3c8>
      break;
 8007f02:	bf00      	nop
 8007f04:	e006      	b.n	8007f14 <USBH_Process+0x3c8>
      break;
 8007f06:	bf00      	nop
 8007f08:	e004      	b.n	8007f14 <USBH_Process+0x3c8>
      break;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <USBH_Process+0x3c8>
      break;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <USBH_Process+0x3c8>
      break;
 8007f12:	bf00      	nop
  }
  return USBH_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af04      	add	r7, sp, #16
 8007f26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b07      	cmp	r3, #7
 8007f36:	f200 81bd 	bhi.w	80082b4 <USBH_HandleEnum+0x394>
 8007f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f40 <USBH_HandleEnum+0x20>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f61 	.word	0x08007f61
 8007f44:	0800801b 	.word	0x0800801b
 8007f48:	08008085 	.word	0x08008085
 8007f4c:	0800810f 	.word	0x0800810f
 8007f50:	08008179 	.word	0x08008179
 8007f54:	080081e9 	.word	0x080081e9
 8007f58:	0800822f 	.word	0x0800822f
 8007f5c:	08008275 	.word	0x08008275
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f60:	2108      	movs	r1, #8
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa50 	bl	8008408 <USBH_Get_DevDesc>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d12e      	bne.n	8007fd0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7919      	ldrb	r1, [r3, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f96:	9202      	str	r2, [sp, #8]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	9201      	str	r2, [sp, #4]
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2280      	movs	r2, #128	@ 0x80
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 f8e2 	bl	800916c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	7959      	ldrb	r1, [r3, #5]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fbc:	9202      	str	r2, [sp, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	9201      	str	r2, [sp, #4]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f8cf 	bl	800916c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fce:	e173      	b.n	80082b8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	f040 8170 	bne.w	80082b8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d903      	bls.n	8007ffa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	220d      	movs	r2, #13
 8007ff6:	701a      	strb	r2, [r3, #0]
      break;
 8007ff8:	e15e      	b.n	80082b8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	795b      	ldrb	r3, [r3, #5]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f903 	bl	800920c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	791b      	ldrb	r3, [r3, #4]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f8fd 	bl	800920c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
      break;
 8008018:	e14e      	b.n	80082b8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800801a:	2112      	movs	r1, #18
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f9f3 	bl	8008408 <USBH_Get_DevDesc>
 8008022:	4603      	mov	r3, r0
 8008024:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d103      	bne.n	8008034 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008032:	e143      	b.n	80082bc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	2b03      	cmp	r3, #3
 8008038:	f040 8140 	bne.w	80082bc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008042:	3301      	adds	r3, #1
 8008044:	b2da      	uxtb	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008052:	2b03      	cmp	r3, #3
 8008054:	d903      	bls.n	800805e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	220d      	movs	r2, #13
 800805a:	701a      	strb	r2, [r3, #0]
      break;
 800805c:	e12e      	b.n	80082bc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	795b      	ldrb	r3, [r3, #5]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f8d1 	bl	800920c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	791b      	ldrb	r3, [r3, #4]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f8cb 	bl	800920c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	701a      	strb	r2, [r3, #0]
      break;
 8008082:	e11b      	b.n	80082bc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008084:	2101      	movs	r1, #1
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa7d 	bl	8008586 <USBH_SetAddress>
 800808c:	4603      	mov	r3, r0
 800808e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d130      	bne.n	80080f8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008096:	2002      	movs	r0, #2
 8008098:	f001 fbb1 	bl	80097fe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2203      	movs	r2, #3
 80080a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	7919      	ldrb	r1, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	9201      	str	r2, [sp, #4]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4603      	mov	r3, r0
 80080c8:	2280      	movs	r2, #128	@ 0x80
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f84e 	bl	800916c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7959      	ldrb	r1, [r3, #5]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080e4:	9202      	str	r2, [sp, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	9201      	str	r2, [sp, #4]
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	4603      	mov	r3, r0
 80080ee:	2200      	movs	r2, #0
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 f83b 	bl	800916c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080f6:	e0e3      	b.n	80082c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	f040 80e0 	bne.w	80082c0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220d      	movs	r2, #13
 8008104:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	705a      	strb	r2, [r3, #1]
      break;
 800810c:	e0d8      	b.n	80082c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800810e:	2109      	movs	r1, #9
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f9a5 	bl	8008460 <USBH_Get_CfgDesc>
 8008116:	4603      	mov	r3, r0
 8008118:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d103      	bne.n	8008128 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2204      	movs	r2, #4
 8008124:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008126:	e0cd      	b.n	80082c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b03      	cmp	r3, #3
 800812c:	f040 80ca 	bne.w	80082c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008136:	3301      	adds	r3, #1
 8008138:	b2da      	uxtb	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008146:	2b03      	cmp	r3, #3
 8008148:	d903      	bls.n	8008152 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	220d      	movs	r2, #13
 800814e:	701a      	strb	r2, [r3, #0]
      break;
 8008150:	e0b8      	b.n	80082c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	795b      	ldrb	r3, [r3, #5]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f857 	bl	800920c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	791b      	ldrb	r3, [r3, #4]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 f851 	bl	800920c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
      break;
 8008176:	e0a5      	b.n	80082c4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f96d 	bl	8008460 <USBH_Get_CfgDesc>
 8008186:	4603      	mov	r3, r0
 8008188:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2205      	movs	r2, #5
 8008194:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008196:	e097      	b.n	80082c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b03      	cmp	r3, #3
 800819c:	f040 8094 	bne.w	80082c8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081a6:	3301      	adds	r3, #1
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d903      	bls.n	80081c2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	220d      	movs	r2, #13
 80081be:	701a      	strb	r2, [r3, #0]
      break;
 80081c0:	e082      	b.n	80082c8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	795b      	ldrb	r3, [r3, #5]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f81f 	bl	800920c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	791b      	ldrb	r3, [r3, #4]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f819 	bl	800920c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
      break;
 80081e6:	e06f      	b.n	80082c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d019      	beq.n	8008226 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081fe:	23ff      	movs	r3, #255	@ 0xff
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f957 	bl	80084b4 <USBH_Get_StringDesc>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2206      	movs	r2, #6
 8008214:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008216:	e059      	b.n	80082cc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b03      	cmp	r3, #3
 800821c:	d156      	bne.n	80082cc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2206      	movs	r2, #6
 8008222:	705a      	strb	r2, [r3, #1]
      break;
 8008224:	e052      	b.n	80082cc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2206      	movs	r2, #6
 800822a:	705a      	strb	r2, [r3, #1]
      break;
 800822c:	e04e      	b.n	80082cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008234:	2b00      	cmp	r3, #0
 8008236:	d019      	beq.n	800826c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008244:	23ff      	movs	r3, #255	@ 0xff
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f934 	bl	80084b4 <USBH_Get_StringDesc>
 800824c:	4603      	mov	r3, r0
 800824e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2207      	movs	r2, #7
 800825a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800825c:	e038      	b.n	80082d0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d135      	bne.n	80082d0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2207      	movs	r2, #7
 8008268:	705a      	strb	r2, [r3, #1]
      break;
 800826a:	e031      	b.n	80082d0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2207      	movs	r2, #7
 8008270:	705a      	strb	r2, [r3, #1]
      break;
 8008272:	e02d      	b.n	80082d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800827a:	2b00      	cmp	r3, #0
 800827c:	d017      	beq.n	80082ae <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800828a:	23ff      	movs	r3, #255	@ 0xff
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f911 	bl	80084b4 <USBH_Get_StringDesc>
 8008292:	4603      	mov	r3, r0
 8008294:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082a0:	e018      	b.n	80082d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d115      	bne.n	80082d4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
      break;
 80082ac:	e012      	b.n	80082d4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
      break;
 80082b2:	e00f      	b.n	80082d4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80082b4:	bf00      	nop
 80082b6:	e00e      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082b8:	bf00      	nop
 80082ba:	e00c      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082bc:	bf00      	nop
 80082be:	e00a      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082c0:	bf00      	nop
 80082c2:	e008      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082c4:	bf00      	nop
 80082c6:	e006      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082c8:	bf00      	nop
 80082ca:	e004      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082cc:	bf00      	nop
 80082ce:	e002      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082d0:	bf00      	nop
 80082d2:	e000      	b.n	80082d6 <USBH_HandleEnum+0x3b6>
      break;
 80082d4:	bf00      	nop
  }
  return Status;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f804 	bl	8008322 <USBH_HandleSof>
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b0b      	cmp	r3, #11
 8008332:	d10a      	bne.n	800834a <USBH_HandleSof+0x28>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
  }
}
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008362:	bf00      	nop
}
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8008386:	bf00      	nop
}
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 f8c0 	bl	8009566 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	791b      	ldrb	r3, [r3, #4]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 ff0d 	bl	800920c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	795b      	ldrb	r3, [r3, #5]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 ff07 	bl	800920c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af02      	add	r7, sp, #8
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008414:	887b      	ldrh	r3, [r7, #2]
 8008416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841a:	d901      	bls.n	8008420 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800841c:	2303      	movs	r3, #3
 800841e:	e01b      	b.n	8008458 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008426:	887b      	ldrh	r3, [r7, #2]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	4613      	mov	r3, r2
 800842c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008430:	2100      	movs	r1, #0
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f872 	bl	800851c <USBH_GetDescriptor>
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008448:	887a      	ldrh	r2, [r7, #2]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f929 	bl	80086a4 <USBH_ParseDevDesc>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af02      	add	r7, sp, #8
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	331c      	adds	r3, #28
 8008470:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008472:	887b      	ldrh	r3, [r7, #2]
 8008474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008478:	d901      	bls.n	800847e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800847a:	2303      	movs	r3, #3
 800847c:	e016      	b.n	80084ac <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800847e:	887b      	ldrh	r3, [r7, #2]
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f846 	bl	800851c <USBH_GetDescriptor>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800849a:	887b      	ldrh	r3, [r7, #2]
 800849c:	461a      	mov	r2, r3
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f9af 	bl	8008804 <USBH_ParseCfgDesc>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	461a      	mov	r2, r3
 80084c0:	460b      	mov	r3, r1
 80084c2:	72fb      	strb	r3, [r7, #11]
 80084c4:	4613      	mov	r3, r2
 80084c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80084c8:	893b      	ldrh	r3, [r7, #8]
 80084ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ce:	d802      	bhi.n	80084d6 <USBH_Get_StringDesc+0x22>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e01c      	b.n	8008514 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80084da:	7afb      	ldrb	r3, [r7, #11]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80084e2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80084ea:	893b      	ldrh	r3, [r7, #8]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	460b      	mov	r3, r1
 80084f0:	2100      	movs	r1, #0
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 f812 	bl	800851c <USBH_GetDescriptor>
 80084f8:	4603      	mov	r3, r0
 80084fa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d107      	bne.n	8008512 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008508:	893a      	ldrh	r2, [r7, #8]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fb8c 	bl	8008c2a <USBH_ParseStringDesc>
  }

  return status;
 8008512:	7dfb      	ldrb	r3, [r7, #23]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	607b      	str	r3, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	72fb      	strb	r3, [r7, #11]
 800852a:	4613      	mov	r3, r2
 800852c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	789b      	ldrb	r3, [r3, #2]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d11c      	bne.n	8008570 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800853c:	b2da      	uxtb	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2206      	movs	r2, #6
 8008546:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	893a      	ldrh	r2, [r7, #8]
 800854c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800854e:	893b      	ldrh	r3, [r7, #8]
 8008550:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008558:	d104      	bne.n	8008564 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f240 4209 	movw	r2, #1033	@ 0x409
 8008560:	829a      	strh	r2, [r3, #20]
 8008562:	e002      	b.n	800856a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8b3a      	ldrh	r2, [r7, #24]
 800856e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008570:	8b3b      	ldrh	r3, [r7, #24]
 8008572:	461a      	mov	r2, r3
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fba4 	bl	8008cc4 <USBH_CtlReq>
 800857c:	4603      	mov	r3, r0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	789b      	ldrb	r3, [r3, #2]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d10f      	bne.n	80085ba <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2205      	movs	r2, #5
 80085a4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085ba:	2200      	movs	r2, #0
 80085bc:	2100      	movs	r1, #0
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fb80 	bl	8008cc4 <USBH_CtlReq>
 80085c4:	4603      	mov	r3, r0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	789b      	ldrb	r3, [r3, #2]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d10e      	bne.n	8008600 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2209      	movs	r2, #9
 80085ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	887a      	ldrh	r2, [r7, #2]
 80085f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008600:	2200      	movs	r2, #0
 8008602:	2100      	movs	r1, #0
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb5d 	bl	8008cc4 <USBH_CtlReq>
 800860a:	4603      	mov	r3, r0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	789b      	ldrb	r3, [r3, #2]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d10f      	bne.n	8008648 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2203      	movs	r2, #3
 8008632:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008648:	2200      	movs	r2, #0
 800864a:	2100      	movs	r1, #0
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fb39 	bl	8008cc4 <USBH_CtlReq>
 8008652:	4603      	mov	r3, r0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	789b      	ldrb	r3, [r3, #2]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d10f      	bne.n	8008690 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008690:	2200      	movs	r2, #0
 8008692:	2100      	movs	r1, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fb15 	bl	8008cc4 <USBH_CtlReq>
 800869a:	4603      	mov	r3, r0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80086b8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80086c4:	2302      	movs	r3, #2
 80086c6:	e094      	b.n	80087f2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	785a      	ldrb	r2, [r3, #1]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	3302      	adds	r3, #2
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3303      	adds	r3, #3
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	021b      	lsls	r3, r3, #8
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4313      	orrs	r3, r2
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	791a      	ldrb	r2, [r3, #4]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	795a      	ldrb	r2, [r3, #5]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	799a      	ldrb	r2, [r3, #6]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	79da      	ldrb	r2, [r3, #7]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008722:	2b01      	cmp	r3, #1
 8008724:	d11b      	bne.n	800875e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	79db      	ldrb	r3, [r3, #7]
 800872a:	2b20      	cmp	r3, #32
 800872c:	dc0f      	bgt.n	800874e <USBH_ParseDevDesc+0xaa>
 800872e:	2b08      	cmp	r3, #8
 8008730:	db0f      	blt.n	8008752 <USBH_ParseDevDesc+0xae>
 8008732:	3b08      	subs	r3, #8
 8008734:	4a32      	ldr	r2, [pc, #200]	@ (8008800 <USBH_ParseDevDesc+0x15c>)
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	bf14      	ite	ne
 8008742:	2301      	movne	r3, #1
 8008744:	2300      	moveq	r3, #0
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d106      	bne.n	800875a <USBH_ParseDevDesc+0xb6>
 800874c:	e001      	b.n	8008752 <USBH_ParseDevDesc+0xae>
 800874e:	2b40      	cmp	r3, #64	@ 0x40
 8008750:	d003      	beq.n	800875a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2208      	movs	r2, #8
 8008756:	71da      	strb	r2, [r3, #7]
        break;
 8008758:	e000      	b.n	800875c <USBH_ParseDevDesc+0xb8>
        break;
 800875a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800875c:	e00e      	b.n	800877c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008764:	2b02      	cmp	r3, #2
 8008766:	d107      	bne.n	8008778 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	79db      	ldrb	r3, [r3, #7]
 800876c:	2b08      	cmp	r3, #8
 800876e:	d005      	beq.n	800877c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2208      	movs	r2, #8
 8008774:	71da      	strb	r2, [r3, #7]
 8008776:	e001      	b.n	800877c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008778:	2303      	movs	r3, #3
 800877a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	2b08      	cmp	r3, #8
 8008780:	d936      	bls.n	80087f0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	3308      	adds	r3, #8
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3309      	adds	r3, #9
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	b29b      	uxth	r3, r3
 8008794:	4313      	orrs	r3, r2
 8008796:	b29a      	uxth	r2, r3
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	330a      	adds	r3, #10
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	330b      	adds	r3, #11
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	4313      	orrs	r3, r2
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	330c      	adds	r3, #12
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	330d      	adds	r3, #13
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	7b9a      	ldrb	r2, [r3, #14]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	7bda      	ldrb	r2, [r3, #15]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	7c1a      	ldrb	r2, [r3, #16]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	7c5a      	ldrb	r2, [r3, #17]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	01000101 	.word	0x01000101

08008804 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08c      	sub	sp, #48	@ 0x30
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008818:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008832:	2302      	movs	r3, #2
 8008834:	e0de      	b.n	80089f4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b09      	cmp	r3, #9
 8008840:	d002      	beq.n	8008848 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008844:	2209      	movs	r2, #9
 8008846:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	781a      	ldrb	r2, [r3, #0]
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	785a      	ldrb	r2, [r3, #1]
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3302      	adds	r3, #2
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3303      	adds	r3, #3
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	b29b      	uxth	r3, r3
 800886a:	4313      	orrs	r3, r2
 800886c:	b29b      	uxth	r3, r3
 800886e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008872:	bf28      	it	cs
 8008874:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008878:	b29a      	uxth	r2, r3
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	791a      	ldrb	r2, [r3, #4]
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	795a      	ldrb	r2, [r3, #5]
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	799a      	ldrb	r2, [r3, #6]
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	79da      	ldrb	r2, [r3, #7]
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	7a1a      	ldrb	r2, [r3, #8]
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	f240 80a1 	bls.w	80089f0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80088ae:	2309      	movs	r3, #9
 80088b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088b6:	e085      	b.n	80089c4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088b8:	f107 0316 	add.w	r3, r7, #22
 80088bc:	4619      	mov	r1, r3
 80088be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c0:	f000 f9e6 	bl	8008c90 <USBH_GetNextDesc>
 80088c4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d17a      	bne.n	80089c4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80088ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	2b09      	cmp	r3, #9
 80088d4:	d002      	beq.n	80088dc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	2209      	movs	r2, #9
 80088da:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80088dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088e0:	221a      	movs	r2, #26
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	3308      	adds	r3, #8
 80088e8:	6a3a      	ldr	r2, [r7, #32]
 80088ea:	4413      	add	r3, r2
 80088ec:	3302      	adds	r3, #2
 80088ee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80088f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088f2:	69f8      	ldr	r0, [r7, #28]
 80088f4:	f000 f882 	bl	80089fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008902:	e043      	b.n	800898c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008904:	f107 0316 	add.w	r3, r7, #22
 8008908:	4619      	mov	r1, r3
 800890a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800890c:	f000 f9c0 	bl	8008c90 <USBH_GetNextDesc>
 8008910:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b05      	cmp	r3, #5
 8008918:	d138      	bne.n	800898c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	795b      	ldrb	r3, [r3, #5]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d113      	bne.n	800894a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008926:	2b02      	cmp	r3, #2
 8008928:	d003      	beq.n	8008932 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	799b      	ldrb	r3, [r3, #6]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d10b      	bne.n	800894a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	79db      	ldrb	r3, [r3, #7]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <USBH_ParseCfgDesc+0x14e>
 800893a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b09      	cmp	r3, #9
 8008940:	d007      	beq.n	8008952 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	2209      	movs	r2, #9
 8008946:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008948:	e003      	b.n	8008952 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	2207      	movs	r2, #7
 800894e:	701a      	strb	r2, [r3, #0]
 8008950:	e000      	b.n	8008954 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008952:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008958:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800895c:	3201      	adds	r2, #1
 800895e:	00d2      	lsls	r2, r2, #3
 8008960:	211a      	movs	r1, #26
 8008962:	fb01 f303 	mul.w	r3, r1, r3
 8008966:	4413      	add	r3, r2
 8008968:	3308      	adds	r3, #8
 800896a:	6a3a      	ldr	r2, [r7, #32]
 800896c:	4413      	add	r3, r2
 800896e:	3304      	adds	r3, #4
 8008970:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008974:	69b9      	ldr	r1, [r7, #24]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f86f 	bl	8008a5a <USBH_ParseEPDesc>
 800897c:	4603      	mov	r3, r0
 800897e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008982:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008986:	3301      	adds	r3, #1
 8008988:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800898c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008990:	2b01      	cmp	r3, #1
 8008992:	d80a      	bhi.n	80089aa <USBH_ParseCfgDesc+0x1a6>
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	791b      	ldrb	r3, [r3, #4]
 8008998:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800899c:	429a      	cmp	r2, r3
 800899e:	d204      	bcs.n	80089aa <USBH_ParseCfgDesc+0x1a6>
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	885a      	ldrh	r2, [r3, #2]
 80089a4:	8afb      	ldrh	r3, [r7, #22]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d8ac      	bhi.n	8008904 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	791b      	ldrb	r3, [r3, #4]
 80089ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d201      	bcs.n	80089ba <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e01c      	b.n	80089f4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80089ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089be:	3301      	adds	r3, #1
 80089c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d805      	bhi.n	80089d8 <USBH_ParseCfgDesc+0x1d4>
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	885a      	ldrh	r2, [r3, #2]
 80089d0:	8afb      	ldrh	r3, [r7, #22]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	f63f af70 	bhi.w	80088b8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	791b      	ldrb	r3, [r3, #4]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	bf28      	it	cs
 80089e0:	2302      	movcs	r3, #2
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d201      	bcs.n	80089f0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e001      	b.n	80089f4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80089f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3730      	adds	r7, #48	@ 0x30
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	785a      	ldrb	r2, [r3, #1]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	789a      	ldrb	r2, [r3, #2]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	78da      	ldrb	r2, [r3, #3]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	791a      	ldrb	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	795a      	ldrb	r2, [r3, #5]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	799a      	ldrb	r2, [r3, #6]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	79da      	ldrb	r2, [r3, #7]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	7a1a      	ldrb	r2, [r3, #8]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	721a      	strb	r2, [r3, #8]
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b087      	sub	sp, #28
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	785a      	ldrb	r2, [r3, #1]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	789a      	ldrb	r2, [r3, #2]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	78da      	ldrb	r2, [r3, #3]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3305      	adds	r3, #5
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	799a      	ldrb	r2, [r3, #6]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	889b      	ldrh	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d009      	beq.n	8008ac8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008abc:	d804      	bhi.n	8008ac8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac6:	d901      	bls.n	8008acc <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d136      	bne.n	8008b44 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	78db      	ldrb	r3, [r3, #3]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d108      	bne.n	8008af4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	889b      	ldrh	r3, [r3, #4]
 8008ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aea:	f240 8097 	bls.w	8008c1c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008aee:	2303      	movs	r3, #3
 8008af0:	75fb      	strb	r3, [r7, #23]
 8008af2:	e093      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	78db      	ldrb	r3, [r3, #3]
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d107      	bne.n	8008b10 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	889b      	ldrh	r3, [r3, #4]
 8008b04:	2b40      	cmp	r3, #64	@ 0x40
 8008b06:	f240 8089 	bls.w	8008c1c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e085      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	78db      	ldrb	r3, [r3, #3]
 8008b14:	f003 0303 	and.w	r3, r3, #3
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d005      	beq.n	8008b28 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	78db      	ldrb	r3, [r3, #3]
 8008b20:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d10a      	bne.n	8008b3e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	799b      	ldrb	r3, [r3, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <USBH_ParseEPDesc+0xde>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	799b      	ldrb	r3, [r3, #6]
 8008b34:	2b10      	cmp	r3, #16
 8008b36:	d970      	bls.n	8008c1a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b3c:	e06d      	b.n	8008c1a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	e06b      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d13c      	bne.n	8008bc8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	78db      	ldrb	r3, [r3, #3]
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d005      	beq.n	8008b66 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	78db      	ldrb	r3, [r3, #3]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	889b      	ldrh	r3, [r3, #4]
 8008b6a:	2b40      	cmp	r3, #64	@ 0x40
 8008b6c:	d956      	bls.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b72:	e053      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	78db      	ldrb	r3, [r3, #3]
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d10e      	bne.n	8008b9e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	799b      	ldrb	r3, [r3, #6]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d007      	beq.n	8008b98 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008b8c:	2b10      	cmp	r3, #16
 8008b8e:	d803      	bhi.n	8008b98 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008b94:	2b40      	cmp	r3, #64	@ 0x40
 8008b96:	d941      	bls.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	75fb      	strb	r3, [r7, #23]
 8008b9c:	e03e      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	78db      	ldrb	r3, [r3, #3]
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d10b      	bne.n	8008bc2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	799b      	ldrb	r3, [r3, #6]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <USBH_ParseEPDesc+0x162>
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	889b      	ldrh	r3, [r3, #4]
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bba:	d32f      	bcc.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	75fb      	strb	r3, [r7, #23]
 8008bc0:	e02c      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	75fb      	strb	r3, [r7, #23]
 8008bc6:	e029      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d120      	bne.n	8008c14 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	78db      	ldrb	r3, [r3, #3]
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	889b      	ldrh	r3, [r3, #4]
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	d01a      	beq.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008be6:	2303      	movs	r3, #3
 8008be8:	75fb      	strb	r3, [r7, #23]
 8008bea:	e017      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	78db      	ldrb	r3, [r3, #3]
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d10a      	bne.n	8008c0e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	799b      	ldrb	r3, [r3, #6]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <USBH_ParseEPDesc+0x1ae>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	889b      	ldrh	r3, [r3, #4]
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d909      	bls.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	75fb      	strb	r3, [r7, #23]
 8008c0c:	e006      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	75fb      	strb	r3, [r7, #23]
 8008c12:	e003      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008c14:	2303      	movs	r3, #3
 8008c16:	75fb      	strb	r3, [r7, #23]
 8008c18:	e000      	b.n	8008c1c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c1a:	bf00      	nop
  }

  return status;
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b087      	sub	sp, #28
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	4613      	mov	r3, r2
 8008c36:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d120      	bne.n	8008c84 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	1e9a      	subs	r2, r3, #2
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	bf28      	it	cs
 8008c4e:	4613      	movcs	r3, r2
 8008c50:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3302      	adds	r3, #2
 8008c56:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	82fb      	strh	r3, [r7, #22]
 8008c5c:	e00b      	b.n	8008c76 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c5e:	8afb      	ldrh	r3, [r7, #22]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c70:	8afb      	ldrh	r3, [r7, #22]
 8008c72:	3302      	adds	r3, #2
 8008c74:	82fb      	strh	r3, [r7, #22]
 8008c76:	8afa      	ldrh	r2, [r7, #22]
 8008c78:	8abb      	ldrh	r3, [r7, #20]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d3ef      	bcc.n	8008c5e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]
  }
}
 8008c84:	bf00      	nop
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	789b      	ldrb	r3, [r3, #2]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d002      	beq.n	8008ce4 <USBH_CtlReq+0x20>
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d00f      	beq.n	8008d02 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008ce2:	e027      	b.n	8008d34 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	88fa      	ldrh	r2, [r7, #6]
 8008cee:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008d00:	e018      	b.n	8008d34 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 f81c 	bl	8008d40 <USBH_HandleControl>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <USBH_CtlReq+0x54>
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d106      	bne.n	8008d26 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	761a      	strb	r2, [r3, #24]
      break;
 8008d24:	e005      	b.n	8008d32 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d102      	bne.n	8008d32 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	709a      	strb	r2, [r3, #2]
      break;
 8008d32:	bf00      	nop
  }
  return status;
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7e1b      	ldrb	r3, [r3, #24]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	2b0a      	cmp	r3, #10
 8008d58:	f200 8157 	bhi.w	800900a <USBH_HandleControl+0x2ca>
 8008d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <USBH_HandleControl+0x24>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d91 	.word	0x08008d91
 8008d68:	08008dab 	.word	0x08008dab
 8008d6c:	08008e15 	.word	0x08008e15
 8008d70:	08008e3b 	.word	0x08008e3b
 8008d74:	08008e75 	.word	0x08008e75
 8008d78:	08008e9f 	.word	0x08008e9f
 8008d7c:	08008ef1 	.word	0x08008ef1
 8008d80:	08008f13 	.word	0x08008f13
 8008d84:	08008f4f 	.word	0x08008f4f
 8008d88:	08008f75 	.word	0x08008f75
 8008d8c:	08008fb3 	.word	0x08008fb3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f103 0110 	add.w	r1, r3, #16
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	795b      	ldrb	r3, [r3, #5]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f945 	bl	800902c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2202      	movs	r2, #2
 8008da6:	761a      	strb	r2, [r3, #24]
      break;
 8008da8:	e13a      	b.n	8009020 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	795b      	ldrb	r3, [r3, #5]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fcc7 	bl	8009744 <USBH_LL_GetURBState>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d11e      	bne.n	8008dfe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7c1b      	ldrb	r3, [r3, #16]
 8008dc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dc8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8adb      	ldrh	r3, [r3, #22]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008dd2:	7b7b      	ldrb	r3, [r7, #13]
 8008dd4:	2b80      	cmp	r3, #128	@ 0x80
 8008dd6:	d103      	bne.n	8008de0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2203      	movs	r2, #3
 8008ddc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008dde:	e116      	b.n	800900e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2205      	movs	r2, #5
 8008de4:	761a      	strb	r2, [r3, #24]
      break;
 8008de6:	e112      	b.n	800900e <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008de8:	7b7b      	ldrb	r3, [r7, #13]
 8008dea:	2b80      	cmp	r3, #128	@ 0x80
 8008dec:	d103      	bne.n	8008df6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2209      	movs	r2, #9
 8008df2:	761a      	strb	r2, [r3, #24]
      break;
 8008df4:	e10b      	b.n	800900e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2207      	movs	r2, #7
 8008dfa:	761a      	strb	r2, [r3, #24]
      break;
 8008dfc:	e107      	b.n	800900e <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d003      	beq.n	8008e0c <USBH_HandleControl+0xcc>
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	f040 8101 	bne.w	800900e <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	220b      	movs	r2, #11
 8008e10:	761a      	strb	r2, [r3, #24]
      break;
 8008e12:	e0fc      	b.n	800900e <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6899      	ldr	r1, [r3, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	899a      	ldrh	r2, [r3, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	791b      	ldrb	r3, [r3, #4]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f93c 	bl	80090aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2204      	movs	r2, #4
 8008e36:	761a      	strb	r2, [r3, #24]
      break;
 8008e38:	e0f2      	b.n	8009020 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	791b      	ldrb	r3, [r3, #4]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fc7f 	bl	8009744 <USBH_LL_GetURBState>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d103      	bne.n	8008e58 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2209      	movs	r2, #9
 8008e54:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008e56:	e0dc      	b.n	8009012 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	2b05      	cmp	r3, #5
 8008e5c:	d102      	bne.n	8008e64 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	73fb      	strb	r3, [r7, #15]
      break;
 8008e62:	e0d6      	b.n	8009012 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	f040 80d3 	bne.w	8009012 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	220b      	movs	r2, #11
 8008e70:	761a      	strb	r2, [r3, #24]
      break;
 8008e72:	e0ce      	b.n	8009012 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6899      	ldr	r1, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	899a      	ldrh	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	795b      	ldrb	r3, [r3, #5]
 8008e80:	2001      	movs	r0, #1
 8008e82:	9000      	str	r0, [sp, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f8eb 	bl	8009060 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2206      	movs	r2, #6
 8008e9a:	761a      	strb	r2, [r3, #24]
      break;
 8008e9c:	e0c0      	b.n	8009020 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	795b      	ldrb	r3, [r3, #5]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fc4d 	bl	8009744 <USBH_LL_GetURBState>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d103      	bne.n	8008ebc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2207      	movs	r2, #7
 8008eb8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008eba:	e0ac      	b.n	8009016 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d105      	bne.n	8008ece <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	220c      	movs	r2, #12
 8008ec6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	73fb      	strb	r3, [r7, #15]
      break;
 8008ecc:	e0a3      	b.n	8009016 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d103      	bne.n	8008edc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2205      	movs	r2, #5
 8008ed8:	761a      	strb	r2, [r3, #24]
      break;
 8008eda:	e09c      	b.n	8009016 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	f040 8099 	bne.w	8009016 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	220b      	movs	r2, #11
 8008ee8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008eea:	2302      	movs	r3, #2
 8008eec:	73fb      	strb	r3, [r7, #15]
      break;
 8008eee:	e092      	b.n	8009016 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	791b      	ldrb	r3, [r3, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f8d6 	bl	80090aa <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	761a      	strb	r2, [r3, #24]

      break;
 8008f10:	e086      	b.n	8009020 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fc13 	bl	8009744 <USBH_LL_GetURBState>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d105      	bne.n	8008f34 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	220d      	movs	r2, #13
 8008f2c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008f32:	e072      	b.n	800901a <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d103      	bne.n	8008f42 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	220b      	movs	r2, #11
 8008f3e:	761a      	strb	r2, [r3, #24]
      break;
 8008f40:	e06b      	b.n	800901a <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b05      	cmp	r3, #5
 8008f46:	d168      	bne.n	800901a <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f4c:	e065      	b.n	800901a <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	795b      	ldrb	r3, [r3, #5]
 8008f52:	2201      	movs	r2, #1
 8008f54:	9200      	str	r2, [sp, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	2100      	movs	r1, #0
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f880 	bl	8009060 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	220a      	movs	r2, #10
 8008f70:	761a      	strb	r2, [r3, #24]
      break;
 8008f72:	e055      	b.n	8009020 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	795b      	ldrb	r3, [r3, #5]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fbe2 	bl	8009744 <USBH_LL_GetURBState>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d105      	bne.n	8008f96 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	220d      	movs	r2, #13
 8008f92:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008f94:	e043      	b.n	800901e <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d103      	bne.n	8008fa4 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2209      	movs	r2, #9
 8008fa0:	761a      	strb	r2, [r3, #24]
      break;
 8008fa2:	e03c      	b.n	800901e <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d139      	bne.n	800901e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	220b      	movs	r2, #11
 8008fae:	761a      	strb	r2, [r3, #24]
      break;
 8008fb0:	e035      	b.n	800901e <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	7e5b      	ldrb	r3, [r3, #25]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	765a      	strb	r2, [r3, #25]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7e5b      	ldrb	r3, [r3, #25]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d806      	bhi.n	8008fd4 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008fd2:	e025      	b.n	8009020 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fda:	2106      	movs	r1, #6
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	795b      	ldrb	r3, [r3, #5]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f90d 	bl	800920c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	791b      	ldrb	r3, [r3, #4]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f907 	bl	800920c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009004:	2302      	movs	r3, #2
 8009006:	73fb      	strb	r3, [r7, #15]
      break;
 8009008:	e00a      	b.n	8009020 <USBH_HandleControl+0x2e0>

    default:
      break;
 800900a:	bf00      	nop
 800900c:	e008      	b.n	8009020 <USBH_HandleControl+0x2e0>
      break;
 800900e:	bf00      	nop
 8009010:	e006      	b.n	8009020 <USBH_HandleControl+0x2e0>
      break;
 8009012:	bf00      	nop
 8009014:	e004      	b.n	8009020 <USBH_HandleControl+0x2e0>
      break;
 8009016:	bf00      	nop
 8009018:	e002      	b.n	8009020 <USBH_HandleControl+0x2e0>
      break;
 800901a:	bf00      	nop
 800901c:	e000      	b.n	8009020 <USBH_HandleControl+0x2e0>
      break;
 800901e:	bf00      	nop
  }

  return status;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop

0800902c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af04      	add	r7, sp, #16
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800903a:	79f9      	ldrb	r1, [r7, #7]
 800903c:	2300      	movs	r3, #0
 800903e:	9303      	str	r3, [sp, #12]
 8009040:	2308      	movs	r3, #8
 8009042:	9302      	str	r3, [sp, #8]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	2300      	movs	r3, #0
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2300      	movs	r3, #0
 800904e:	2200      	movs	r2, #0
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fb46 	bl	80096e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af04      	add	r7, sp, #16
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	4611      	mov	r1, r2
 800906c:	461a      	mov	r2, r3
 800906e:	460b      	mov	r3, r1
 8009070:	80fb      	strh	r3, [r7, #6]
 8009072:	4613      	mov	r3, r2
 8009074:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009084:	7979      	ldrb	r1, [r7, #5]
 8009086:	7e3b      	ldrb	r3, [r7, #24]
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	2301      	movs	r3, #1
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	2300      	movs	r3, #0
 8009098:	2200      	movs	r2, #0
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fb21 	bl	80096e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b088      	sub	sp, #32
 80090ae:	af04      	add	r7, sp, #16
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	4611      	mov	r1, r2
 80090b6:	461a      	mov	r2, r3
 80090b8:	460b      	mov	r3, r1
 80090ba:	80fb      	strh	r3, [r7, #6]
 80090bc:	4613      	mov	r3, r2
 80090be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090c0:	7979      	ldrb	r1, [r7, #5]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	9302      	str	r3, [sp, #8]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	2301      	movs	r3, #1
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	2300      	movs	r3, #0
 80090d4:	2201      	movs	r2, #1
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 fb03 	bl	80096e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80090dc:	2300      	movs	r3, #0

}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b088      	sub	sp, #32
 80090ea:	af04      	add	r7, sp, #16
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	4611      	mov	r1, r2
 80090f2:	461a      	mov	r2, r3
 80090f4:	460b      	mov	r3, r1
 80090f6:	80fb      	strh	r3, [r7, #6]
 80090f8:	4613      	mov	r3, r2
 80090fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800910a:	7979      	ldrb	r1, [r7, #5]
 800910c:	7e3b      	ldrb	r3, [r7, #24]
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	2301      	movs	r3, #1
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	2302      	movs	r3, #2
 800911e:	2200      	movs	r2, #0
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fade 	bl	80096e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af04      	add	r7, sp, #16
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4611      	mov	r1, r2
 800913c:	461a      	mov	r2, r3
 800913e:	460b      	mov	r3, r1
 8009140:	80fb      	strh	r3, [r7, #6]
 8009142:	4613      	mov	r3, r2
 8009144:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009146:	7979      	ldrb	r1, [r7, #5]
 8009148:	2300      	movs	r3, #0
 800914a:	9303      	str	r3, [sp, #12]
 800914c:	88fb      	ldrh	r3, [r7, #6]
 800914e:	9302      	str	r3, [sp, #8]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	2301      	movs	r3, #1
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	2302      	movs	r3, #2
 800915a:	2201      	movs	r2, #1
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fac0 	bl	80096e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af04      	add	r7, sp, #16
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	4608      	mov	r0, r1
 8009176:	4611      	mov	r1, r2
 8009178:	461a      	mov	r2, r3
 800917a:	4603      	mov	r3, r0
 800917c:	70fb      	strb	r3, [r7, #3]
 800917e:	460b      	mov	r3, r1
 8009180:	70bb      	strb	r3, [r7, #2]
 8009182:	4613      	mov	r3, r2
 8009184:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009186:	7878      	ldrb	r0, [r7, #1]
 8009188:	78ba      	ldrb	r2, [r7, #2]
 800918a:	78f9      	ldrb	r1, [r7, #3]
 800918c:	8b3b      	ldrh	r3, [r7, #24]
 800918e:	9302      	str	r3, [sp, #8]
 8009190:	7d3b      	ldrb	r3, [r7, #20]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	7c3b      	ldrb	r3, [r7, #16]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	4603      	mov	r3, r0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fa53 	bl	8009646 <USBH_LL_OpenPipe>

  return USBH_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa72 	bl	80096a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f836 	bl	8009248 <USBH_GetFreePipe>
 80091dc:	4603      	mov	r3, r0
 80091de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80091e0:	89fb      	ldrh	r3, [r7, #14]
 80091e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00a      	beq.n	8009200 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	33e0      	adds	r3, #224	@ 0xe0
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	440b      	add	r3, r1
 80091fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009200:	89fb      	ldrh	r3, [r7, #14]
 8009202:	b2db      	uxtb	r3, r3
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	2b0f      	cmp	r3, #15
 800921c:	d80d      	bhi.n	800923a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	33e0      	adds	r3, #224	@ 0xe0
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	33e0      	adds	r3, #224	@ 0xe0
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	e00f      	b.n	800927a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	33e0      	adds	r3, #224	@ 0xe0
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	b29b      	uxth	r3, r3
 8009272:	e007      	b.n	8009284 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	3301      	adds	r3, #1
 8009278:	73fb      	strb	r3, [r7, #15]
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2b0f      	cmp	r3, #15
 800927e:	d9ec      	bls.n	800925a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009294:	2201      	movs	r2, #1
 8009296:	490e      	ldr	r1, [pc, #56]	@ (80092d0 <MX_USB_HOST_Init+0x40>)
 8009298:	480e      	ldr	r0, [pc, #56]	@ (80092d4 <MX_USB_HOST_Init+0x44>)
 800929a:	f7fe fb0f 	bl	80078bc <USBH_Init>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80092a4:	f7f7 fc62 	bl	8000b6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80092a8:	490b      	ldr	r1, [pc, #44]	@ (80092d8 <MX_USB_HOST_Init+0x48>)
 80092aa:	480a      	ldr	r0, [pc, #40]	@ (80092d4 <MX_USB_HOST_Init+0x44>)
 80092ac:	f7fe fbb1 	bl	8007a12 <USBH_RegisterClass>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80092b6:	f7f7 fc59 	bl	8000b6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80092ba:	4806      	ldr	r0, [pc, #24]	@ (80092d4 <MX_USB_HOST_Init+0x44>)
 80092bc:	f7fe fc35 	bl	8007b2a <USBH_Start>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80092c6:	f7f7 fc51 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80092ca:	bf00      	nop
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	080092f1 	.word	0x080092f1
 80092d4:	200001dc 	.word	0x200001dc
 80092d8:	2000000c 	.word	0x2000000c

080092dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80092e0:	4802      	ldr	r0, [pc, #8]	@ (80092ec <MX_USB_HOST_Process+0x10>)
 80092e2:	f7fe fc33 	bl	8007b4c <USBH_Process>
}
 80092e6:	bf00      	nop
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200001dc 	.word	0x200001dc

080092f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	3b01      	subs	r3, #1
 8009300:	2b04      	cmp	r3, #4
 8009302:	d819      	bhi.n	8009338 <USBH_UserProcess+0x48>
 8009304:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <USBH_UserProcess+0x1c>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	08009339 	.word	0x08009339
 8009310:	08009329 	.word	0x08009329
 8009314:	08009339 	.word	0x08009339
 8009318:	08009331 	.word	0x08009331
 800931c:	08009321 	.word	0x08009321
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009320:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <USBH_UserProcess+0x58>)
 8009322:	2203      	movs	r2, #3
 8009324:	701a      	strb	r2, [r3, #0]
  break;
 8009326:	e008      	b.n	800933a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009328:	4b07      	ldr	r3, [pc, #28]	@ (8009348 <USBH_UserProcess+0x58>)
 800932a:	2202      	movs	r2, #2
 800932c:	701a      	strb	r2, [r3, #0]
  break;
 800932e:	e004      	b.n	800933a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009330:	4b05      	ldr	r3, [pc, #20]	@ (8009348 <USBH_UserProcess+0x58>)
 8009332:	2201      	movs	r2, #1
 8009334:	701a      	strb	r2, [r3, #0]
  break;
 8009336:	e000      	b.n	800933a <USBH_UserProcess+0x4a>

  default:
  break;
 8009338:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	200005b4 	.word	0x200005b4

0800934c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	@ 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	609a      	str	r2, [r3, #8]
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800936c:	d147      	bne.n	80093fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	4b25      	ldr	r3, [pc, #148]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009376:	4a24      	ldr	r2, [pc, #144]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 8009378:	f043 0301 	orr.w	r3, r3, #1
 800937c:	6313      	str	r3, [r2, #48]	@ 0x30
 800937e:	4b22      	ldr	r3, [pc, #136]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800938a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800938e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009390:	2300      	movs	r3, #0
 8009392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009394:	2300      	movs	r3, #0
 8009396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009398:	f107 0314 	add.w	r3, r7, #20
 800939c:	4619      	mov	r1, r3
 800939e:	481b      	ldr	r0, [pc, #108]	@ (800940c <HAL_HCD_MspInit+0xc0>)
 80093a0:	f7f7 ffd2 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80093a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80093a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093aa:	2302      	movs	r3, #2
 80093ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093b2:	2300      	movs	r3, #0
 80093b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093b6:	230a      	movs	r3, #10
 80093b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093ba:	f107 0314 	add.w	r3, r7, #20
 80093be:	4619      	mov	r1, r3
 80093c0:	4812      	ldr	r0, [pc, #72]	@ (800940c <HAL_HCD_MspInit+0xc0>)
 80093c2:	f7f7 ffc1 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093c6:	4b10      	ldr	r3, [pc, #64]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 80093c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ca:	4a0f      	ldr	r2, [pc, #60]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 80093cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 80093d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093da:	4a0b      	ldr	r2, [pc, #44]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 80093dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80093e2:	4b09      	ldr	r3, [pc, #36]	@ (8009408 <HAL_HCD_MspInit+0xbc>)
 80093e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093ee:	2200      	movs	r2, #0
 80093f0:	2100      	movs	r1, #0
 80093f2:	2043      	movs	r0, #67	@ 0x43
 80093f4:	f7f7 ff71 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093f8:	2043      	movs	r0, #67	@ 0x43
 80093fa:	f7f7 ff8a 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093fe:	bf00      	nop
 8009400:	3728      	adds	r7, #40	@ 0x28
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40023800 	.word	0x40023800
 800940c:	40020000 	.word	0x40020000

08009410 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe ff6d 	bl	80082fe <USBH_LL_IncTimer>
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe ffa9 	bl	8008392 <USBH_LL_Connect>
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe ffb2 	bl	80083c0 <USBH_LL_Disconnect>
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
 8009470:	4613      	mov	r3, r2
 8009472:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe ff5f 	bl	8008352 <USBH_LL_PortEnabled>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe ff5f 	bl	800836e <USBH_LL_PortDisabled>
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d12a      	bne.n	8009520 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80094ca:	4a18      	ldr	r2, [pc, #96]	@ (800952c <USBH_LL_Init+0x74>)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a15      	ldr	r2, [pc, #84]	@ (800952c <USBH_LL_Init+0x74>)
 80094d6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094da:	4b14      	ldr	r3, [pc, #80]	@ (800952c <USBH_LL_Init+0x74>)
 80094dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80094e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80094e2:	4b12      	ldr	r3, [pc, #72]	@ (800952c <USBH_LL_Init+0x74>)
 80094e4:	2208      	movs	r2, #8
 80094e6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80094e8:	4b10      	ldr	r3, [pc, #64]	@ (800952c <USBH_LL_Init+0x74>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094ee:	4b0f      	ldr	r3, [pc, #60]	@ (800952c <USBH_LL_Init+0x74>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80094f4:	4b0d      	ldr	r3, [pc, #52]	@ (800952c <USBH_LL_Init+0x74>)
 80094f6:	2202      	movs	r2, #2
 80094f8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094fa:	4b0c      	ldr	r3, [pc, #48]	@ (800952c <USBH_LL_Init+0x74>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009500:	480a      	ldr	r0, [pc, #40]	@ (800952c <USBH_LL_Init+0x74>)
 8009502:	f7f8 f8d6 	bl	80016b2 <HAL_HCD_Init>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800950c:	f7f7 fb2e 	bl	8000b6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009510:	4806      	ldr	r0, [pc, #24]	@ (800952c <USBH_LL_Init+0x74>)
 8009512:	f7f8 fd37 	bl	8001f84 <HAL_HCD_GetCurrentFrame>
 8009516:	4603      	mov	r3, r0
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fe fee0 	bl	80082e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	200005b8 	.word	0x200005b8

08009530 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009546:	4618      	mov	r0, r3
 8009548:	f7f8 fca4 	bl	8001e94 <HAL_HCD_Start>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 f95e 	bl	8009814 <USBH_Get_USB_Status>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955c:	7bbb      	ldrb	r3, [r7, #14]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800957c:	4618      	mov	r0, r3
 800957e:	f7f8 fcac 	bl	8001eda <HAL_HCD_Stop>
 8009582:	4603      	mov	r3, r0
 8009584:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009586:	7bfb      	ldrb	r3, [r7, #15]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 f943 	bl	8009814 <USBH_Get_USB_Status>
 800958e:	4603      	mov	r3, r0
 8009590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009592:	7bbb      	ldrb	r3, [r7, #14]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80095a4:	2301      	movs	r3, #1
 80095a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f8 fcf6 	bl	8001fa0 <HAL_HCD_GetCurrentSpeed>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d00c      	beq.n	80095d4 <USBH_LL_GetSpeed+0x38>
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d80d      	bhi.n	80095da <USBH_LL_GetSpeed+0x3e>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <USBH_LL_GetSpeed+0x2c>
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d003      	beq.n	80095ce <USBH_LL_GetSpeed+0x32>
 80095c6:	e008      	b.n	80095da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]
    break;
 80095cc:	e008      	b.n	80095e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80095ce:	2301      	movs	r3, #1
 80095d0:	73fb      	strb	r3, [r7, #15]
    break;
 80095d2:	e005      	b.n	80095e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80095d4:	2302      	movs	r3, #2
 80095d6:	73fb      	strb	r3, [r7, #15]
    break;
 80095d8:	e002      	b.n	80095e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80095da:	2301      	movs	r3, #1
 80095dc:	73fb      	strb	r3, [r7, #15]
    break;
 80095de:	bf00      	nop
  }
  return  speed;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009600:	4618      	mov	r0, r3
 8009602:	f7f8 fc87 	bl	8001f14 <HAL_HCD_ResetPort>
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f901 	bl	8009814 <USBH_Get_USB_Status>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009616:	7bbb      	ldrb	r3, [r7, #14]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f7f8 fc8f 	bl	8001f5a <HAL_HCD_HC_GetXferCount>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009646:	b590      	push	{r4, r7, lr}
 8009648:	b089      	sub	sp, #36	@ 0x24
 800964a:	af04      	add	r7, sp, #16
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	4608      	mov	r0, r1
 8009650:	4611      	mov	r1, r2
 8009652:	461a      	mov	r2, r3
 8009654:	4603      	mov	r3, r0
 8009656:	70fb      	strb	r3, [r7, #3]
 8009658:	460b      	mov	r3, r1
 800965a:	70bb      	strb	r3, [r7, #2]
 800965c:	4613      	mov	r3, r2
 800965e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800966e:	787c      	ldrb	r4, [r7, #1]
 8009670:	78ba      	ldrb	r2, [r7, #2]
 8009672:	78f9      	ldrb	r1, [r7, #3]
 8009674:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009676:	9302      	str	r3, [sp, #8]
 8009678:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	4623      	mov	r3, r4
 8009686:	f7f8 f87b 	bl	8001780 <HAL_HCD_HC_Init>
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	4618      	mov	r0, r3
 8009692:	f000 f8bf 	bl	8009814 <USBH_Get_USB_Status>
 8009696:	4603      	mov	r3, r0
 8009698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969a:	7bbb      	ldrb	r3, [r7, #14]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd90      	pop	{r4, r7, pc}

080096a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7f8 f914 	bl	80018f0 <HAL_HCD_HC_Halt>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f8a0 	bl	8009814 <USBH_Get_USB_Status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80096e2:	b590      	push	{r4, r7, lr}
 80096e4:	b089      	sub	sp, #36	@ 0x24
 80096e6:	af04      	add	r7, sp, #16
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	461a      	mov	r2, r3
 80096f0:	4603      	mov	r3, r0
 80096f2:	70fb      	strb	r3, [r7, #3]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70bb      	strb	r3, [r7, #2]
 80096f8:	4613      	mov	r3, r2
 80096fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800970a:	787c      	ldrb	r4, [r7, #1]
 800970c:	78ba      	ldrb	r2, [r7, #2]
 800970e:	78f9      	ldrb	r1, [r7, #3]
 8009710:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009718:	9302      	str	r3, [sp, #8]
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	4623      	mov	r3, r4
 8009726:	f7f8 f907 	bl	8001938 <HAL_HCD_HC_SubmitRequest>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f86f 	bl	8009814 <USBH_Get_USB_Status>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973a:	7bbb      	ldrb	r3, [r7, #14]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	bd90      	pop	{r4, r7, pc}

08009744 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	4611      	mov	r1, r2
 800975a:	4618      	mov	r0, r3
 800975c:	f7f8 fbe8 	bl	8001f30 <HAL_HCD_HC_GetURBState>
 8009760:	4603      	mov	r3, r0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800977c:	2b01      	cmp	r3, #1
 800977e:	d103      	bne.n	8009788 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 f872 	bl	800986c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009788:	20c8      	movs	r0, #200	@ 0xc8
 800978a:	f7f7 fca7 	bl	80010dc <HAL_Delay>
  return USBH_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
 80097a4:	4613      	mov	r3, r2
 80097a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80097b0:	78fa      	ldrb	r2, [r7, #3]
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	4613      	mov	r3, r2
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	1a9b      	subs	r3, r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	440b      	add	r3, r1
 80097be:	3317      	adds	r3, #23
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00a      	beq.n	80097dc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80097c6:	78fa      	ldrb	r2, [r7, #3]
 80097c8:	68f9      	ldr	r1, [r7, #12]
 80097ca:	4613      	mov	r3, r2
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	440b      	add	r3, r1
 80097d4:	333c      	adds	r3, #60	@ 0x3c
 80097d6:	78ba      	ldrb	r2, [r7, #2]
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e009      	b.n	80097f0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	4613      	mov	r3, r2
 80097e2:	011b      	lsls	r3, r3, #4
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	440b      	add	r3, r1
 80097ea:	333d      	adds	r3, #61	@ 0x3d
 80097ec:	78ba      	ldrb	r2, [r7, #2]
 80097ee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7f7 fc68 	bl	80010dc <HAL_Delay>
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	2b03      	cmp	r3, #3
 8009826:	d817      	bhi.n	8009858 <USBH_Get_USB_Status+0x44>
 8009828:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <USBH_Get_USB_Status+0x1c>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	08009841 	.word	0x08009841
 8009834:	08009847 	.word	0x08009847
 8009838:	0800984d 	.word	0x0800984d
 800983c:	08009853 	.word	0x08009853
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
    break;
 8009844:	e00b      	b.n	800985e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009846:	2302      	movs	r3, #2
 8009848:	73fb      	strb	r3, [r7, #15]
    break;
 800984a:	e008      	b.n	800985e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800984c:	2301      	movs	r3, #1
 800984e:	73fb      	strb	r3, [r7, #15]
    break;
 8009850:	e005      	b.n	800985e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009852:	2302      	movs	r3, #2
 8009854:	73fb      	strb	r3, [r7, #15]
    break;
 8009856:	e002      	b.n	800985e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009858:	2302      	movs	r3, #2
 800985a:	73fb      	strb	r3, [r7, #15]
    break;
 800985c:	bf00      	nop
  }
  return usb_status;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
 8009884:	e001      	b.n	800988a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009886:	2301      	movs	r3, #1
 8009888:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	461a      	mov	r2, r3
 800988e:	2101      	movs	r1, #1
 8009890:	4803      	ldr	r0, [pc, #12]	@ (80098a0 <MX_DriverVbusFS+0x34>)
 8009892:	f7f7 fef5 	bl	8001680 <HAL_GPIO_WritePin>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	40020800 	.word	0x40020800

080098a4 <malloc>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	@ (80098b0 <malloc+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f000 b82d 	b.w	8009908 <_malloc_r>
 80098ae:	bf00      	nop
 80098b0:	2000002c 	.word	0x2000002c

080098b4 <free>:
 80098b4:	4b02      	ldr	r3, [pc, #8]	@ (80098c0 <free+0xc>)
 80098b6:	4601      	mov	r1, r0
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f000 b8f5 	b.w	8009aa8 <_free_r>
 80098be:	bf00      	nop
 80098c0:	2000002c 	.word	0x2000002c

080098c4 <sbrk_aligned>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	4e0f      	ldr	r6, [pc, #60]	@ (8009904 <sbrk_aligned+0x40>)
 80098c8:	460c      	mov	r4, r1
 80098ca:	6831      	ldr	r1, [r6, #0]
 80098cc:	4605      	mov	r5, r0
 80098ce:	b911      	cbnz	r1, 80098d6 <sbrk_aligned+0x12>
 80098d0:	f000 f8ae 	bl	8009a30 <_sbrk_r>
 80098d4:	6030      	str	r0, [r6, #0]
 80098d6:	4621      	mov	r1, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	f000 f8a9 	bl	8009a30 <_sbrk_r>
 80098de:	1c43      	adds	r3, r0, #1
 80098e0:	d103      	bne.n	80098ea <sbrk_aligned+0x26>
 80098e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80098e6:	4620      	mov	r0, r4
 80098e8:	bd70      	pop	{r4, r5, r6, pc}
 80098ea:	1cc4      	adds	r4, r0, #3
 80098ec:	f024 0403 	bic.w	r4, r4, #3
 80098f0:	42a0      	cmp	r0, r4
 80098f2:	d0f8      	beq.n	80098e6 <sbrk_aligned+0x22>
 80098f4:	1a21      	subs	r1, r4, r0
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 f89a 	bl	8009a30 <_sbrk_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	d1f2      	bne.n	80098e6 <sbrk_aligned+0x22>
 8009900:	e7ef      	b.n	80098e2 <sbrk_aligned+0x1e>
 8009902:	bf00      	nop
 8009904:	20000998 	.word	0x20000998

08009908 <_malloc_r>:
 8009908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800990c:	1ccd      	adds	r5, r1, #3
 800990e:	f025 0503 	bic.w	r5, r5, #3
 8009912:	3508      	adds	r5, #8
 8009914:	2d0c      	cmp	r5, #12
 8009916:	bf38      	it	cc
 8009918:	250c      	movcc	r5, #12
 800991a:	2d00      	cmp	r5, #0
 800991c:	4606      	mov	r6, r0
 800991e:	db01      	blt.n	8009924 <_malloc_r+0x1c>
 8009920:	42a9      	cmp	r1, r5
 8009922:	d904      	bls.n	800992e <_malloc_r+0x26>
 8009924:	230c      	movs	r3, #12
 8009926:	6033      	str	r3, [r6, #0]
 8009928:	2000      	movs	r0, #0
 800992a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a04 <_malloc_r+0xfc>
 8009932:	f000 f869 	bl	8009a08 <__malloc_lock>
 8009936:	f8d8 3000 	ldr.w	r3, [r8]
 800993a:	461c      	mov	r4, r3
 800993c:	bb44      	cbnz	r4, 8009990 <_malloc_r+0x88>
 800993e:	4629      	mov	r1, r5
 8009940:	4630      	mov	r0, r6
 8009942:	f7ff ffbf 	bl	80098c4 <sbrk_aligned>
 8009946:	1c43      	adds	r3, r0, #1
 8009948:	4604      	mov	r4, r0
 800994a:	d158      	bne.n	80099fe <_malloc_r+0xf6>
 800994c:	f8d8 4000 	ldr.w	r4, [r8]
 8009950:	4627      	mov	r7, r4
 8009952:	2f00      	cmp	r7, #0
 8009954:	d143      	bne.n	80099de <_malloc_r+0xd6>
 8009956:	2c00      	cmp	r4, #0
 8009958:	d04b      	beq.n	80099f2 <_malloc_r+0xea>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	4639      	mov	r1, r7
 800995e:	4630      	mov	r0, r6
 8009960:	eb04 0903 	add.w	r9, r4, r3
 8009964:	f000 f864 	bl	8009a30 <_sbrk_r>
 8009968:	4581      	cmp	r9, r0
 800996a:	d142      	bne.n	80099f2 <_malloc_r+0xea>
 800996c:	6821      	ldr	r1, [r4, #0]
 800996e:	1a6d      	subs	r5, r5, r1
 8009970:	4629      	mov	r1, r5
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ffa6 	bl	80098c4 <sbrk_aligned>
 8009978:	3001      	adds	r0, #1
 800997a:	d03a      	beq.n	80099f2 <_malloc_r+0xea>
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	442b      	add	r3, r5
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	f8d8 3000 	ldr.w	r3, [r8]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	bb62      	cbnz	r2, 80099e4 <_malloc_r+0xdc>
 800998a:	f8c8 7000 	str.w	r7, [r8]
 800998e:	e00f      	b.n	80099b0 <_malloc_r+0xa8>
 8009990:	6822      	ldr	r2, [r4, #0]
 8009992:	1b52      	subs	r2, r2, r5
 8009994:	d420      	bmi.n	80099d8 <_malloc_r+0xd0>
 8009996:	2a0b      	cmp	r2, #11
 8009998:	d917      	bls.n	80099ca <_malloc_r+0xc2>
 800999a:	1961      	adds	r1, r4, r5
 800999c:	42a3      	cmp	r3, r4
 800999e:	6025      	str	r5, [r4, #0]
 80099a0:	bf18      	it	ne
 80099a2:	6059      	strne	r1, [r3, #4]
 80099a4:	6863      	ldr	r3, [r4, #4]
 80099a6:	bf08      	it	eq
 80099a8:	f8c8 1000 	streq.w	r1, [r8]
 80099ac:	5162      	str	r2, [r4, r5]
 80099ae:	604b      	str	r3, [r1, #4]
 80099b0:	4630      	mov	r0, r6
 80099b2:	f000 f82f 	bl	8009a14 <__malloc_unlock>
 80099b6:	f104 000b 	add.w	r0, r4, #11
 80099ba:	1d23      	adds	r3, r4, #4
 80099bc:	f020 0007 	bic.w	r0, r0, #7
 80099c0:	1ac2      	subs	r2, r0, r3
 80099c2:	bf1c      	itt	ne
 80099c4:	1a1b      	subne	r3, r3, r0
 80099c6:	50a3      	strne	r3, [r4, r2]
 80099c8:	e7af      	b.n	800992a <_malloc_r+0x22>
 80099ca:	6862      	ldr	r2, [r4, #4]
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	bf0c      	ite	eq
 80099d0:	f8c8 2000 	streq.w	r2, [r8]
 80099d4:	605a      	strne	r2, [r3, #4]
 80099d6:	e7eb      	b.n	80099b0 <_malloc_r+0xa8>
 80099d8:	4623      	mov	r3, r4
 80099da:	6864      	ldr	r4, [r4, #4]
 80099dc:	e7ae      	b.n	800993c <_malloc_r+0x34>
 80099de:	463c      	mov	r4, r7
 80099e0:	687f      	ldr	r7, [r7, #4]
 80099e2:	e7b6      	b.n	8009952 <_malloc_r+0x4a>
 80099e4:	461a      	mov	r2, r3
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	d1fb      	bne.n	80099e4 <_malloc_r+0xdc>
 80099ec:	2300      	movs	r3, #0
 80099ee:	6053      	str	r3, [r2, #4]
 80099f0:	e7de      	b.n	80099b0 <_malloc_r+0xa8>
 80099f2:	230c      	movs	r3, #12
 80099f4:	6033      	str	r3, [r6, #0]
 80099f6:	4630      	mov	r0, r6
 80099f8:	f000 f80c 	bl	8009a14 <__malloc_unlock>
 80099fc:	e794      	b.n	8009928 <_malloc_r+0x20>
 80099fe:	6005      	str	r5, [r0, #0]
 8009a00:	e7d6      	b.n	80099b0 <_malloc_r+0xa8>
 8009a02:	bf00      	nop
 8009a04:	2000099c 	.word	0x2000099c

08009a08 <__malloc_lock>:
 8009a08:	4801      	ldr	r0, [pc, #4]	@ (8009a10 <__malloc_lock+0x8>)
 8009a0a:	f000 b84b 	b.w	8009aa4 <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	20000ad8 	.word	0x20000ad8

08009a14 <__malloc_unlock>:
 8009a14:	4801      	ldr	r0, [pc, #4]	@ (8009a1c <__malloc_unlock+0x8>)
 8009a16:	f000 b846 	b.w	8009aa6 <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	20000ad8 	.word	0x20000ad8

08009a20 <memset>:
 8009a20:	4402      	add	r2, r0
 8009a22:	4603      	mov	r3, r0
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d100      	bne.n	8009a2a <memset+0xa>
 8009a28:	4770      	bx	lr
 8009a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a2e:	e7f9      	b.n	8009a24 <memset+0x4>

08009a30 <_sbrk_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d06      	ldr	r5, [pc, #24]	@ (8009a4c <_sbrk_r+0x1c>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f7 fa6a 	bl	8000f14 <_sbrk>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_sbrk_r+0x1a>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_sbrk_r+0x1a>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20000adc 	.word	0x20000adc

08009a50 <__errno>:
 8009a50:	4b01      	ldr	r3, [pc, #4]	@ (8009a58 <__errno+0x8>)
 8009a52:	6818      	ldr	r0, [r3, #0]
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	2000002c 	.word	0x2000002c

08009a5c <__libc_init_array>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8009a94 <__libc_init_array+0x38>)
 8009a60:	4c0d      	ldr	r4, [pc, #52]	@ (8009a98 <__libc_init_array+0x3c>)
 8009a62:	1b64      	subs	r4, r4, r5
 8009a64:	10a4      	asrs	r4, r4, #2
 8009a66:	2600      	movs	r6, #0
 8009a68:	42a6      	cmp	r6, r4
 8009a6a:	d109      	bne.n	8009a80 <__libc_init_array+0x24>
 8009a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8009a9c <__libc_init_array+0x40>)
 8009a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8009aa0 <__libc_init_array+0x44>)
 8009a70:	f000 f864 	bl	8009b3c <_init>
 8009a74:	1b64      	subs	r4, r4, r5
 8009a76:	10a4      	asrs	r4, r4, #2
 8009a78:	2600      	movs	r6, #0
 8009a7a:	42a6      	cmp	r6, r4
 8009a7c:	d105      	bne.n	8009a8a <__libc_init_array+0x2e>
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a84:	4798      	blx	r3
 8009a86:	3601      	adds	r6, #1
 8009a88:	e7ee      	b.n	8009a68 <__libc_init_array+0xc>
 8009a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a8e:	4798      	blx	r3
 8009a90:	3601      	adds	r6, #1
 8009a92:	e7f2      	b.n	8009a7a <__libc_init_array+0x1e>
 8009a94:	08009b78 	.word	0x08009b78
 8009a98:	08009b78 	.word	0x08009b78
 8009a9c:	08009b78 	.word	0x08009b78
 8009aa0:	08009b7c 	.word	0x08009b7c

08009aa4 <__retarget_lock_acquire_recursive>:
 8009aa4:	4770      	bx	lr

08009aa6 <__retarget_lock_release_recursive>:
 8009aa6:	4770      	bx	lr

08009aa8 <_free_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4605      	mov	r5, r0
 8009aac:	2900      	cmp	r1, #0
 8009aae:	d041      	beq.n	8009b34 <_free_r+0x8c>
 8009ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab4:	1f0c      	subs	r4, r1, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bfb8      	it	lt
 8009aba:	18e4      	addlt	r4, r4, r3
 8009abc:	f7ff ffa4 	bl	8009a08 <__malloc_lock>
 8009ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b38 <_free_r+0x90>)
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	b933      	cbnz	r3, 8009ad4 <_free_r+0x2c>
 8009ac6:	6063      	str	r3, [r4, #4]
 8009ac8:	6014      	str	r4, [r2, #0]
 8009aca:	4628      	mov	r0, r5
 8009acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad0:	f7ff bfa0 	b.w	8009a14 <__malloc_unlock>
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d908      	bls.n	8009aea <_free_r+0x42>
 8009ad8:	6820      	ldr	r0, [r4, #0]
 8009ada:	1821      	adds	r1, r4, r0
 8009adc:	428b      	cmp	r3, r1
 8009ade:	bf01      	itttt	eq
 8009ae0:	6819      	ldreq	r1, [r3, #0]
 8009ae2:	685b      	ldreq	r3, [r3, #4]
 8009ae4:	1809      	addeq	r1, r1, r0
 8009ae6:	6021      	streq	r1, [r4, #0]
 8009ae8:	e7ed      	b.n	8009ac6 <_free_r+0x1e>
 8009aea:	461a      	mov	r2, r3
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	b10b      	cbz	r3, 8009af4 <_free_r+0x4c>
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d9fa      	bls.n	8009aea <_free_r+0x42>
 8009af4:	6811      	ldr	r1, [r2, #0]
 8009af6:	1850      	adds	r0, r2, r1
 8009af8:	42a0      	cmp	r0, r4
 8009afa:	d10b      	bne.n	8009b14 <_free_r+0x6c>
 8009afc:	6820      	ldr	r0, [r4, #0]
 8009afe:	4401      	add	r1, r0
 8009b00:	1850      	adds	r0, r2, r1
 8009b02:	4283      	cmp	r3, r0
 8009b04:	6011      	str	r1, [r2, #0]
 8009b06:	d1e0      	bne.n	8009aca <_free_r+0x22>
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	6053      	str	r3, [r2, #4]
 8009b0e:	4408      	add	r0, r1
 8009b10:	6010      	str	r0, [r2, #0]
 8009b12:	e7da      	b.n	8009aca <_free_r+0x22>
 8009b14:	d902      	bls.n	8009b1c <_free_r+0x74>
 8009b16:	230c      	movs	r3, #12
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	e7d6      	b.n	8009aca <_free_r+0x22>
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	1821      	adds	r1, r4, r0
 8009b20:	428b      	cmp	r3, r1
 8009b22:	bf04      	itt	eq
 8009b24:	6819      	ldreq	r1, [r3, #0]
 8009b26:	685b      	ldreq	r3, [r3, #4]
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	bf04      	itt	eq
 8009b2c:	1809      	addeq	r1, r1, r0
 8009b2e:	6021      	streq	r1, [r4, #0]
 8009b30:	6054      	str	r4, [r2, #4]
 8009b32:	e7ca      	b.n	8009aca <_free_r+0x22>
 8009b34:	bd38      	pop	{r3, r4, r5, pc}
 8009b36:	bf00      	nop
 8009b38:	2000099c 	.word	0x2000099c

08009b3c <_init>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	bf00      	nop
 8009b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b42:	bc08      	pop	{r3}
 8009b44:	469e      	mov	lr, r3
 8009b46:	4770      	bx	lr

08009b48 <_fini>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr
