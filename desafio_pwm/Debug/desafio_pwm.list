
desafio_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a98  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c3c  08009c3c  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c44  08009c44  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c44  08009c44  0000ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009c4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192d1  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dcc  00000000  00000000  0002437d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  00028150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a1  00000000  00000000  00029820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002437c  00000000  00000000  0002a9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cfe7  00000000  00000000  0004ed3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41bf  00000000  00000000  0006bd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fee3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006450  00000000  00000000  0013ff28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00146378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c08 	.word	0x08009c08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009c08 	.word	0x08009c08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80004f8:	f000 fde4 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9a6 	bl	8000850 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f884 	bl	8000610 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8b0 	bl	800066c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8de 	bl	80006cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 ff24 	bl	800935c <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000514:	f000 f910 	bl	8000738 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // CONDICIONES INICIALES
  inicio(); // (amarillo al 100%)
 8000518:	f000 fa98 	bl	8000a4c <inicio>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051c:	f008 ff44 	bl	80093a8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    transicion1(); // Aumenta rojo a 100%
 8000520:	f000 fab2 	bl	8000a88 <transicion1>
    transicion2(); // Disminuye amarillo a 0%
 8000524:	f000 fad8 	bl	8000ad8 <transicion2>
    transicion3(); // Aumenta verde a 100%
 8000528:	f000 faf6 	bl	8000b18 <transicion3>
    transicion4(); // Disminuye rojo a 0%
 800052c:	f000 fb1c 	bl	8000b68 <transicion4>
    transicion5(); // Aumenta amarillo a 100%
 8000530:	f000 fb3a 	bl	8000ba8 <transicion5>
    transicion6(); // Disminuye verde a 0%
 8000534:	f000 fb60 	bl	8000bf8 <transicion6>
    MX_USB_HOST_Process();
 8000538:	bf00      	nop
 800053a:	e7ef      	b.n	800051c <main+0x28>

0800053c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f009 face 	bl	8009aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fff4 	bl	80045b0 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
    Error_Handler();
 80005ce:	f000 fb33 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fa55 	bl	8004aa0 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
    Error_Handler();
 80005fc:	f000 fb1c 	bl	8000c38 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	@ 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f003 f9cb 	bl	80039e8 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
    Error_Handler();
 8000658:	f000 faee 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000098 	.word	0x20000098
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000672:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <MX_I2S3_Init+0x58>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_I2S3_Init+0x54>)
 800068c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000690:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <MX_I2S3_Init+0x5c>)
 8000696:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_I2S3_Init+0x54>)
 80006ac:	f003 fae0 	bl	8003c70 <HAL_I2S_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2S3_Init+0x4e>
    Error_Handler();
 80006b6:	f000 fabf 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	40003c00 	.word	0x40003c00
 80006c8:	00017700 	.word	0x00017700

080006cc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d0:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <MX_SPI1_Init+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000718:	220a      	movs	r2, #10
 800071a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_SPI1_Init+0x64>)
 800071e:	f004 fd0d 	bl	800513c <HAL_SPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_SPI1_Init+0x60>
    Error_Handler();
 8000728:	f000 fa86 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000134 	.word	0x20000134
 8000734:	40013000 	.word	0x40013000

08000738 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	@ 0x38
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	615a      	str	r2, [r3, #20]
 8000766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000768:	4b37      	ldr	r3, [pc, #220]	@ (8000848 <MX_TIM4_Init+0x110>)
 800076a:	4a38      	ldr	r2, [pc, #224]	@ (800084c <MX_TIM4_Init+0x114>)
 800076c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800076e:	4b36      	ldr	r3, [pc, #216]	@ (8000848 <MX_TIM4_Init+0x110>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b34      	ldr	r3, [pc, #208]	@ (8000848 <MX_TIM4_Init+0x110>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 800077a:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <MX_TIM4_Init+0x110>)
 800077c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000780:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000782:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <MX_TIM4_Init+0x110>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <MX_TIM4_Init+0x110>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800078e:	482e      	ldr	r0, [pc, #184]	@ (8000848 <MX_TIM4_Init+0x110>)
 8000790:	f004 fd5d 	bl	800524e <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM4_Init+0x66>
    Error_Handler();
 800079a:	f000 fa4d 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80007a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4827      	ldr	r0, [pc, #156]	@ (8000848 <MX_TIM4_Init+0x110>)
 80007ac:	f004 ff82 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM4_Init+0x82>
    Error_Handler();
 80007b6:	f000 fa3f 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80007ba:	4823      	ldr	r0, [pc, #140]	@ (8000848 <MX_TIM4_Init+0x110>)
 80007bc:	f004 fd96 	bl	80052ec <HAL_TIM_PWM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM4_Init+0x92>
    Error_Handler();
 80007c6:	f000 fa37 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	4619      	mov	r1, r3
 80007d8:	481b      	ldr	r0, [pc, #108]	@ (8000848 <MX_TIM4_Init+0x110>)
 80007da:	f005 fb49 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM4_Init+0xb0>
    Error_Handler();
 80007e4:	f000 fa28 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	@ 0x60
 80007ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4812      	ldr	r0, [pc, #72]	@ (8000848 <MX_TIM4_Init+0x110>)
 8000800:	f004 fe96 	bl	8005530 <HAL_TIM_PWM_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM4_Init+0xd6>
    Error_Handler();
 800080a:	f000 fa15 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2204      	movs	r2, #4
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_TIM4_Init+0x110>)
 8000816:	f004 fe8b 	bl	8005530 <HAL_TIM_PWM_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM4_Init+0xec>
    Error_Handler();
 8000820:	f000 fa0a 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	220c      	movs	r2, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	@ (8000848 <MX_TIM4_Init+0x110>)
 800082c:	f004 fe80 	bl	8005530 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM4_Init+0x102>
    Error_Handler();
 8000836:	f000 f9ff 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800083a:	4803      	ldr	r0, [pc, #12]	@ (8000848 <MX_TIM4_Init+0x110>)
 800083c:	f000 fb5c 	bl	8000ef8 <HAL_TIM_MspPostInit>
}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	@ 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000018c 	.word	0x2000018c
 800084c:	40000800 	.word	0x40000800

08000850 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	@ 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	4b72      	ldr	r3, [pc, #456]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a71      	ldr	r2, [pc, #452]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b6f      	ldr	r3, [pc, #444]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	4b6b      	ldr	r3, [pc, #428]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a6a      	ldr	r2, [pc, #424]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b68      	ldr	r3, [pc, #416]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b64      	ldr	r3, [pc, #400]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a63      	ldr	r2, [pc, #396]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b61      	ldr	r3, [pc, #388]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b5d      	ldr	r3, [pc, #372]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a5c      	ldr	r2, [pc, #368]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b56      	ldr	r3, [pc, #344]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a55      	ldr	r2, [pc, #340]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b53      	ldr	r3, [pc, #332]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a4e      	ldr	r2, [pc, #312]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b4c      	ldr	r3, [pc, #304]	@ (8000a34 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	4849      	ldr	r0, [pc, #292]	@ (8000a38 <MX_GPIO_Init+0x1e8>)
 8000914:	f000 ff1a 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000918:	2201      	movs	r2, #1
 800091a:	2101      	movs	r1, #1
 800091c:	4847      	ldr	r0, [pc, #284]	@ (8000a3c <MX_GPIO_Init+0x1ec>)
 800091e:	f000 ff15 	bl	800174c <HAL_GPIO_WritePin>
                    GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD5_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0110 	movw	r1, #16400	@ 0x4010
 8000928:	4845      	ldr	r0, [pc, #276]	@ (8000a40 <MX_GPIO_Init+0x1f0>)
 800092a:	f000 ff0f 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800092e:	2308      	movs	r3, #8
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	483c      	ldr	r0, [pc, #240]	@ (8000a38 <MX_GPIO_Init+0x1e8>)
 8000946:	f000 fd65 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4836      	ldr	r0, [pc, #216]	@ (8000a3c <MX_GPIO_Init+0x1ec>)
 8000962:	f000 fd57 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000966:	2308      	movs	r3, #8
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000976:	2305      	movs	r3, #5
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	482e      	ldr	r0, [pc, #184]	@ (8000a3c <MX_GPIO_Init+0x1ec>)
 8000982:	f000 fd47 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	482a      	ldr	r0, [pc, #168]	@ (8000a44 <MX_GPIO_Init+0x1f4>)
 800099c:	f000 fd3a 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a0:	2304      	movs	r3, #4
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4825      	ldr	r0, [pc, #148]	@ (8000a48 <MX_GPIO_Init+0x1f8>)
 80009b4:	f000 fd2e 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ca:	2305      	movs	r3, #5
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	@ (8000a48 <MX_GPIO_Init+0x1f8>)
 80009d6:	f000 fd1d 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD5_Pin | Audio_RST_Pin;
 80009da:	f244 0310 	movw	r3, #16400	@ 0x4010
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <MX_GPIO_Init+0x1f0>)
 80009f4:	f000 fd0e 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f8:	2320      	movs	r3, #32
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_GPIO_Init+0x1f0>)
 8000a0c:	f000 fd02 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0x1e8>)
 8000a26:	f000 fcf5 	bl	8001414 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400

08000a4c <inicio>:

/* USER CODE BEGIN 4 */

/*------------- Inicio -------------*/
void inicio(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  // Obtenemos el valor máximo de ciclo de trabajo
  uint16_t ciclomaximo = TIM4->ARR;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <inicio+0x34>)
 8000a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a56:	80fb      	strh	r3, [r7, #6]

  // Iniciamos con LED amarillo al 100%
  TIM4->CCR4 = ciclomaximo; // LED amarillo al 100%
 8000a58:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <inicio+0x34>)
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40

  // Arrancamos los PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Verde
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4808      	ldr	r0, [pc, #32]	@ (8000a84 <inicio+0x38>)
 8000a62:	f004 fc9d 	bl	80053a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Rojo
 8000a66:	2104      	movs	r1, #4
 8000a68:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <inicio+0x38>)
 8000a6a:	f004 fc99 	bl	80053a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Amarillo
 8000a6e:	210c      	movs	r1, #12
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <inicio+0x38>)
 8000a72:	f004 fc95 	bl	80053a0 <HAL_TIM_PWM_Start>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40000800 	.word	0x40000800
 8000a84:	2000018c 	.word	0x2000018c

08000a88 <transicion1>:

/*------------- Transición 1: Aumenta rojo a 100% -------------*/
void transicion1(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  uint16_t ciclomaximo = TIM4->ARR;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <transicion1+0x4c>)
 8000a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a92:	80bb      	strh	r3, [r7, #4]
  uint16_t ciclorojo = TIM4->CCR2;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <transicion1+0x4c>)
 8000a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a98:	80fb      	strh	r3, [r7, #6]

  do {
    HAL_Delay(TCAMBIO);
 8000a9a:	2014      	movs	r0, #20
 8000a9c:	f000 fb84 	bl	80011a8 <HAL_Delay>
    ciclorojo = (ciclomaximo - ciclorojo > VALCAMBIO) ? ciclorojo + VALCAMBIO
 8000aa0:	88ba      	ldrh	r2, [r7, #4]
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000aaa:	dd04      	ble.n	8000ab6 <transicion1+0x2e>
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	e000      	b.n	8000ab8 <transicion1+0x30>
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	80fb      	strh	r3, [r7, #6]
                                                      : ciclomaximo;
    TIM4->CCR2 = ciclorojo;
 8000aba:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <transicion1+0x4c>)
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	6393      	str	r3, [r2, #56]	@ 0x38
  } while (ciclorojo < ciclomaximo);
 8000ac0:	88fa      	ldrh	r2, [r7, #6]
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d3e8      	bcc.n	8000a9a <transicion1+0x12>
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40000800 	.word	0x40000800

08000ad8 <transicion2>:

/*------------- Transición 2: Disminuye amarillo a 0% -------------*/
void transicion2(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  uint16_t cicloamarillo = TIM4->CCR4;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <transicion2+0x3c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	80fb      	strh	r3, [r7, #6]

  do {
    HAL_Delay(TCAMBIO);
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f000 fb5f 	bl	80011a8 <HAL_Delay>
    cicloamarillo = (cicloamarillo > VALCAMBIO) ? cicloamarillo - VALCAMBIO : 0;
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000af0:	bf38      	it	cc
 8000af2:	f44f 7320 	movcc.w	r3, #640	@ 0x280
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000afc:	80fb      	strh	r3, [r7, #6]
    TIM4->CCR4 = cicloamarillo;
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <transicion2+0x3c>)
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	6413      	str	r3, [r2, #64]	@ 0x40
  } while (cicloamarillo > 0);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1ec      	bne.n	8000ae4 <transicion2+0xc>
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40000800 	.word	0x40000800

08000b18 <transicion3>:

/*------------- Transición 3: Aumenta verde a 100% -------------*/
void transicion3(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  uint16_t ciclomaximo = TIM4->ARR;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <transicion3+0x4c>)
 8000b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b22:	80bb      	strh	r3, [r7, #4]
  uint16_t cicloverde = TIM4->CCR1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <transicion3+0x4c>)
 8000b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b28:	80fb      	strh	r3, [r7, #6]

  do {
    HAL_Delay(TCAMBIO);
 8000b2a:	2014      	movs	r0, #20
 8000b2c:	f000 fb3c 	bl	80011a8 <HAL_Delay>
    cicloverde = (ciclomaximo - cicloverde > VALCAMBIO) ? cicloverde + VALCAMBIO
 8000b30:	88ba      	ldrh	r2, [r7, #4]
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000b3a:	dd04      	ble.n	8000b46 <transicion3+0x2e>
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	e000      	b.n	8000b48 <transicion3+0x30>
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	80fb      	strh	r3, [r7, #6]
                                                        : ciclomaximo;
    TIM4->CCR1 = cicloverde;
 8000b4a:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <transicion3+0x4c>)
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	6353      	str	r3, [r2, #52]	@ 0x34
  } while (cicloverde < ciclomaximo);
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3e8      	bcc.n	8000b2a <transicion3+0x12>
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40000800 	.word	0x40000800

08000b68 <transicion4>:

/*------------- Transición 4: Disminuye rojo a 0% -------------*/
void transicion4(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  uint16_t ciclorojo = TIM4->CCR2;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <transicion4+0x3c>)
 8000b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b72:	80fb      	strh	r3, [r7, #6]

  do {
    HAL_Delay(TCAMBIO);
 8000b74:	2014      	movs	r0, #20
 8000b76:	f000 fb17 	bl	80011a8 <HAL_Delay>
    ciclorojo = (ciclorojo > VALCAMBIO) ? ciclorojo - VALCAMBIO : 0;
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000b80:	bf38      	it	cc
 8000b82:	f44f 7320 	movcc.w	r3, #640	@ 0x280
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000b8c:	80fb      	strh	r3, [r7, #6]
    TIM4->CCR2 = ciclorojo;
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <transicion4+0x3c>)
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	6393      	str	r3, [r2, #56]	@ 0x38
  } while (ciclorojo > 0);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1ec      	bne.n	8000b74 <transicion4+0xc>
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40000800 	.word	0x40000800

08000ba8 <transicion5>:

/*------------- Transición 5: Aumenta amarillo a 100% -------------*/
void transicion5(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  uint16_t ciclomaximo = TIM4->ARR;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <transicion5+0x4c>)
 8000bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb2:	80bb      	strh	r3, [r7, #4]
  uint16_t cicloamarillo = TIM4->CCR4;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <transicion5+0x4c>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	80fb      	strh	r3, [r7, #6]

  do {
    HAL_Delay(TCAMBIO);
 8000bba:	2014      	movs	r0, #20
 8000bbc:	f000 faf4 	bl	80011a8 <HAL_Delay>
    cicloamarillo = (ciclomaximo - cicloamarillo > VALCAMBIO)
 8000bc0:	88ba      	ldrh	r2, [r7, #4]
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000bca:	dd04      	ble.n	8000bd6 <transicion5+0x2e>
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	e000      	b.n	8000bd8 <transicion5+0x30>
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	80fb      	strh	r3, [r7, #6]
                        ? cicloamarillo + VALCAMBIO
                        : ciclomaximo;
    TIM4->CCR4 = cicloamarillo;
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <transicion5+0x4c>)
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
  } while (cicloamarillo < ciclomaximo);
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d3e8      	bcc.n	8000bba <transicion5+0x12>
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40000800 	.word	0x40000800

08000bf8 <transicion6>:

/*------------- Transición 6: Disminuye verde a 0% -------------*/
void transicion6(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  uint16_t cicloverde = TIM4->CCR1;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <transicion6+0x3c>)
 8000c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c02:	80fb      	strh	r3, [r7, #6]

  do {
    HAL_Delay(TCAMBIO);
 8000c04:	2014      	movs	r0, #20
 8000c06:	f000 facf 	bl	80011a8 <HAL_Delay>
    cicloverde = (cicloverde > VALCAMBIO) ? cicloverde - VALCAMBIO : 0;
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000c10:	bf38      	it	cc
 8000c12:	f44f 7320 	movcc.w	r3, #640	@ 0x280
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000c1c:	80fb      	strh	r3, [r7, #6]
    TIM4->CCR1 = cicloverde;
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <transicion6+0x3c>)
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	6353      	str	r3, [r2, #52]	@ 0x34
  } while (cicloverde > 0);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1ec      	bne.n	8000c04 <transicion6+0xc>
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40000800 	.word	0x40000800

08000c38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	4a0f      	ldr	r2, [pc, #60]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c82:	2007      	movs	r0, #7
 8000c84:	f000 fb84 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	@ 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	@ (8000d18 <HAL_I2C_MspInit+0x84>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12c      	bne.n	8000d10 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a17      	ldr	r2, [pc, #92]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cd2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd8:	2312      	movs	r3, #18
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <HAL_I2C_MspInit+0x8c>)
 8000cf0:	f000 fb90 	bl	8001414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	@ 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	@ 0x38
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a31      	ldr	r2, [pc, #196]	@ (8000e14 <HAL_I2S_MspInit+0xf0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d15a      	bne.n	8000e0a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d58:	23c0      	movs	r3, #192	@ 0xc0
 8000d5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 f8a7 	bl	8004eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d70:	f7ff ff62 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	4a18      	ldr	r2, [pc, #96]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_I2S_MspInit+0xf4>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	480e      	ldr	r0, [pc, #56]	@ (8000e1c <HAL_I2S_MspInit+0xf8>)
 8000de4:	f000 fb16 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000de8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <HAL_I2S_MspInit+0xfc>)
 8000e06:	f000 fb05 	bl	8001414 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	@ 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40003c00 	.word	0x40003c00
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020800 	.word	0x40020800

08000e24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <HAL_SPI_MspInit+0x84>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d12b      	bne.n	8000e9e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_SPI_MspInit+0x88>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_SPI_MspInit+0x88>)
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_SPI_MspInit+0x88>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <HAL_SPI_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a10      	ldr	r2, [pc, #64]	@ (8000eac <HAL_SPI_MspInit+0x88>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_SPI_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e7e:	23e0      	movs	r3, #224	@ 0xe0
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e8e:	2305      	movs	r3, #5
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <HAL_SPI_MspInit+0x8c>)
 8000e9a:	f000 fabb 	bl	8001414 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	@ 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40013000 	.word	0x40013000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x40>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a09      	ldr	r2, [pc, #36]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x40>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x40>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40000800 	.word	0x40000800
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_TIM_MspPostInit+0x68>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d11e      	bne.n	8000f58 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000f36:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000f3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_TIM_MspPostInit+0x70>)
 8000f54:	f000 fa5e 	bl	8001414 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40000800 	.word	0x40000800
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020c00 	.word	0x40020c00

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f8d1 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <OTG_FS_IRQHandler+0x10>)
 8000fd2:	f000 feb5 	bl	8001d40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200005b8 	.word	0x200005b8

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f008 fd84 	bl	8009b1c <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	200001d4 	.word	0x200001d4
 8001048:	20000ae0 	.word	0x20000ae0

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f008 fd43 	bl	8009b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fa27 	bl	80004f4 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010b4:	08009c4c 	.word	0x08009c4c
  ldr r2, =_sbss
 80010b8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010bc:	20000ae0 	.word	0x20000ae0

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f94f 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fda4 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f967 	bl	80013fa <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001144:	f000 f92f 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	200001d8 	.word	0x200001d8

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200001d8 	.word	0x200001d8

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	@ (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	@ (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff3e 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff31 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e16b      	b.n	8001708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001430:	2201      	movs	r2, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 815a 	bne.w	8001702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d005      	beq.n	8001466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001462:	2b02      	cmp	r3, #2
 8001464:	d130      	bne.n	80014c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 0201 	and.w	r2, r3, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d017      	beq.n	8001504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d123      	bne.n	8001558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0203 	and.w	r2, r3, #3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80b4 	beq.w	8001702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_GPIO_Init+0x30c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001720 <HAL_GPIO_Init+0x30c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001720 <HAL_GPIO_Init+0x30c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001724 <HAL_GPIO_Init+0x310>)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	@ (8001728 <HAL_GPIO_Init+0x314>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d02b      	beq.n	800163a <HAL_GPIO_Init+0x226>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a51      	ldr	r2, [pc, #324]	@ (800172c <HAL_GPIO_Init+0x318>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d025      	beq.n	8001636 <HAL_GPIO_Init+0x222>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a50      	ldr	r2, [pc, #320]	@ (8001730 <HAL_GPIO_Init+0x31c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <HAL_GPIO_Init+0x21e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001734 <HAL_GPIO_Init+0x320>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_Init+0x21a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001738 <HAL_GPIO_Init+0x324>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x216>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4d      	ldr	r2, [pc, #308]	@ (800173c <HAL_GPIO_Init+0x328>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x212>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4c      	ldr	r2, [pc, #304]	@ (8001740 <HAL_GPIO_Init+0x32c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x20e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <HAL_GPIO_Init+0x330>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x20a>
 800161a:	2307      	movs	r3, #7
 800161c:	e00e      	b.n	800163c <HAL_GPIO_Init+0x228>
 800161e:	2308      	movs	r3, #8
 8001620:	e00c      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001622:	2306      	movs	r3, #6
 8001624:	e00a      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001626:	2305      	movs	r3, #5
 8001628:	e008      	b.n	800163c <HAL_GPIO_Init+0x228>
 800162a:	2304      	movs	r3, #4
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x228>
 800162e:	2303      	movs	r3, #3
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x228>
 800163a:	2300      	movs	r3, #0
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164c:	4935      	ldr	r1, [pc, #212]	@ (8001724 <HAL_GPIO_Init+0x310>)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_GPIO_Init+0x334>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167e:	4a32      	ldr	r2, [pc, #200]	@ (8001748 <HAL_GPIO_Init+0x334>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001684:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <HAL_GPIO_Init+0x334>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a8:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016fc:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3301      	adds	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b0f      	cmp	r3, #15
 800170c:	f67f ae90 	bls.w	8001430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3724      	adds	r7, #36	@ 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40013800 	.word	0x40013800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40021400 	.word	0x40021400
 8001740:	40021800 	.word	0x40021800
 8001744:	40021c00 	.word	0x40021c00
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af02      	add	r7, sp, #8
 8001784:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e059      	b.n	8001844 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d106      	bne.n	80017b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f007 fe34 	bl	8009418 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017be:	d102      	bne.n	80017c6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f004 fc41 	bl	8006052 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7c1a      	ldrb	r2, [r3, #16]
 80017d8:	f88d 2000 	strb.w	r2, [sp]
 80017dc:	3304      	adds	r3, #4
 80017de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e0:	f004 fbc2 	bl	8005f68 <USB_CoreInit>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2202      	movs	r2, #2
 80017ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e026      	b.n	8001844 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 fc39 	bl	8006074 <USB_SetCurrentMode>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e017      	b.n	8001844 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7c1a      	ldrb	r2, [r3, #16]
 800181c:	f88d 2000 	strb.w	r2, [sp]
 8001820:	3304      	adds	r3, #4
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	f004 fde2 	bl	80063ec <USB_HostInit>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2202      	movs	r2, #2
 8001832:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e004      	b.n	8001844 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b08b      	sub	sp, #44	@ 0x2c
 8001850:	af04      	add	r7, sp, #16
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4603      	mov	r3, r0
 800185c:	70fb      	strb	r3, [r7, #3]
 800185e:	460b      	mov	r3, r1
 8001860:	70bb      	strb	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001866:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001868:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_HCD_HC_Init+0x2c>
 8001874:	2302      	movs	r3, #2
 8001876:	e09d      	b.n	80019b4 <HAL_HCD_HC_Init+0x168>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3319      	adds	r3, #25
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3314      	adds	r3, #20
 80018a4:	787a      	ldrb	r2, [r7, #1]
 80018a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	3315      	adds	r3, #21
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3326      	adds	r3, #38	@ 0x26
 80018cc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80018d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	78bb      	ldrb	r3, [r7, #2]
 80018d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018da:	b2d8      	uxtb	r0, r3
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	3316      	adds	r3, #22
 80018ea:	4602      	mov	r2, r0
 80018ec:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fbc8 	bl	8002088 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80018f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da0a      	bge.n	8001916 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3317      	adds	r3, #23
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e009      	b.n	800192a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3317      	adds	r3, #23
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f004 fec0 	bl	80066b4 <USB_GetHostSpeed>
 8001934:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001936:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d10b      	bne.n	8001956 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800193e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_HCD_HC_Init+0x10a>
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d104      	bne.n	8001956 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001950:	d901      	bls.n	8001956 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001952:	23bc      	movs	r3, #188	@ 0xbc
 8001954:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3318      	adds	r3, #24
 8001966:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800196a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	b298      	uxth	r0, r3
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3328      	adds	r3, #40	@ 0x28
 8001980:	4602      	mov	r2, r0
 8001982:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	b29b      	uxth	r3, r3
 800198c:	787c      	ldrb	r4, [r7, #1]
 800198e:	78ba      	ldrb	r2, [r7, #2]
 8001990:	78f9      	ldrb	r1, [r7, #3]
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4623      	mov	r3, r4
 80019a2:	f004 feaf 	bl	8006704 <USB_HC_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}

080019bc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_HCD_HC_Halt+0x1e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e00f      	b.n	80019fa <HAL_HCD_HC_Halt+0x3e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 fa41 	bl	8006e72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	70fb      	strb	r3, [r7, #3]
 8001a16:	460b      	mov	r3, r1
 8001a18:	70bb      	strb	r3, [r7, #2]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3317      	adds	r3, #23
 8001a2e:	78ba      	ldrb	r2, [r7, #2]
 8001a30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3326      	adds	r3, #38	@ 0x26
 8001a42:	787a      	ldrb	r2, [r7, #1]
 8001a44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a46:	7c3b      	ldrb	r3, [r7, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d114      	bne.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	332a      	adds	r3, #42	@ 0x2a
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3319      	adds	r3, #25
 8001a70:	7f3a      	ldrb	r2, [r7, #28]
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e009      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	332a      	adds	r3, #42	@ 0x2a
 8001a86:	2202      	movs	r2, #2
 8001a88:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a8a:	787b      	ldrb	r3, [r7, #1]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	f200 8102 	bhi.w	8001c96 <HAL_HCD_HC_SubmitRequest+0x292>
 8001a92:	a201      	add	r2, pc, #4	@ (adr r2, 8001a98 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001c81 	.word	0x08001c81
 8001aa0:	08001b6d 	.word	0x08001b6d
 8001aa4:	08001bf7 	.word	0x08001bf7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001aa8:	7c3b      	ldrb	r3, [r7, #16]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 80f5 	bne.w	8001c9a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ab0:	78bb      	ldrb	r3, [r7, #2]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d12d      	bne.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001ab6:	8b3b      	ldrh	r3, [r7, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	333d      	adds	r3, #61	@ 0x3d
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	333d      	adds	r3, #61	@ 0x3d
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	332a      	adds	r3, #42	@ 0x2a
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001afa:	e0ce      	b.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	332a      	adds	r3, #42	@ 0x2a
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	701a      	strb	r2, [r3, #0]
      break;
 8001b10:	e0c3      	b.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	331a      	adds	r3, #26
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	f040 80b8 	bne.w	8001c9a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	333c      	adds	r3, #60	@ 0x3c
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	332a      	adds	r3, #42	@ 0x2a
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
      break;
 8001b54:	e0a1      	b.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	332a      	adds	r3, #42	@ 0x2a
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
      break;
 8001b6a:	e096      	b.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b6c:	78bb      	ldrb	r3, [r7, #2]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d120      	bne.n	8001bb4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	333d      	adds	r3, #61	@ 0x3d
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	332a      	adds	r3, #42	@ 0x2a
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b9c:	e07e      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	332a      	adds	r3, #42	@ 0x2a
 8001bae:	2202      	movs	r2, #2
 8001bb0:	701a      	strb	r2, [r3, #0]
      break;
 8001bb2:	e073      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	333c      	adds	r3, #60	@ 0x3c
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10a      	bne.n	8001be0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	332a      	adds	r3, #42	@ 0x2a
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
      break;
 8001bde:	e05d      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	332a      	adds	r3, #42	@ 0x2a
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	701a      	strb	r2, [r3, #0]
      break;
 8001bf4:	e052      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bf6:	78bb      	ldrb	r3, [r7, #2]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d120      	bne.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	333d      	adds	r3, #61	@ 0x3d
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10a      	bne.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	332a      	adds	r3, #42	@ 0x2a
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c26:	e039      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	332a      	adds	r3, #42	@ 0x2a
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
      break;
 8001c3c:	e02e      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	333c      	adds	r3, #60	@ 0x3c
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10a      	bne.n	8001c6a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	332a      	adds	r3, #42	@ 0x2a
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
      break;
 8001c68:	e018      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	332a      	adds	r3, #42	@ 0x2a
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	701a      	strb	r2, [r3, #0]
      break;
 8001c7e:	e00d      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	332a      	adds	r3, #42	@ 0x2a
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
      break;
 8001c94:	e002      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c96:	bf00      	nop
 8001c98:	e000      	b.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c9a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	332c      	adds	r3, #44	@ 0x2c
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	8b39      	ldrh	r1, [r7, #24]
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4403      	add	r3, r0
 8001cc0:	3334      	adds	r3, #52	@ 0x34
 8001cc2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	334c      	adds	r3, #76	@ 0x4c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3338      	adds	r3, #56	@ 0x38
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3315      	adds	r3, #21
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	334d      	adds	r3, #77	@ 0x4d
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	3310      	adds	r3, #16
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	1d19      	adds	r1, r3, #4
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	799b      	ldrb	r3, [r3, #6]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f004 fe14 	bl	800695c <USB_HC_StartXfer>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop

08001d40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fb02 	bl	8006360 <USB_GetMode>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f040 80fb 	bne.w	8001f5a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fac5 	bl	80062f8 <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80f1 	beq.w	8001f58 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fabc 	bl	80062f8 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d8a:	d104      	bne.n	8001d96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 faac 	bl	80062f8 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001daa:	d104      	bne.n	8001db6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001db4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fa9c 	bl	80062f8 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001dca:	d104      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fa8c 	bl	80062f8 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d103      	bne.n	8001df2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2202      	movs	r2, #2
 8001df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fa7e 	bl	80062f8 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e06:	d120      	bne.n	8001e4a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d113      	bne.n	8001e4a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e22:	2110      	movs	r1, #16
 8001e24:	6938      	ldr	r0, [r7, #16]
 8001e26:	f004 f971 	bl	800610c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e2a:	6938      	ldr	r0, [r7, #16]
 8001e2c:	f004 f9a0 	bl	8006170 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7a5b      	ldrb	r3, [r3, #9]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d105      	bne.n	8001e44 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fb98 	bl	8006574 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f007 fb65 	bl	8009514 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 fa52 	bl	80062f8 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e5e:	d102      	bne.n	8001e66 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f001 fd4d 	bl	8003900 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 fa44 	bl	80062f8 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d106      	bne.n	8001e88 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f007 fb2e 	bl	80094dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2208      	movs	r2, #8
 8001e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fa33 	bl	80062f8 <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e9c:	d139      	bne.n	8001f12 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 ffd4 	bl	8006e50 <USB_HC_ReadInterrupt>
 8001ea8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e025      	b.n	8001efc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d018      	beq.n	8001ef6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eda:	d106      	bne.n	8001eea <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f905 	bl	80020f2 <HCD_HC_IN_IRQHandler>
 8001ee8:	e005      	b.n	8001ef6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 ff67 	bl	8002dc4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	795b      	ldrb	r3, [r3, #5]
 8001f00:	461a      	mov	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d3d3      	bcc.n	8001eb0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 f9ee 	bl	80062f8 <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d101      	bne.n	8001f2a <HAL_HCD_IRQHandler+0x1ea>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_HCD_IRQHandler+0x1ec>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d014      	beq.n	8001f5a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0210 	bic.w	r2, r2, #16
 8001f3e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f001 fbfe 	bl	8003742 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0210 	orr.w	r2, r2, #16
 8001f54:	619a      	str	r2, [r3, #24]
 8001f56:	e000      	b.n	8001f5a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001f58:	bf00      	nop
    }
  }
}
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_HCD_Start+0x16>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e013      	b.n	8001f9e <HAL_HCD_Start+0x3e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fb5c 	bl	8006642 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 f84e 	bl	8006030 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_HCD_Stop+0x16>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e00d      	b.n	8001fd8 <HAL_HCD_Stop+0x32>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 f8af 	bl	800712c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fafe 	bl	80065ee <USB_ResetPort>
 8001ff2:	4603      	mov	r3, r0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	334c      	adds	r3, #76	@ 0x4c
 8002018:	781b      	ldrb	r3, [r3, #0]
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3338      	adds	r3, #56	@ 0x38
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 fb40 	bl	80066e2 <USB_GetCurrentFrame>
 8002062:	4603      	mov	r3, r0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f004 fb1b 	bl	80066b4 <USB_GetHostSpeed>
 800207e:	4603      	mov	r3, r0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	331a      	adds	r3, #26
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	331b      	adds	r3, #27
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3325      	adds	r3, #37	@ 0x25
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3324      	adds	r3, #36	@ 0x24
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f004 f904 	bl	800631e <USB_ReadChInterrupts>
 8002116:	4603      	mov	r3, r0
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11a      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	2304      	movs	r3, #4
 8002130:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	334d      	adds	r3, #77	@ 0x4d
 8002142:	2207      	movs	r2, #7
 8002144:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f004 fe8f 	bl	8006e72 <USB_HC_Halt>
 8002154:	e09e      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f004 f8dd 	bl	800631e <USB_ReadChInterrupts>
 8002164:	4603      	mov	r3, r0
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800216e:	d11b      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217c:	461a      	mov	r2, r3
 800217e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002182:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	334d      	adds	r3, #77	@ 0x4d
 8002194:	2208      	movs	r2, #8
 8002196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 fe66 	bl	8006e72 <USB_HC_Halt>
 80021a6:	e075      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 f8b4 	bl	800631e <USB_ReadChInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d11a      	bne.n	80021f6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021cc:	461a      	mov	r2, r3
 80021ce:	2308      	movs	r3, #8
 80021d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	334d      	adds	r3, #77	@ 0x4d
 80021e2:	2206      	movs	r2, #6
 80021e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fe3f 	bl	8006e72 <USB_HC_Halt>
 80021f4:	e04e      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 f88d 	bl	800631e <USB_ReadChInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220e:	d11b      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002222:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	334d      	adds	r3, #77	@ 0x4d
 8002234:	2209      	movs	r2, #9
 8002236:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f004 fe16 	bl	8006e72 <USB_HC_Halt>
 8002246:	e025      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f004 f864 	bl	800631e <USB_ReadChInterrupts>
 8002256:	4603      	mov	r3, r0
 8002258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225c:	2b80      	cmp	r3, #128	@ 0x80
 800225e:	d119      	bne.n	8002294 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	2380      	movs	r3, #128	@ 0x80
 8002270:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	334d      	adds	r3, #77	@ 0x4d
 8002282:	2207      	movs	r2, #7
 8002284:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f004 fdef 	bl	8006e72 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f004 f83e 	bl	800631e <USB_ReadChInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ac:	d112      	bne.n	80022d4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 fddb 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c8:	461a      	mov	r2, r3
 80022ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	f000 bd75 	b.w	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 f81e 	bl	800631e <USB_ReadChInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	f040 8128 	bne.w	800253e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2320      	movs	r3, #32
 80022fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	331b      	adds	r3, #27
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d119      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	331b      	adds	r3, #27
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	440a      	add	r2, r1
 8002340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002348:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	799b      	ldrb	r3, [r3, #6]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01b      	beq.n	800238a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3330      	adds	r3, #48	@ 0x30
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	1ac9      	subs	r1, r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4403      	add	r3, r0
 8002386:	3338      	adds	r3, #56	@ 0x38
 8002388:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	334d      	adds	r3, #77	@ 0x4d
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3344      	adds	r3, #68	@ 0x44
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023be:	461a      	mov	r2, r3
 80023c0:	2301      	movs	r3, #1
 80023c2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3326      	adds	r3, #38	@ 0x26
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3326      	adds	r3, #38	@ 0x26
 80023ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d110      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 fd3a 	bl	8006e72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	2310      	movs	r3, #16
 800240e:	6093      	str	r3, [r2, #8]
 8002410:	e03d      	b.n	800248e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	3326      	adds	r3, #38	@ 0x26
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d00a      	beq.n	800243e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3326      	adds	r3, #38	@ 0x26
 8002438:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800243a:	2b01      	cmp	r3, #1
 800243c:	d127      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	0151      	lsls	r1, r2, #5
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	440a      	add	r2, r1
 8002454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002458:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800245c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	334c      	adds	r3, #76	@ 0x4c
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	334c      	adds	r3, #76	@ 0x4c
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f007 f851 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	799b      	ldrb	r3, [r3, #6]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d13b      	bne.n	800250e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3338      	adds	r3, #56	@ 0x38
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4403      	add	r3, r0
 80024b6:	3328      	adds	r3, #40	@ 0x28
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	440b      	add	r3, r1
 80024bc:	1e59      	subs	r1, r3, #1
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4403      	add	r3, r0
 80024cc:	3328      	adds	r3, #40	@ 0x28
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8470 	beq.w	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	333c      	adds	r3, #60	@ 0x3c
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	f083 0301 	eor.w	r3, r3, #1
 80024f6:	b2d8      	uxtb	r0, r3
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	333c      	adds	r3, #60	@ 0x3c
 8002506:	4602      	mov	r2, r0
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	f000 bc58 	b.w	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	333c      	adds	r3, #60	@ 0x3c
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2d8      	uxtb	r0, r3
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	333c      	adds	r3, #60	@ 0x3c
 8002536:	4602      	mov	r2, r0
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	f000 bc40 	b.w	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fee9 	bl	800631e <USB_ReadChInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b20      	cmp	r3, #32
 8002554:	d131      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002562:	461a      	mov	r2, r3
 8002564:	2320      	movs	r3, #32
 8002566:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	331a      	adds	r3, #26
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	f040 841f 	bne.w	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	331b      	adds	r3, #27
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	334d      	adds	r3, #77	@ 0x4d
 80025a4:	2203      	movs	r2, #3
 80025a6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 fc5e 	bl	8006e72 <USB_HC_Halt>
 80025b6:	f000 bc02 	b.w	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 feab 	bl	800631e <USB_ReadChInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	f040 8305 	bne.w	8002bde <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2302      	movs	r3, #2
 80025e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	334d      	adds	r3, #77	@ 0x4d
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d114      	bne.n	8002626 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	334d      	adds	r3, #77	@ 0x4d
 800260c:	2202      	movs	r2, #2
 800260e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	334c      	adds	r3, #76	@ 0x4c
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e2cc      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	334d      	adds	r3, #77	@ 0x4d
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d114      	bne.n	8002666 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334d      	adds	r3, #77	@ 0x4d
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	334c      	adds	r3, #76	@ 0x4c
 8002660:	2205      	movs	r2, #5
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e2ac      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	334d      	adds	r3, #77	@ 0x4d
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b07      	cmp	r3, #7
 800267a:	d00b      	beq.n	8002694 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	334d      	adds	r3, #77	@ 0x4d
 800268c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800268e:	2b09      	cmp	r3, #9
 8002690:	f040 80a6 	bne.w	80027e0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	334d      	adds	r3, #77	@ 0x4d
 80026a4:	2202      	movs	r2, #2
 80026a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3344      	adds	r3, #68	@ 0x44
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c59      	adds	r1, r3, #1
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4403      	add	r3, r0
 80026c8:	3344      	adds	r3, #68	@ 0x44
 80026ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3344      	adds	r3, #68	@ 0x44
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d943      	bls.n	800276a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3344      	adds	r3, #68	@ 0x44
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	331a      	adds	r3, #26
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d123      	bne.n	8002754 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	331b      	adds	r3, #27
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	331c      	adds	r3, #28
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	0151      	lsls	r1, r2, #5
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	440a      	add	r2, r1
 800274a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800274e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002752:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	334c      	adds	r3, #76	@ 0x4c
 8002764:	2204      	movs	r2, #4
 8002766:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002768:	e229      	b.n	8002bbe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334c      	adds	r3, #76	@ 0x4c
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	3326      	adds	r3, #38	@ 0x26
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3326      	adds	r3, #38	@ 0x26
 80027a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	f040 8209 	bne.w	8002bbe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d8:	461a      	mov	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027de:	e1ee      	b.n	8002bbe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	334d      	adds	r3, #77	@ 0x4d
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	f040 80c8 	bne.w	8002988 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	334d      	adds	r3, #77	@ 0x4d
 8002808:	2202      	movs	r2, #2
 800280a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	331b      	adds	r3, #27
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 81ce 	bne.w	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3326      	adds	r3, #38	@ 0x26
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d16b      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3348      	adds	r3, #72	@ 0x48
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1c59      	adds	r1, r3, #1
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4403      	add	r3, r0
 800285a:	3348      	adds	r3, #72	@ 0x48
 800285c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3348      	adds	r3, #72	@ 0x48
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d943      	bls.n	80028fc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3348      	adds	r3, #72	@ 0x48
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	331b      	adds	r3, #27
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3344      	adds	r3, #68	@ 0x44
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d809      	bhi.n	80028c6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	331c      	adds	r3, #28
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	0151      	lsls	r1, r2, #5
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	440a      	add	r2, r1
 80028dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	334c      	adds	r3, #76	@ 0x4c
 80028f6:	2204      	movs	r2, #4
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e014      	b.n	8002926 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	334c      	adds	r3, #76	@ 0x4c
 800290c:	2202      	movs	r2, #2
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	e009      	b.n	8002926 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	334c      	adds	r3, #76	@ 0x4c
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3326      	adds	r3, #38	@ 0x26
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3326      	adds	r3, #38	@ 0x26
 800294c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 8136 	bne.w	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800296a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002972:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e11b      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334d      	adds	r3, #77	@ 0x4d
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b03      	cmp	r3, #3
 800299c:	f040 8081 	bne.w	8002aa2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	334d      	adds	r3, #77	@ 0x4d
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	331b      	adds	r3, #27
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80fa 	bne.w	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	334c      	adds	r3, #76	@ 0x4c
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	0151      	lsls	r1, r2, #5
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	440a      	add	r2, r1
 80029f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fe:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	0151      	lsls	r1, r2, #5
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	440a      	add	r2, r1
 8002a16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a1e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a3a:	f023 0320 	bic.w	r3, r3, #32
 8002a3e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3326      	adds	r3, #38	@ 0x26
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3326      	adds	r3, #38	@ 0x26
 8002a66:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	f040 80a9 	bne.w	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a84:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a8c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e08e      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	334d      	adds	r3, #77	@ 0x4d
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d143      	bne.n	8002b40 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334d      	adds	r3, #77	@ 0x4d
 8002ac8:	2202      	movs	r2, #2
 8002aca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334c      	adds	r3, #76	@ 0x4c
 8002adc:	2202      	movs	r2, #2
 8002ade:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3326      	adds	r3, #38	@ 0x26
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3326      	adds	r3, #38	@ 0x26
 8002b06:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d159      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b22:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b2a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e03f      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	334d      	adds	r3, #77	@ 0x4d
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d126      	bne.n	8002ba4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	334d      	adds	r3, #77	@ 0x4d
 8002b66:	2202      	movs	r2, #2
 8002b68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3344      	adds	r3, #68	@ 0x44
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c59      	adds	r1, r3, #1
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4403      	add	r3, r0
 8002b8a:	3344      	adds	r3, #68	@ 0x44
 8002b8c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	334c      	adds	r3, #76	@ 0x4c
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e00d      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	334d      	adds	r3, #77	@ 0x4d
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	f000 8100 	beq.w	8002dbc <HCD_HC_IN_IRQHandler+0xcca>
 8002bbc:	e000      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bbe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	334c      	adds	r3, #76	@ 0x4c
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f006 fcaa 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bdc:	e0ef      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fb99 	bl	800631e <USB_ReadChInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b40      	cmp	r3, #64	@ 0x40
 8002bf4:	d12f      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c02:	461a      	mov	r2, r3
 8002c04:	2340      	movs	r3, #64	@ 0x40
 8002c06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334d      	adds	r3, #77	@ 0x4d
 8002c18:	2205      	movs	r2, #5
 8002c1a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	331a      	adds	r3, #26
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3344      	adds	r3, #68	@ 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 f90f 	bl	8006e72 <USB_HC_Halt>
 8002c54:	e0b3      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fb5d 	bl	800631e <USB_ReadChInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	f040 80a7 	bne.w	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3326      	adds	r3, #38	@ 0x26
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d11b      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3344      	adds	r3, #68	@ 0x44
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	334d      	adds	r3, #77	@ 0x4d
 8002caa:	2204      	movs	r2, #4
 8002cac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 f8db 	bl	8006e72 <USB_HC_Halt>
 8002cbc:	e03f      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3326      	adds	r3, #38	@ 0x26
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3326      	adds	r3, #38	@ 0x26
 8002ce4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d129      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3344      	adds	r3, #68	@ 0x44
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	799b      	ldrb	r3, [r3, #6]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HCD_HC_IN_IRQHandler+0xc2a>
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	331b      	adds	r3, #27
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d110      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	334d      	adds	r3, #77	@ 0x4d
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f89a 	bl	8006e72 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	331b      	adds	r3, #27
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d129      	bne.n	8002da8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	331b      	adds	r3, #27
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d86:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	0151      	lsls	r1, r2, #5
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	440a      	add	r2, r1
 8002d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002da2:	f043 0320 	orr.w	r3, r3, #32
 8002da6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	2310      	movs	r3, #16
 8002db8:	6093      	str	r3, [r2, #8]
 8002dba:	e000      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002dbc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fa9b 	bl	800631e <USB_ReadChInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d11b      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2304      	movs	r3, #4
 8002e02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334d      	adds	r3, #77	@ 0x4d
 8002e14:	2207      	movs	r2, #7
 8002e16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 f826 	bl	8006e72 <USB_HC_Halt>
 8002e26:	f000 bc89 	b.w	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 fa73 	bl	800631e <USB_ReadChInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 8082 	bne.w	8002f48 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2320      	movs	r3, #32
 8002e54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3319      	adds	r3, #25
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d124      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3319      	adds	r3, #25
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334c      	adds	r3, #76	@ 0x4c
 8002e90:	2202      	movs	r2, #2
 8002e92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334d      	adds	r3, #77	@ 0x4d
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 ffde 	bl	8006e72 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	331a      	adds	r3, #26
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 8437 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x978>
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	331b      	adds	r3, #27
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 842b 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3326      	adds	r3, #38	@ 0x26
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d009      	beq.n	8002f10 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	331b      	adds	r3, #27
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	334d      	adds	r3, #77	@ 0x4d
 8002f20:	2203      	movs	r2, #3
 8002f22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 ffa0 	bl	8006e72 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3344      	adds	r3, #68	@ 0x44
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e3f9      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 f9e4 	bl	800631e <USB_ReadChInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f60:	d111      	bne.n	8002f86 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 ff77 	bl	8006e72 <USB_HC_Halt>
 8002f84:	e3da      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 f9c5 	bl	800631e <USB_ReadChInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d168      	bne.n	8003070 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3344      	adds	r3, #68	@ 0x44
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 f9af 	bl	800631e <USB_ReadChInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	d112      	bne.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3319      	adds	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	2340      	movs	r3, #64	@ 0x40
 8002fee:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	331b      	adds	r3, #27
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d019      	beq.n	800303a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	331b      	adds	r3, #27
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	0151      	lsls	r1, r2, #5
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	440a      	add	r2, r1
 8003030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003038:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003046:	461a      	mov	r2, r3
 8003048:	2301      	movs	r3, #1
 800304a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	334d      	adds	r3, #77	@ 0x4d
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f003 ff02 	bl	8006e72 <USB_HC_Halt>
 800306e:	e365      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f950 	bl	800631e <USB_ReadChInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003084:	2b40      	cmp	r3, #64	@ 0x40
 8003086:	d139      	bne.n	80030fc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	334d      	adds	r3, #77	@ 0x4d
 8003098:	2205      	movs	r2, #5
 800309a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	331a      	adds	r3, #26
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3319      	adds	r3, #25
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	3344      	adds	r3, #68	@ 0x44
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fec5 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	2340      	movs	r3, #64	@ 0x40
 80030f8:	6093      	str	r3, [r2, #8]
 80030fa:	e31f      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f003 f90a 	bl	800631e <USB_ReadChInterrupts>
 800310a:	4603      	mov	r3, r0
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b08      	cmp	r3, #8
 8003112:	d11a      	bne.n	800314a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	2308      	movs	r3, #8
 8003124:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	334d      	adds	r3, #77	@ 0x4d
 8003136:	2206      	movs	r2, #6
 8003138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f003 fe95 	bl	8006e72 <USB_HC_Halt>
 8003148:	e2f8      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f003 f8e3 	bl	800631e <USB_ReadChInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b10      	cmp	r3, #16
 8003160:	d144      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3344      	adds	r3, #68	@ 0x44
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334d      	adds	r3, #77	@ 0x4d
 8003186:	2204      	movs	r2, #4
 8003188:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3319      	adds	r3, #25
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d114      	bne.n	80031ca <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3318      	adds	r3, #24
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3319      	adds	r3, #25
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 fe4d 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e4:	461a      	mov	r2, r3
 80031e6:	2310      	movs	r3, #16
 80031e8:	6093      	str	r3, [r2, #8]
 80031ea:	e2a7      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 f892 	bl	800631e <USB_ReadChInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003200:	2b80      	cmp	r3, #128	@ 0x80
 8003202:	f040 8083 	bne.w	800330c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	799b      	ldrb	r3, [r3, #6]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d111      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	334d      	adds	r3, #77	@ 0x4d
 800321e:	2207      	movs	r2, #7
 8003220:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fe21 	bl	8006e72 <USB_HC_Halt>
 8003230:	e062      	b.n	80032f8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3344      	adds	r3, #68	@ 0x44
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1c59      	adds	r1, r3, #1
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4403      	add	r3, r0
 8003252:	3344      	adds	r3, #68	@ 0x44
 8003254:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	3344      	adds	r3, #68	@ 0x44
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d922      	bls.n	80032b2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3344      	adds	r3, #68	@ 0x44
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	334c      	adds	r3, #76	@ 0x4c
 8003290:	2204      	movs	r2, #4
 8003292:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334c      	adds	r3, #76	@ 0x4c
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f006 f940 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032b0:	e022      	b.n	80032f8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	334c      	adds	r3, #76	@ 0x4c
 80032c2:	2202      	movs	r2, #2
 80032c4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032dc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032e4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	6093      	str	r3, [r2, #8]
 800330a:	e217      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f003 f802 	bl	800631e <USB_ReadChInterrupts>
 800331a:	4603      	mov	r3, r0
 800331c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003324:	d11b      	bne.n	800335e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334d      	adds	r3, #77	@ 0x4d
 8003336:	2209      	movs	r2, #9
 8003338:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f003 fd95 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800335a:	6093      	str	r3, [r2, #8]
 800335c:	e1ee      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f002 ffd9 	bl	800631e <USB_ReadChInterrupts>
 800336c:	4603      	mov	r3, r0
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	f040 81df 	bne.w	8003736 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	2302      	movs	r3, #2
 8003388:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334d      	adds	r3, #77	@ 0x4d
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 8093 	bne.w	80034c8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334d      	adds	r3, #77	@ 0x4d
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	334c      	adds	r3, #76	@ 0x4c
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	3326      	adds	r3, #38	@ 0x26
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d00b      	beq.n	80033f8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3326      	adds	r3, #38	@ 0x26
 80033f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	f040 8190 	bne.w	8003718 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	799b      	ldrb	r3, [r3, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d115      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	333d      	adds	r3, #61	@ 0x3d
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	f083 0301 	eor.w	r3, r3, #1
 8003418:	b2d8      	uxtb	r0, r3
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	333d      	adds	r3, #61	@ 0x3d
 8003428:	4602      	mov	r2, r0
 800342a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	799b      	ldrb	r3, [r3, #6]
 8003430:	2b01      	cmp	r3, #1
 8003432:	f040 8171 	bne.w	8003718 <HCD_HC_OUT_IRQHandler+0x954>
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3334      	adds	r3, #52	@ 0x34
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8165 	beq.w	8003718 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3334      	adds	r3, #52	@ 0x34
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	3328      	adds	r3, #40	@ 0x28
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	440b      	add	r3, r1
 8003474:	1e59      	subs	r1, r3, #1
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4403      	add	r3, r0
 8003484:	3328      	adds	r3, #40	@ 0x28
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	fbb1 f3f3 	udiv	r3, r1, r3
 800348c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 813f 	beq.w	8003718 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	333d      	adds	r3, #61	@ 0x3d
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	f083 0301 	eor.w	r3, r3, #1
 80034b2:	b2d8      	uxtb	r0, r3
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	333d      	adds	r3, #61	@ 0x3d
 80034c2:	4602      	mov	r2, r0
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e127      	b.n	8003718 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	334d      	adds	r3, #77	@ 0x4d
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d120      	bne.n	8003520 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	334d      	adds	r3, #77	@ 0x4d
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	331b      	adds	r3, #27
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	f040 8107 	bne.w	8003718 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	334c      	adds	r3, #76	@ 0x4c
 800351a:	2202      	movs	r2, #2
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e0fb      	b.n	8003718 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	334d      	adds	r3, #77	@ 0x4d
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d13a      	bne.n	80035ac <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	334d      	adds	r3, #77	@ 0x4d
 8003546:	2202      	movs	r2, #2
 8003548:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	334c      	adds	r3, #76	@ 0x4c
 800355a:	2202      	movs	r2, #2
 800355c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	331b      	adds	r3, #27
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	f040 80d1 	bne.w	8003718 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	331b      	adds	r3, #27
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a8:	6053      	str	r3, [r2, #4]
 80035aa:	e0b5      	b.n	8003718 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334d      	adds	r3, #77	@ 0x4d
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d114      	bne.n	80035ec <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	334d      	adds	r3, #77	@ 0x4d
 80035d2:	2202      	movs	r2, #2
 80035d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334c      	adds	r3, #76	@ 0x4c
 80035e6:	2202      	movs	r2, #2
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e095      	b.n	8003718 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	@ 0x4d
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d114      	bne.n	800362c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	334d      	adds	r3, #77	@ 0x4d
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	334c      	adds	r3, #76	@ 0x4c
 8003626:	2205      	movs	r2, #5
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e075      	b.n	8003718 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	334d      	adds	r3, #77	@ 0x4d
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b07      	cmp	r3, #7
 8003640:	d00a      	beq.n	8003658 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	334d      	adds	r3, #77	@ 0x4d
 8003652:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003654:	2b09      	cmp	r3, #9
 8003656:	d170      	bne.n	800373a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	334d      	adds	r3, #77	@ 0x4d
 8003668:	2202      	movs	r2, #2
 800366a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3344      	adds	r3, #68	@ 0x44
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4403      	add	r3, r0
 800368c:	3344      	adds	r3, #68	@ 0x44
 800368e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3344      	adds	r3, #68	@ 0x44
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d914      	bls.n	80036d0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3344      	adds	r3, #68	@ 0x44
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	334c      	adds	r3, #76	@ 0x4c
 80036ca:	2204      	movs	r2, #4
 80036cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036ce:	e022      	b.n	8003716 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	334c      	adds	r3, #76	@ 0x4c
 80036e0:	2202      	movs	r2, #2
 80036e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003702:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003716:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	334c      	adds	r3, #76	@ 0x4c
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f005 fefe 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003734:	e002      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800373a:	bf00      	nop
  }
}
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b08a      	sub	sp, #40	@ 0x28
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	0c5b      	lsrs	r3, r3, #17
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003776:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d004      	beq.n	8003788 <HCD_RXQLVL_IRQHandler+0x46>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b05      	cmp	r3, #5
 8003782:	f000 80b6 	beq.w	80038f2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003786:	e0b7      	b.n	80038f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80b3 	beq.w	80038f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	332c      	adds	r3, #44	@ 0x2c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80a7 	beq.w	80038f6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3338      	adds	r3, #56	@ 0x38
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	18d1      	adds	r1, r2, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4403      	add	r3, r0
 80037cc:	3334      	adds	r3, #52	@ 0x34
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4299      	cmp	r1, r3
 80037d2:	f200 8083 	bhi.w	80038dc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	332c      	adds	r3, #44	@ 0x2c
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	b292      	uxth	r2, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f002 fd29 	bl	8006248 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	332c      	adds	r3, #44	@ 0x2c
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	18d1      	adds	r1, r2, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4403      	add	r3, r0
 800381a:	332c      	adds	r3, #44	@ 0x2c
 800381c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3338      	adds	r3, #56	@ 0x38
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	18d1      	adds	r1, r2, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	3338      	adds	r3, #56	@ 0x38
 8003844:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	0cdb      	lsrs	r3, r3, #19
 8003856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800385a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4613      	mov	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	3328      	adds	r3, #40	@ 0x28
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4293      	cmp	r3, r2
 8003874:	d13f      	bne.n	80038f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d03c      	beq.n	80038f6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	4413      	add	r3, r2
 8003884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003892:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800389a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	333c      	adds	r3, #60	@ 0x3c
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	f083 0301 	eor.w	r3, r3, #1
 80038c4:	b2d8      	uxtb	r0, r3
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	333c      	adds	r3, #60	@ 0x3c
 80038d6:	4602      	mov	r2, r0
 80038d8:	701a      	strb	r2, [r3, #0]
      break;
 80038da:	e00c      	b.n	80038f6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	334c      	adds	r3, #76	@ 0x4c
 80038ec:	2204      	movs	r2, #4
 80038ee:	701a      	strb	r2, [r3, #0]
      break;
 80038f0:	e001      	b.n	80038f6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80038f6:	bf00      	nop
  }
}
 80038f8:	bf00      	nop
 80038fa:	3728      	adds	r7, #40	@ 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800392c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d10b      	bne.n	8003950 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f005 fdd8 	bl	80094f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b08      	cmp	r3, #8
 8003958:	d132      	bne.n	80039c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d126      	bne.n	80039ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7a5b      	ldrb	r3, [r3, #9]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d113      	bne.n	800399c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800397a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800397e:	d106      	bne.n	800398e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f002 fdf4 	bl	8006574 <USB_InitFSLSPClkSel>
 800398c:	e011      	b.n	80039b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f002 fded 	bl	8006574 <USB_InitFSLSPClkSel>
 800399a:	e00a      	b.n	80039b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	79db      	ldrb	r3, [r3, #7]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039aa:	461a      	mov	r2, r3
 80039ac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80039b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f005 fdca 	bl	800954c <HAL_HCD_PortEnabled_Callback>
 80039b8:	e002      	b.n	80039c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f005 fdd4 	bl	8009568 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d103      	bne.n	80039d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e12b      	b.n	8003c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd f940 	bl	8000c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	@ 0x24
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f001 fa20 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8003a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4a81      	ldr	r2, [pc, #516]	@ (8003c5c <HAL_I2C_Init+0x274>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d807      	bhi.n	8003a6c <HAL_I2C_Init+0x84>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a80      	ldr	r2, [pc, #512]	@ (8003c60 <HAL_I2C_Init+0x278>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	bf94      	ite	ls
 8003a64:	2301      	movls	r3, #1
 8003a66:	2300      	movhi	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e006      	b.n	8003a7a <HAL_I2C_Init+0x92>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a7d      	ldr	r2, [pc, #500]	@ (8003c64 <HAL_I2C_Init+0x27c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	bf94      	ite	ls
 8003a74:	2301      	movls	r3, #1
 8003a76:	2300      	movhi	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0e7      	b.n	8003c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a78      	ldr	r2, [pc, #480]	@ (8003c68 <HAL_I2C_Init+0x280>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0c9b      	lsrs	r3, r3, #18
 8003a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c5c <HAL_I2C_Init+0x274>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d802      	bhi.n	8003abc <HAL_I2C_Init+0xd4>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	e009      	b.n	8003ad0 <HAL_I2C_Init+0xe8>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	4a69      	ldr	r2, [pc, #420]	@ (8003c6c <HAL_I2C_Init+0x284>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	3301      	adds	r3, #1
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ae2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	495c      	ldr	r1, [pc, #368]	@ (8003c5c <HAL_I2C_Init+0x274>)
 8003aec:	428b      	cmp	r3, r1
 8003aee:	d819      	bhi.n	8003b24 <HAL_I2C_Init+0x13c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1e59      	subs	r1, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b04:	400b      	ands	r3, r1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_I2C_Init+0x138>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e59      	subs	r1, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1e:	e051      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003b20:	2304      	movs	r3, #4
 8003b22:	e04f      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d111      	bne.n	8003b50 <HAL_I2C_Init+0x168>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e58      	subs	r0, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e012      	b.n	8003b76 <HAL_I2C_Init+0x18e>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	0099      	lsls	r1, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Init+0x196>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e022      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10e      	bne.n	8003ba4 <HAL_I2C_Init+0x1bc>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1e58      	subs	r0, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	440b      	add	r3, r1
 8003b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba2:	e00f      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	0099      	lsls	r1, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	6809      	ldr	r1, [r1, #0]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6911      	ldr	r1, [r2, #16]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	000186a0 	.word	0x000186a0
 8003c60:	001e847f 	.word	0x001e847f
 8003c64:	003d08ff 	.word	0x003d08ff
 8003c68:	431bde83 	.word	0x431bde83
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e128      	b.n	8003ed4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a90      	ldr	r2, [pc, #576]	@ (8003edc <HAL_I2S_Init+0x26c>)
 8003c9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fd f841 	bl	8000d24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cb8:	f023 030f 	bic.w	r3, r3, #15
 8003cbc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d060      	beq.n	8003d90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e001      	b.n	8003ce0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003cdc:	2320      	movs	r3, #32
 8003cde:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d802      	bhi.n	8003cee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f001 f9c4 	bl	800507c <HAL_RCCEx_GetPeriphCLKFreq>
 8003cf4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfe:	d125      	bne.n	8003d4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	3305      	adds	r3, #5
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e01f      	b.n	8003d6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	3305      	adds	r3, #5
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e00e      	b.n	8003d6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	3305      	adds	r3, #5
 8003d68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ee0 <HAL_I2S_Init+0x270>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	08db      	lsrs	r3, r3, #3
 8003d74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e003      	b.n	8003d98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d90:	2302      	movs	r3, #2
 8003d92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d902      	bls.n	8003da4 <HAL_I2S_Init+0x134>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2bff      	cmp	r3, #255	@ 0xff
 8003da2:	d907      	bls.n	8003db4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da8:	f043 0210 	orr.w	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e08f      	b.n	8003ed4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	ea42 0103 	orr.w	r1, r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dd2:	f023 030f 	bic.w	r3, r3, #15
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6851      	ldr	r1, [r2, #4]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6892      	ldr	r2, [r2, #8]
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68d2      	ldr	r2, [r2, #12]
 8003de4:	4311      	orrs	r1, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6992      	ldr	r2, [r2, #24]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003df6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d161      	bne.n	8003ec4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a38      	ldr	r2, [pc, #224]	@ (8003ee4 <HAL_I2S_Init+0x274>)
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a37      	ldr	r2, [pc, #220]	@ (8003ee8 <HAL_I2S_Init+0x278>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_I2S_Init+0x1a4>
 8003e10:	4b36      	ldr	r3, [pc, #216]	@ (8003eec <HAL_I2S_Init+0x27c>)
 8003e12:	e001      	b.n	8003e18 <HAL_I2S_Init+0x1a8>
 8003e14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4932      	ldr	r1, [pc, #200]	@ (8003ee8 <HAL_I2S_Init+0x278>)
 8003e20:	428a      	cmp	r2, r1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2S_Init+0x1b8>
 8003e24:	4a31      	ldr	r2, [pc, #196]	@ (8003eec <HAL_I2S_Init+0x27c>)
 8003e26:	e001      	b.n	8003e2c <HAL_I2S_Init+0x1bc>
 8003e28:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e2c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e30:	f023 030f 	bic.w	r3, r3, #15
 8003e34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee8 <HAL_I2S_Init+0x278>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2S_Init+0x1d4>
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <HAL_I2S_Init+0x27c>)
 8003e42:	e001      	b.n	8003e48 <HAL_I2S_Init+0x1d8>
 8003e44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e48:	2202      	movs	r2, #2
 8003e4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a25      	ldr	r2, [pc, #148]	@ (8003ee8 <HAL_I2S_Init+0x278>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_I2S_Init+0x1ea>
 8003e56:	4b25      	ldr	r3, [pc, #148]	@ (8003eec <HAL_I2S_Init+0x27c>)
 8003e58:	e001      	b.n	8003e5e <HAL_I2S_Init+0x1ee>
 8003e5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e6a:	d003      	beq.n	8003e74 <HAL_I2S_Init+0x204>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	e001      	b.n	8003e80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e94:	4313      	orrs	r3, r2
 8003e96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003eac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <HAL_I2S_Init+0x278>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2S_Init+0x24c>
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_I2S_Init+0x27c>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2S_Init+0x250>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec0:	897a      	ldrh	r2, [r7, #10]
 8003ec2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	08003fe7 	.word	0x08003fe7
 8003ee0:	cccccccd 	.word	0xcccccccd
 8003ee4:	080040fd 	.word	0x080040fd
 8003ee8:	40003800 	.word	0x40003800
 8003eec:	40003400 	.word	0x40003400

08003ef0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	881a      	ldrh	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	1c9a      	adds	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10e      	bne.n	8003f80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff ffb8 	bl	8003ef0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	1c9a      	adds	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10e      	bne.n	8003fde <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff93 	bl	8003f04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d13a      	bne.n	8004078 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d109      	bne.n	8004020 <I2S_IRQHandler+0x3a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d102      	bne.n	8004020 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff ffb4 	bl	8003f88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d126      	bne.n	8004078 <I2S_IRQHandler+0x92>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b20      	cmp	r3, #32
 8004036:	d11f      	bne.n	8004078 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004046:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff50 	bl	8003f18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d136      	bne.n	80040f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d109      	bne.n	80040a2 <I2S_IRQHandler+0xbc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	2b80      	cmp	r3, #128	@ 0x80
 800409a:	d102      	bne.n	80040a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff45 	bl	8003f2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d122      	bne.n	80040f2 <I2S_IRQHandler+0x10c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d11b      	bne.n	80040f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff13 	bl	8003f18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a92      	ldr	r2, [pc, #584]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004116:	4b92      	ldr	r3, [pc, #584]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004118:	e001      	b.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800411a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a8b      	ldr	r2, [pc, #556]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004134:	4b8a      	ldr	r3, [pc, #552]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004136:	e001      	b.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004148:	d004      	beq.n	8004154 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 8099 	bne.w	8004286 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d107      	bne.n	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f925 	bl	80043b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f9c8 	bl	8004518 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418e:	2b40      	cmp	r3, #64	@ 0x40
 8004190:	d13a      	bne.n	8004208 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d035      	beq.n	8004208 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6e      	ldr	r2, [pc, #440]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a8:	e001      	b.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4969      	ldr	r1, [pc, #420]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041b6:	428b      	cmp	r3, r1
 80041b8:	d101      	bne.n	80041be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041ba:	4b69      	ldr	r3, [pc, #420]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041bc:	e001      	b.n	80041c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	f043 0202 	orr.w	r2, r3, #2
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fe88 	bl	8003f18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b08      	cmp	r3, #8
 8004210:	f040 80c3 	bne.w	800439a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80bd 	beq.w	800439a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800422e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a49      	ldr	r2, [pc, #292]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800423a:	4b49      	ldr	r3, [pc, #292]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800423c:	e001      	b.n	8004242 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800423e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4944      	ldr	r1, [pc, #272]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800424a:	428b      	cmp	r3, r1
 800424c:	d101      	bne.n	8004252 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800424e:	4b44      	ldr	r3, [pc, #272]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004250:	e001      	b.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004252:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004256:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800425a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800425c:	2300      	movs	r3, #0
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fe4a 	bl	8003f18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004284:	e089      	b.n	800439a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b02      	cmp	r3, #2
 800428e:	d107      	bne.n	80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8be 	bl	800441c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8fd 	bl	80044b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c0:	2b40      	cmp	r3, #64	@ 0x40
 80042c2:	d12f      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d02a      	beq.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1e      	ldr	r2, [pc, #120]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d101      	bne.n	80042ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80042e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ea:	e001      	b.n	80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80042ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4919      	ldr	r1, [pc, #100]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d101      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80042fc:	4b18      	ldr	r3, [pc, #96]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042fe:	e001      	b.n	8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004300:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004304:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004308:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f043 0202 	orr.w	r2, r3, #2
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fdfa 	bl	8003f18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	d136      	bne.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d031      	beq.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a07      	ldr	r2, [pc, #28]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004342:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004344:	e001      	b.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004346:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4902      	ldr	r1, [pc, #8]	@ (800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004352:	428b      	cmp	r3, r1
 8004354:	d106      	bne.n	8004364 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004356:	4b02      	ldr	r3, [pc, #8]	@ (8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004358:	e006      	b.n	8004368 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800435a:	bf00      	nop
 800435c:	40003800 	.word	0x40003800
 8004360:	40003400 	.word	0x40003400
 8004364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004368:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800436c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800437c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fdc0 	bl	8003f18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004398:	e000      	b.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800439a:	bf00      	nop
}
 800439c:	bf00      	nop
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	1c99      	adds	r1, r3, #2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80043ca:	881a      	ldrh	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d113      	bne.n	8004412 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ffc9 	bl	80043a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c99      	adds	r1, r3, #2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6251      	str	r1, [r2, #36]	@ 0x24
 800442e:	8819      	ldrh	r1, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <I2SEx_TxISR_I2SExt+0x90>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <I2SEx_TxISR_I2SExt+0x22>
 800443a:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <I2SEx_TxISR_I2SExt+0x94>)
 800443c:	e001      	b.n	8004442 <I2SEx_TxISR_I2SExt+0x26>
 800443e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004442:	460a      	mov	r2, r1
 8004444:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d121      	bne.n	80044a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a12      	ldr	r2, [pc, #72]	@ (80044ac <I2SEx_TxISR_I2SExt+0x90>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d101      	bne.n	800446c <I2SEx_TxISR_I2SExt+0x50>
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <I2SEx_TxISR_I2SExt+0x94>)
 800446a:	e001      	b.n	8004470 <I2SEx_TxISR_I2SExt+0x54>
 800446c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	490d      	ldr	r1, [pc, #52]	@ (80044ac <I2SEx_TxISR_I2SExt+0x90>)
 8004478:	428b      	cmp	r3, r1
 800447a:	d101      	bne.n	8004480 <I2SEx_TxISR_I2SExt+0x64>
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <I2SEx_TxISR_I2SExt+0x94>)
 800447e:	e001      	b.n	8004484 <I2SEx_TxISR_I2SExt+0x68>
 8004480:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004484:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004488:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff81 	bl	80043a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40003800 	.word	0x40003800
 80044b0:	40003400 	.word	0x40003400

080044b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68d8      	ldr	r0, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	1c99      	adds	r1, r3, #2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044cc:	b282      	uxth	r2, r0
 80044ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d113      	bne.n	8004510 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ff4a 	bl	80043a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a20      	ldr	r2, [pc, #128]	@ (80045a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <I2SEx_RxISR_I2SExt+0x16>
 800452a:	4b20      	ldr	r3, [pc, #128]	@ (80045ac <I2SEx_RxISR_I2SExt+0x94>)
 800452c:	e001      	b.n	8004532 <I2SEx_RxISR_I2SExt+0x1a>
 800452e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004532:	68d8      	ldr	r0, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	1c99      	adds	r1, r3, #2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800453e:	b282      	uxth	r2, r0
 8004540:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d121      	bne.n	800459e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d101      	bne.n	8004568 <I2SEx_RxISR_I2SExt+0x50>
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <I2SEx_RxISR_I2SExt+0x94>)
 8004566:	e001      	b.n	800456c <I2SEx_RxISR_I2SExt+0x54>
 8004568:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	490d      	ldr	r1, [pc, #52]	@ (80045a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004574:	428b      	cmp	r3, r1
 8004576:	d101      	bne.n	800457c <I2SEx_RxISR_I2SExt+0x64>
 8004578:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <I2SEx_RxISR_I2SExt+0x94>)
 800457a:	e001      	b.n	8004580 <I2SEx_RxISR_I2SExt+0x68>
 800457c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004580:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004584:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff03 	bl	80043a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40003800 	.word	0x40003800
 80045ac:	40003400 	.word	0x40003400

080045b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e267      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d075      	beq.n	80046ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ce:	4b88      	ldr	r3, [pc, #544]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d00c      	beq.n	80045f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045da:	4b85      	ldr	r3, [pc, #532]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d112      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e6:	4b82      	ldr	r3, [pc, #520]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f2:	d10b      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	4b7e      	ldr	r3, [pc, #504]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d05b      	beq.n	80046b8 <HAL_RCC_OscConfig+0x108>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d157      	bne.n	80046b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e242      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004614:	d106      	bne.n	8004624 <HAL_RCC_OscConfig+0x74>
 8004616:	4b76      	ldr	r3, [pc, #472]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a75      	ldr	r2, [pc, #468]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e01d      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x98>
 800462e:	4b70      	ldr	r3, [pc, #448]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6f      	ldr	r2, [pc, #444]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b6d      	ldr	r3, [pc, #436]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6c      	ldr	r2, [pc, #432]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004648:	4b69      	ldr	r3, [pc, #420]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a68      	ldr	r2, [pc, #416]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b66      	ldr	r3, [pc, #408]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a65      	ldr	r2, [pc, #404]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800465e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fc fd92 	bl	8001190 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7fc fd8e 	bl	8001190 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	@ 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e207      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b5b      	ldr	r3, [pc, #364]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0xc0>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fc fd7e 	bl	8001190 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fc fd7a 	bl	8001190 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1f3      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	4b51      	ldr	r3, [pc, #324]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0xe8>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d063      	beq.n	800478e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046c6:	4b4a      	ldr	r3, [pc, #296]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d2:	4b47      	ldr	r3, [pc, #284]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d11c      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046de:	4b44      	ldr	r3, [pc, #272]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1c7      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4937      	ldr	r1, [pc, #220]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004716:	e03a      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004720:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <HAL_RCC_OscConfig+0x244>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fc fd33 	bl	8001190 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fc fd2f 	bl	8001190 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1a8      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b28      	ldr	r3, [pc, #160]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4925      	ldr	r1, [pc, #148]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCC_OscConfig+0x244>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fc fd12 	bl	8001190 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004770:	f7fc fd0e 	bl	8001190 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e187      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d036      	beq.n	8004808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCC_OscConfig+0x248>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fc fcf2 	bl	8001190 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fc fcee 	bl	8001190 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e167      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x200>
 80047ce:	e01b      	b.n	8004808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d0:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_RCC_OscConfig+0x248>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d6:	f7fc fcdb 	bl	8001190 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047dc:	e00e      	b.n	80047fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047de:	f7fc fcd7 	bl	8001190 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d907      	bls.n	80047fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e150      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	42470000 	.word	0x42470000
 80047f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ea      	bne.n	80047de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8097 	beq.w	8004944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481a:	4b81      	ldr	r3, [pc, #516]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6413      	str	r3, [r2, #64]	@ 0x40
 8004836:	4b7a      	ldr	r3, [pc, #488]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	4b77      	ldr	r3, [pc, #476]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d118      	bne.n	8004884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004852:	4b74      	ldr	r3, [pc, #464]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a73      	ldr	r2, [pc, #460]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485e:	f7fc fc97 	bl	8001190 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fc fc93 	bl	8001190 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e10c      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4b6a      	ldr	r3, [pc, #424]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x2ea>
 800488c:	4b64      	ldr	r3, [pc, #400]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	4a63      	ldr	r2, [pc, #396]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	@ 0x70
 8004898:	e01c      	b.n	80048d4 <HAL_RCC_OscConfig+0x324>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x30c>
 80048a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0x324>
 80048bc:	4b58      	ldr	r3, [pc, #352]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a57      	ldr	r2, [pc, #348]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c8:	4b55      	ldr	r3, [pc, #340]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	4a54      	ldr	r2, [pc, #336]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048ce:	f023 0304 	bic.w	r3, r3, #4
 80048d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fc fc58 	bl	8001190 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fc fc54 	bl	8001190 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0cb      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	4b49      	ldr	r3, [pc, #292]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ee      	beq.n	80048e4 <HAL_RCC_OscConfig+0x334>
 8004906:	e014      	b.n	8004932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004908:	f7fc fc42 	bl	8001190 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490e:	e00a      	b.n	8004926 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fc fc3e 	bl	8001190 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e0b5      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004926:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ee      	bne.n	8004910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	4a38      	ldr	r2, [pc, #224]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80a1 	beq.w	8004a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800494e:	4b34      	ldr	r3, [pc, #208]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b08      	cmp	r3, #8
 8004958:	d05c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d141      	bne.n	80049e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	4b31      	ldr	r3, [pc, #196]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fc fc12 	bl	8001190 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fc fc0e 	bl	8001190 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e087      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	3b01      	subs	r3, #1
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	491b      	ldr	r1, [pc, #108]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7fc fbe7 	bl	8001190 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c6:	f7fc fbe3 	bl	8001190 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e05c      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d8:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x416>
 80049e4:	e054      	b.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fc fbd0 	bl	8001190 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fc fbcc 	bl	8001190 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e045      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x444>
 8004a12:	e03d      	b.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e038      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007000 	.word	0x40007000
 8004a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x4ec>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d028      	beq.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d121      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d11a      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	3b01      	subs	r3, #1
 8004a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cc      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b68      	ldr	r3, [pc, #416]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d90c      	bls.n	8004adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b63      	ldr	r3, [pc, #396]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0b8      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af4:	4b59      	ldr	r3, [pc, #356]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a58      	ldr	r2, [pc, #352]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004afe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b0c:	4b53      	ldr	r3, [pc, #332]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a52      	ldr	r2, [pc, #328]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b50      	ldr	r3, [pc, #320]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	494d      	ldr	r1, [pc, #308]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d044      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b47      	ldr	r3, [pc, #284]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d119      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e067      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7e:	4b37      	ldr	r3, [pc, #220]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4934      	ldr	r1, [pc, #208]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b90:	f7fc fafe 	bl	8001190 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b98:	f7fc fafa 	bl	8001190 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e04f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	4b2b      	ldr	r3, [pc, #172]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 020c 	and.w	r2, r3, #12
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1eb      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d20c      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e032      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4916      	ldr	r1, [pc, #88]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	490e      	ldr	r1, [pc, #56]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c26:	f000 f821 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	490a      	ldr	r1, [pc, #40]	@ (8004c60 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	5ccb      	ldrb	r3, [r1, r3]
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	4a09      	ldr	r2, [pc, #36]	@ (8004c64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c42:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc fa5e 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08009c24 	.word	0x08009c24
 8004c64:	20000000 	.word	0x20000000
 8004c68:	20000004 	.word	0x20000004

08004c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c70:	b094      	sub	sp, #80	@ 0x50
 8004c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c84:	4b79      	ldr	r3, [pc, #484]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x40>
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	f200 80e1 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c9e:	e0db      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b73      	ldr	r3, [pc, #460]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ca4:	e0db      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca6:	4b73      	ldr	r3, [pc, #460]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004caa:	e0d8      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cac:	4b6f      	ldr	r3, [pc, #444]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	2200      	movs	r2, #0
 8004cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf0:	0150      	lsls	r0, r2, #5
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	1a51      	subs	r1, r2, r1
 8004cfa:	6139      	str	r1, [r7, #16]
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d10:	4659      	mov	r1, fp
 8004d12:	018b      	lsls	r3, r1, #6
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	018a      	lsls	r2, r1, #6
 8004d1e:	4651      	mov	r1, sl
 8004d20:	ebb2 0801 	subs.w	r8, r2, r1
 8004d24:	4659      	mov	r1, fp
 8004d26:	eb63 0901 	sbc.w	r9, r3, r1
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3e:	4690      	mov	r8, r2
 8004d40:	4699      	mov	r9, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	eb18 0303 	adds.w	r3, r8, r3
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	462b      	mov	r3, r5
 8004d4c:	eb49 0303 	adc.w	r3, r9, r3
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d5e:	4629      	mov	r1, r5
 8004d60:	024b      	lsls	r3, r1, #9
 8004d62:	4621      	mov	r1, r4
 8004d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d68:	4621      	mov	r1, r4
 8004d6a:	024a      	lsls	r2, r1, #9
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d72:	2200      	movs	r2, #0
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d7c:	f7fb fa24 	bl	80001c8 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d88:	e058      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b38      	ldr	r3, [pc, #224]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	2200      	movs	r2, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	4611      	mov	r1, r2
 8004d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	f04f 0000 	mov.w	r0, #0
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	0159      	lsls	r1, r3, #5
 8004db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db6:	0150      	lsls	r0, r2, #5
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8004de0:	eb63 050b 	sbc.w	r5, r3, fp
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	00eb      	lsls	r3, r5, #3
 8004dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df2:	00e2      	lsls	r2, r4, #3
 8004df4:	4614      	mov	r4, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	18e3      	adds	r3, r4, r3
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	464b      	mov	r3, r9
 8004e00:	eb45 0303 	adc.w	r3, r5, r3
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e12:	4629      	mov	r1, r5
 8004e14:	028b      	lsls	r3, r1, #10
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	028a      	lsls	r2, r1, #10
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e26:	2200      	movs	r2, #0
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e30:	f7fb f9ca 	bl	80001c8 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3750      	adds	r7, #80	@ 0x50
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	007a1200 	.word	0x007a1200

08004e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000000 	.word	0x20000000

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e94:	f7ff fff0 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	08009c34 	.word	0x08009c34

08004eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d035      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ee0:	4b62      	ldr	r3, [pc, #392]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee6:	f7fc f953 	bl	8001190 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eee:	f7fc f94f 	bl	8001190 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0b0      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f00:	4b5b      	ldr	r3, [pc, #364]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	019a      	lsls	r2, r3, #6
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	071b      	lsls	r3, r3, #28
 8004f18:	4955      	ldr	r1, [pc, #340]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f20:	4b52      	ldr	r3, [pc, #328]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f26:	f7fc f933 	bl	8001190 <HAL_GetTick>
 8004f2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f2e:	f7fc f92f 	bl	8001190 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e090      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f40:	4b4b      	ldr	r3, [pc, #300]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8083 	beq.w	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b44      	ldr	r3, [pc, #272]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	4a43      	ldr	r2, [pc, #268]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f6a:	4b41      	ldr	r3, [pc, #260]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f76:	4b3f      	ldr	r3, [pc, #252]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f82:	f7fc f905 	bl	8001190 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8a:	f7fc f901 	bl	8001190 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e062      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f9c:	4b35      	ldr	r3, [pc, #212]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fa8:	4b31      	ldr	r3, [pc, #196]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02f      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d028      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fd0:	4b29      	ldr	r3, [pc, #164]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd6:	4b28      	ldr	r3, [pc, #160]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fdc:	4a24      	ldr	r2, [pc, #144]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fe2:	4b23      	ldr	r3, [pc, #140]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d114      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fc f8cf 	bl	8001190 <HAL_GetTick>
 8004ff2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	e00a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fc f8cb 	bl	8001190 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e02a      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500c:	4b18      	ldr	r3, [pc, #96]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ee      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005020:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005024:	d10d      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005026:	4b12      	ldr	r3, [pc, #72]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503a:	490d      	ldr	r1, [pc, #52]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
 8005040:	e005      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005042:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005048:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800504c:	6093      	str	r3, [r2, #8]
 800504e:	4b08      	ldr	r3, [pc, #32]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005050:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505a:	4905      	ldr	r1, [pc, #20]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	4313      	orrs	r3, r2
 800505e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	42470068 	.word	0x42470068
 8005070:	40023800 	.word	0x40023800
 8005074:	40007000 	.word	0x40007000
 8005078:	42470e40 	.word	0x42470e40

0800507c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d13f      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800509a:	4b24      	ldr	r3, [pc, #144]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050b0:	d12f      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050b4:	617b      	str	r3, [r7, #20]
          break;
 80050b6:	e02f      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050b8:	4b1c      	ldr	r3, [pc, #112]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c4:	d108      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050c6:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050ce:	4a19      	ldr	r2, [pc, #100]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	e007      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050d8:	4b14      	ldr	r3, [pc, #80]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e0:	4a15      	ldr	r2, [pc, #84]	@ (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050e8:	4b10      	ldr	r3, [pc, #64]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050fc:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005102:	0f1b      	lsrs	r3, r3, #28
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	617b      	str	r3, [r7, #20]
          break;
 8005110:	e002      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
          break;
 8005116:	bf00      	nop
        }
      }
      break;
 8005118:	e000      	b.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800511a:	bf00      	nop
    }
  }
  return frequency;
 800511c:	697b      	ldr	r3, [r7, #20]
}
 800511e:	4618      	mov	r0, r3
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800
 8005130:	00bb8000 	.word	0x00bb8000
 8005134:	007a1200 	.word	0x007a1200
 8005138:	00f42400 	.word	0x00f42400

0800513c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07b      	b.n	8005246 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d108      	bne.n	8005168 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800515e:	d009      	beq.n	8005174 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	61da      	str	r2, [r3, #28]
 8005166:	e005      	b.n	8005174 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fb fe48 	bl	8000e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f8:	ea42 0103 	orr.w	r1, r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	f003 0104 	and.w	r1, r3, #4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521a:	f003 0210 	and.w	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005234:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e041      	b.n	80052e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fb fe1d 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f000 fad9 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e041      	b.n	8005382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f839 	bl	800538a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 fa8a 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <HAL_TIM_PWM_Start+0x24>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e022      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d109      	bne.n	80053de <HAL_TIM_PWM_Start+0x3e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	bf14      	ite	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	2300      	moveq	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	e015      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d109      	bne.n	80053f8 <HAL_TIM_PWM_Start+0x58>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e008      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e07c      	b.n	800550c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0x82>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005420:	e013      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b04      	cmp	r3, #4
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0x92>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005430:	e00b      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b08      	cmp	r3, #8
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005440:	e003      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fce6 	bl	8005e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2d      	ldr	r2, [pc, #180]	@ (8005514 <HAL_TIM_PWM_Start+0x174>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_PWM_Start+0xcc>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2c      	ldr	r2, [pc, #176]	@ (8005518 <HAL_TIM_PWM_Start+0x178>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_TIM_PWM_Start+0xd0>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_TIM_PWM_Start+0xd2>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a22      	ldr	r2, [pc, #136]	@ (8005514 <HAL_TIM_PWM_Start+0x174>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005498:	d01d      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1f      	ldr	r2, [pc, #124]	@ (800551c <HAL_TIM_PWM_Start+0x17c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005520 <HAL_TIM_PWM_Start+0x180>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005524 <HAL_TIM_PWM_Start+0x184>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a16      	ldr	r2, [pc, #88]	@ (8005518 <HAL_TIM_PWM_Start+0x178>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <HAL_TIM_PWM_Start+0x188>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a16      	ldr	r2, [pc, #88]	@ (800552c <HAL_TIM_PWM_Start+0x18c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d111      	bne.n	80054fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d010      	beq.n	800550a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f8:	e007      	b.n	800550a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40010000 	.word	0x40010000
 8005518:	40010400 	.word	0x40010400
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40014000 	.word	0x40014000
 800552c:	40001800 	.word	0x40001800

08005530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800554a:	2302      	movs	r3, #2
 800554c:	e0ae      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b0c      	cmp	r3, #12
 800555a:	f200 809f 	bhi.w	800569c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800555e:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005599 	.word	0x08005599
 8005568:	0800569d 	.word	0x0800569d
 800556c:	0800569d 	.word	0x0800569d
 8005570:	0800569d 	.word	0x0800569d
 8005574:	080055d9 	.word	0x080055d9
 8005578:	0800569d 	.word	0x0800569d
 800557c:	0800569d 	.word	0x0800569d
 8005580:	0800569d 	.word	0x0800569d
 8005584:	0800561b 	.word	0x0800561b
 8005588:	0800569d 	.word	0x0800569d
 800558c:	0800569d 	.word	0x0800569d
 8005590:	0800569d 	.word	0x0800569d
 8005594:	0800565b 	.word	0x0800565b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f9f6 	bl	8005990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0208 	orr.w	r2, r2, #8
 80055b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6999      	ldr	r1, [r3, #24]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	619a      	str	r2, [r3, #24]
      break;
 80055d6:	e064      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa46 	bl	8005a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6999      	ldr	r1, [r3, #24]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	619a      	str	r2, [r3, #24]
      break;
 8005618:	e043      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fa9b 	bl	8005b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0208 	orr.w	r2, r2, #8
 8005634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0204 	bic.w	r2, r2, #4
 8005644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69d9      	ldr	r1, [r3, #28]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	61da      	str	r2, [r3, #28]
      break;
 8005658:	e023      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 faef 	bl	8005c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69d9      	ldr	r1, [r3, #28]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	021a      	lsls	r2, r3, #8
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	61da      	str	r2, [r3, #28]
      break;
 800569a:	e002      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75fb      	strb	r3, [r7, #23]
      break;
 80056a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIM_ConfigClockSource+0x1c>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e0b4      	b.n	800583a <HAL_TIM_ConfigClockSource+0x186>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005708:	d03e      	beq.n	8005788 <HAL_TIM_ConfigClockSource+0xd4>
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570e:	f200 8087 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005716:	f000 8086 	beq.w	8005826 <HAL_TIM_ConfigClockSource+0x172>
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571e:	d87f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b70      	cmp	r3, #112	@ 0x70
 8005722:	d01a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xa6>
 8005724:	2b70      	cmp	r3, #112	@ 0x70
 8005726:	d87b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b60      	cmp	r3, #96	@ 0x60
 800572a:	d050      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x11a>
 800572c:	2b60      	cmp	r3, #96	@ 0x60
 800572e:	d877      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b50      	cmp	r3, #80	@ 0x50
 8005732:	d03c      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0xfa>
 8005734:	2b50      	cmp	r3, #80	@ 0x50
 8005736:	d873      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b40      	cmp	r3, #64	@ 0x40
 800573a:	d058      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x13a>
 800573c:	2b40      	cmp	r3, #64	@ 0x40
 800573e:	d86f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b30      	cmp	r3, #48	@ 0x30
 8005742:	d064      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 8005744:	2b30      	cmp	r3, #48	@ 0x30
 8005746:	d86b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d060      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d867      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d05c      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 8005754:	2b10      	cmp	r3, #16
 8005756:	d05a      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	e062      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800576a:	f000 fb3b 	bl	8005de4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800577c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
      break;
 8005786:	e04f      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005798:	f000 fb24 	bl	8005de4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057aa:	609a      	str	r2, [r3, #8]
      break;
 80057ac:	e03c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 fa98 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2150      	movs	r1, #80	@ 0x50
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 faf1 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 80057cc:	e02c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 fab7 	bl	8005d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2160      	movs	r1, #96	@ 0x60
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fae1 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 80057ec:	e01c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 fa78 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2140      	movs	r1, #64	@ 0x40
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fad1 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 800580c:	e00c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f000 fac8 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 800581e:	e003      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
      break;
 8005824:	e000      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a43      	ldr	r2, [pc, #268]	@ (8005964 <TIM_Base_SetConfig+0x120>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005862:	d00f      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a40      	ldr	r2, [pc, #256]	@ (8005968 <TIM_Base_SetConfig+0x124>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3f      	ldr	r2, [pc, #252]	@ (800596c <TIM_Base_SetConfig+0x128>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a3e      	ldr	r2, [pc, #248]	@ (8005970 <TIM_Base_SetConfig+0x12c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a3d      	ldr	r2, [pc, #244]	@ (8005974 <TIM_Base_SetConfig+0x130>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a32      	ldr	r2, [pc, #200]	@ (8005964 <TIM_Base_SetConfig+0x120>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d02b      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a4:	d027      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005968 <TIM_Base_SetConfig+0x124>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d023      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2e      	ldr	r2, [pc, #184]	@ (800596c <TIM_Base_SetConfig+0x128>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01f      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005970 <TIM_Base_SetConfig+0x12c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d01b      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005974 <TIM_Base_SetConfig+0x130>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d017      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005978 <TIM_Base_SetConfig+0x134>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2a      	ldr	r2, [pc, #168]	@ (800597c <TIM_Base_SetConfig+0x138>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a29      	ldr	r2, [pc, #164]	@ (8005980 <TIM_Base_SetConfig+0x13c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a28      	ldr	r2, [pc, #160]	@ (8005984 <TIM_Base_SetConfig+0x140>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a27      	ldr	r2, [pc, #156]	@ (8005988 <TIM_Base_SetConfig+0x144>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a26      	ldr	r2, [pc, #152]	@ (800598c <TIM_Base_SetConfig+0x148>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d108      	bne.n	8005908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a0e      	ldr	r2, [pc, #56]	@ (8005964 <TIM_Base_SetConfig+0x120>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d003      	beq.n	8005936 <TIM_Base_SetConfig+0xf2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a10      	ldr	r2, [pc, #64]	@ (8005974 <TIM_Base_SetConfig+0x130>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d103      	bne.n	800593e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800
 8005984:	40001800 	.word	0x40001800
 8005988:	40001c00 	.word	0x40001c00
 800598c:	40002000 	.word	0x40002000

08005990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f023 0201 	bic.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 0302 	bic.w	r3, r3, #2
 80059d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a20      	ldr	r2, [pc, #128]	@ (8005a68 <TIM_OC1_SetConfig+0xd8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC1_SetConfig+0x64>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	@ (8005a6c <TIM_OC1_SetConfig+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d10c      	bne.n	8005a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0308 	bic.w	r3, r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a15      	ldr	r2, [pc, #84]	@ (8005a68 <TIM_OC1_SetConfig+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC1_SetConfig+0x8e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a14      	ldr	r2, [pc, #80]	@ (8005a6c <TIM_OC1_SetConfig+0xdc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d111      	bne.n	8005a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f023 0210 	bic.w	r2, r3, #16
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0320 	bic.w	r3, r3, #32
 8005aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a22      	ldr	r2, [pc, #136]	@ (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC2_SetConfig+0x68>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a21      	ldr	r2, [pc, #132]	@ (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10d      	bne.n	8005af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a17      	ldr	r2, [pc, #92]	@ (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC2_SetConfig+0x94>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a16      	ldr	r2, [pc, #88]	@ (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d113      	bne.n	8005b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400

08005b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	@ (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_OC3_SetConfig+0x66>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	@ (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10d      	bne.n	8005bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a16      	ldr	r2, [pc, #88]	@ (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC3_SetConfig+0x92>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a15      	ldr	r2, [pc, #84]	@ (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d113      	bne.n	8005c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ce8 <TIM_OC4_SetConfig+0xa4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC4_SetConfig+0x68>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a11      	ldr	r2, [pc, #68]	@ (8005cec <TIM_OC4_SetConfig+0xa8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d109      	bne.n	8005cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40010400 	.word	0x40010400

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f023 0210 	bic.w	r2, r3, #16
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f043 0307 	orr.w	r3, r3, #7
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	2201      	movs	r2, #1
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e05a      	b.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	@ (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d022      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed4:	d01d      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1a      	ldr	r2, [pc, #104]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a18      	ldr	r2, [pc, #96]	@ (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a17      	ldr	r2, [pc, #92]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d10c      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f68:	b084      	sub	sp, #16
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	f107 001c 	add.w	r0, r7, #28
 8005f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d123      	bne.n	8005fca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005faa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9dc 	bl	800637c <USB_CoreReset>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e01b      	b.n	8006002 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9d0 	bl	800637c <USB_CoreReset>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ff4:	e005      	b.n	8006002 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006002:	7fbb      	ldrb	r3, [r7, #30]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d10b      	bne.n	8006020 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f043 0206 	orr.w	r2, r3, #6
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800602c:	b004      	add	sp, #16
 800602e:	4770      	bx	lr

08006030 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f043 0201 	orr.w	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f023 0201 	bic.w	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d115      	bne.n	80060c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060a2:	200a      	movs	r0, #10
 80060a4:	f7fb f880 	bl	80011a8 <HAL_Delay>
      ms += 10U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	330a      	adds	r3, #10
 80060ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f956 	bl	8006360 <USB_GetMode>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d01e      	beq.n	80060f8 <USB_SetCurrentMode+0x84>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80060be:	d9f0      	bls.n	80060a2 <USB_SetCurrentMode+0x2e>
 80060c0:	e01a      	b.n	80060f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d115      	bne.n	80060f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060d4:	200a      	movs	r0, #10
 80060d6:	f7fb f867 	bl	80011a8 <HAL_Delay>
      ms += 10U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	330a      	adds	r3, #10
 80060de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f93d 	bl	8006360 <USB_GetMode>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <USB_SetCurrentMode+0x84>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80060f0:	d9f0      	bls.n	80060d4 <USB_SetCurrentMode+0x60>
 80060f2:	e001      	b.n	80060f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e005      	b.n	8006104 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80060fc:	d101      	bne.n	8006102 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3301      	adds	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006126:	d901      	bls.n	800612c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e01b      	b.n	8006164 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	daf2      	bge.n	800611a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	019b      	lsls	r3, r3, #6
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006150:	d901      	bls.n	8006156 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e006      	b.n	8006164 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b20      	cmp	r3, #32
 8006160:	d0f0      	beq.n	8006144 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006188:	d901      	bls.n	800618e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e018      	b.n	80061c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	daf2      	bge.n	800617c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2210      	movs	r2, #16
 800619e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ac:	d901      	bls.n	80061b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e006      	b.n	80061c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b10      	cmp	r3, #16
 80061bc:	d0f0      	beq.n	80061a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	@ 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4611      	mov	r1, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	460b      	mov	r3, r1
 80061dc:	71fb      	strb	r3, [r7, #7]
 80061de:	4613      	mov	r3, r2
 80061e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d123      	bne.n	800623a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061f2:	88bb      	ldrh	r3, [r7, #4]
 80061f4:	3303      	adds	r3, #3
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	e018      	b.n	8006232 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	031a      	lsls	r2, r3, #12
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620c:	461a      	mov	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3301      	adds	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	3301      	adds	r3, #1
 800621e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3301      	adds	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	3301      	adds	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3e2      	bcc.n	8006200 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3724      	adds	r7, #36	@ 0x24
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006248:	b480      	push	{r7}
 800624a:	b08b      	sub	sp, #44	@ 0x2c
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	089b      	lsrs	r3, r3, #2
 8006262:	b29b      	uxth	r3, r3
 8006264:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	623b      	str	r3, [r7, #32]
 8006272:	e014      	b.n	800629e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	3301      	adds	r3, #1
 8006284:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	3301      	adds	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	3301      	adds	r3, #1
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	3301      	adds	r3, #1
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	3301      	adds	r3, #1
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d3e6      	bcc.n	8006274 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062a6:	8bfb      	ldrh	r3, [r7, #30]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01e      	beq.n	80062ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b6:	461a      	mov	r2, r3
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	701a      	strb	r2, [r3, #0]
      i++;
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	3301      	adds	r3, #1
 80062d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	3301      	adds	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80062de:	8bfb      	ldrh	r3, [r7, #30]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062e4:	8bfb      	ldrh	r3, [r7, #30]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ea      	bne.n	80062c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	372c      	adds	r7, #44	@ 0x2c
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4013      	ands	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006310:	68fb      	ldr	r3, [r7, #12]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	4013      	ands	r3, r2
 8006350:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006352:	68bb      	ldr	r3, [r7, #8]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0301 	and.w	r3, r3, #1
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006394:	d901      	bls.n	800639a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e022      	b.n	80063e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	daf2      	bge.n	8006388 <USB_CoreReset+0xc>

  count = 10U;
 80063a2:	230a      	movs	r3, #10
 80063a4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80063a6:	e002      	b.n	80063ae <USB_CoreReset+0x32>
  {
    count--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f9      	bne.n	80063a8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f043 0201 	orr.w	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3301      	adds	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063cc:	d901      	bls.n	80063d2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e006      	b.n	80063e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d0f0      	beq.n	80063c0 <USB_CoreReset+0x44>

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063ec:	b084      	sub	sp, #16
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b086      	sub	sp, #24
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800640c:	461a      	mov	r2, r3
 800640e:	2300      	movs	r3, #0
 8006410:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d119      	bne.n	8006476 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006446:	2b01      	cmp	r3, #1
 8006448:	d10a      	bne.n	8006460 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006458:	f043 0304 	orr.w	r3, r3, #4
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e014      	b.n	800648a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800646e:	f023 0304 	bic.w	r3, r3, #4
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e009      	b.n	800648a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006484:	f023 0304 	bic.w	r3, r3, #4
 8006488:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800648a:	2110      	movs	r1, #16
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff fe3d 	bl	800610c <USB_FlushTxFifo>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff fe67 	bl	8006170 <USB_FlushRxFifo>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	e015      	b.n	80064de <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064be:	461a      	mov	r2, r3
 80064c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064c4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d2:	461a      	mov	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3301      	adds	r3, #1
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064e2:	461a      	mov	r2, r3
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d3e3      	bcc.n	80064b2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064f6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a18      	ldr	r2, [pc, #96]	@ (800655c <USB_HostInit+0x170>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10b      	bne.n	8006518 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006506:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <USB_HostInit+0x174>)
 800650c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <USB_HostInit+0x178>)
 8006512:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006516:	e009      	b.n	800652c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2280      	movs	r2, #128	@ 0x80
 800651c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a11      	ldr	r2, [pc, #68]	@ (8006568 <USB_HostInit+0x17c>)
 8006522:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a11      	ldr	r2, [pc, #68]	@ (800656c <USB_HostInit+0x180>)
 8006528:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800652c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f043 0210 	orr.w	r2, r3, #16
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	4b0a      	ldr	r3, [pc, #40]	@ (8006570 <USB_HostInit+0x184>)
 8006546:	4313      	orrs	r3, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006558:	b004      	add	sp, #16
 800655a:	4770      	bx	lr
 800655c:	40040000 	.word	0x40040000
 8006560:	01000200 	.word	0x01000200
 8006564:	00e00300 	.word	0x00e00300
 8006568:	00600080 	.word	0x00600080
 800656c:	004000e0 	.word	0x004000e0
 8006570:	a3200008 	.word	0xa3200008

08006574 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d107      	bne.n	80065c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065bc:	461a      	mov	r2, r3
 80065be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065c2:	6053      	str	r3, [r2, #4]
 80065c4:	e00c      	b.n	80065e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d107      	bne.n	80065dc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065d2:	461a      	mov	r2, r3
 80065d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80065d8:	6053      	str	r3, [r2, #4]
 80065da:	e001      	b.n	80065e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800660e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800661c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800661e:	2064      	movs	r0, #100	@ 0x64
 8006620:	f7fa fdc2 	bl	80011a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800662c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006630:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006632:	200a      	movs	r0, #10
 8006634:	f7fa fdb8 	bl	80011a8 <HAL_Delay>

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006666:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <USB_DriveVbus+0x44>
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006684:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006690:	d109      	bne.n	80066a6 <USB_DriveVbus+0x64>
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066a4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	0c5b      	lsrs	r3, r3, #17
 80066d2:	f003 0303 	and.w	r3, r3, #3
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	b29b      	uxth	r3, r3
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	4608      	mov	r0, r1
 800670e:	4611      	mov	r1, r2
 8006710:	461a      	mov	r2, r3
 8006712:	4603      	mov	r3, r0
 8006714:	70fb      	strb	r3, [r7, #3]
 8006716:	460b      	mov	r3, r1
 8006718:	70bb      	strb	r3, [r7, #2]
 800671a:	4613      	mov	r3, r2
 800671c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006732:	461a      	mov	r2, r3
 8006734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006738:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800673a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800673e:	2b03      	cmp	r3, #3
 8006740:	d87c      	bhi.n	800683c <USB_HC_Init+0x138>
 8006742:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <USB_HC_Init+0x44>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	08006759 	.word	0x08006759
 800674c:	080067ff 	.word	0x080067ff
 8006750:	08006759 	.word	0x08006759
 8006754:	080067c1 	.word	0x080067c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006764:	461a      	mov	r2, r3
 8006766:	f240 439d 	movw	r3, #1181	@ 0x49d
 800676a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800676c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006770:	2b00      	cmp	r3, #0
 8006772:	da10      	bge.n	8006796 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	440a      	add	r2, r1
 800678a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800678e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006792:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006794:	e055      	b.n	8006842 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a6f      	ldr	r2, [pc, #444]	@ (8006958 <USB_HC_Init+0x254>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d151      	bne.n	8006842 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067bc:	60d3      	str	r3, [r2, #12]
      break;
 80067be:	e040      	b.n	8006842 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067cc:	461a      	mov	r2, r3
 80067ce:	f240 639d 	movw	r3, #1693	@ 0x69d
 80067d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	da34      	bge.n	8006846 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80067fc:	e023      	b.n	8006846 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680a:	461a      	mov	r2, r3
 800680c:	f240 2325 	movw	r3, #549	@ 0x225
 8006810:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006812:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006816:	2b00      	cmp	r3, #0
 8006818:	da17      	bge.n	800684a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	440a      	add	r2, r1
 8006830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006834:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006838:	60d3      	str	r3, [r2, #12]
      }
      break;
 800683a:	e006      	b.n	800684a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	77fb      	strb	r3, [r7, #31]
      break;
 8006840:	e004      	b.n	800684c <USB_HC_Init+0x148>
      break;
 8006842:	bf00      	nop
 8006844:	e002      	b.n	800684c <USB_HC_Init+0x148>
      break;
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <USB_HC_Init+0x148>
      break;
 800684a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006858:	461a      	mov	r2, r3
 800685a:	2300      	movs	r3, #0
 800685c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	78fa      	ldrb	r2, [r7, #3]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	440a      	add	r2, r1
 8006874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f303 	lsl.w	r3, r1, r3
 8006892:	6939      	ldr	r1, [r7, #16]
 8006894:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006898:	4313      	orrs	r3, r2
 800689a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	da03      	bge.n	80068b8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	e001      	b.n	80068bc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff fef9 	bl	80066b4 <USB_GetHostSpeed>
 80068c2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d106      	bne.n	80068da <USB_HC_Init+0x1d6>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d003      	beq.n	80068da <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	e001      	b.n	80068de <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068de:	787b      	ldrb	r3, [r7, #1]
 80068e0:	059b      	lsls	r3, r3, #22
 80068e2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068e6:	78bb      	ldrb	r3, [r7, #2]
 80068e8:	02db      	lsls	r3, r3, #11
 80068ea:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068ee:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068f4:	049b      	lsls	r3, r3, #18
 80068f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068fa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80068fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80068fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006902:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	431a      	orrs	r2, r3
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	440a      	add	r2, r1
 8006914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006918:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800691c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800691e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006922:	2b03      	cmp	r3, #3
 8006924:	d003      	beq.n	800692e <USB_HC_Init+0x22a>
 8006926:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10f      	bne.n	800694e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006948:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800694c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800694e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40040000 	.word	0x40040000

0800695c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	@ 0x30
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006978:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4a5d      	ldr	r2, [pc, #372]	@ (8006af4 <USB_HC_StartXfer+0x198>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d12f      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d11c      	bne.n	80069c2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	7c9b      	ldrb	r3, [r3, #18]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <USB_HC_StartXfer+0x3c>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	7c9b      	ldrb	r3, [r3, #18]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d124      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	799b      	ldrb	r3, [r3, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d120      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069be:	60d3      	str	r3, [r2, #12]
 80069c0:	e00f      	b.n	80069e2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	795b      	ldrb	r3, [r3, #5]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d107      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	4619      	mov	r1, r3
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fb6b 	bl	80070b4 <USB_DoPing>
        return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e232      	b.n	8006e48 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	799b      	ldrb	r3, [r3, #6]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d158      	bne.n	8006a9c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80069ea:	2301      	movs	r3, #1
 80069ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	78db      	ldrb	r3, [r3, #3]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	8a92      	ldrh	r2, [r2, #20]
 80069fc:	fb03 f202 	mul.w	r2, r3, r2
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	61da      	str	r2, [r3, #28]
 8006a04:	e07c      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	7c9b      	ldrb	r3, [r3, #18]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d130      	bne.n	8006a70 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	2bbc      	cmp	r3, #188	@ 0xbc
 8006a14:	d918      	bls.n	8006a48 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	8a9b      	ldrh	r3, [r3, #20]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d003      	beq.n	8006a38 <USB_HC_StartXfer+0xdc>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d103      	bne.n	8006a40 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	e05f      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2201      	movs	r2, #1
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	e05b      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d007      	beq.n	8006a68 <USB_HC_StartXfer+0x10c>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d003      	beq.n	8006a68 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2204      	movs	r2, #4
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	e04b      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e047      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10d      	bne.n	8006a92 <USB_HC_StartXfer+0x136>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	8a92      	ldrh	r2, [r2, #20]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d907      	bls.n	8006a92 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	8a92      	ldrh	r2, [r2, #20]
 8006a88:	fb03 f202 	mul.w	r2, r3, r2
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	61da      	str	r2, [r3, #28]
 8006a90:	e036      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6a1a      	ldr	r2, [r3, #32]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	61da      	str	r2, [r3, #28]
 8006a9a:	e031      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d018      	beq.n	8006ad6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	8a92      	ldrh	r2, [r2, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	8a92      	ldrh	r2, [r2, #20]
 8006ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006aba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006abc:	8b7b      	ldrh	r3, [r7, #26]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d90b      	bls.n	8006ada <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006ac2:	8b7b      	ldrh	r3, [r7, #26]
 8006ac4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ac6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	8a92      	ldrh	r2, [r2, #20]
 8006acc:	fb03 f202 	mul.w	r2, r3, r2
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	61da      	str	r2, [r3, #28]
 8006ad4:	e001      	b.n	8006ada <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	8a92      	ldrh	r2, [r2, #20]
 8006ae8:	fb03 f202 	mul.w	r2, r3, r2
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61da      	str	r2, [r3, #28]
 8006af0:	e006      	b.n	8006b00 <USB_HC_StartXfer+0x1a4>
 8006af2:	bf00      	nop
 8006af4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b0a:	04d9      	lsls	r1, r3, #19
 8006b0c:	4ba3      	ldr	r3, [pc, #652]	@ (8006d9c <USB_HC_StartXfer+0x440>)
 8006b0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	7d9b      	ldrb	r3, [r3, #22]
 8006b16:	075b      	lsls	r3, r3, #29
 8006b18:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b1c:	69f9      	ldr	r1, [r7, #28]
 8006b1e:	0148      	lsls	r0, r1, #5
 8006b20:	6a39      	ldr	r1, [r7, #32]
 8006b22:	4401      	add	r1, r0
 8006b24:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6999      	ldr	r1, [r3, #24]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b42:	460a      	mov	r2, r1
 8006b44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	7e7b      	ldrb	r3, [r7, #25]
 8006b8e:	075b      	lsls	r3, r3, #29
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	0148      	lsls	r0, r1, #5
 8006b94:	6a39      	ldr	r1, [r7, #32]
 8006b96:	4401      	add	r1, r0
 8006b98:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	799b      	ldrb	r3, [r3, #6]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	f040 80c3 	bne.w	8006d30 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7c5b      	ldrb	r3, [r3, #17]
 8006bae:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bc6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	6a3a      	ldr	r2, [r7, #32]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006be2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006be6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	79db      	ldrb	r3, [r3, #7]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d123      	bne.n	8006c38 <USB_HC_StartXfer+0x2dc>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	78db      	ldrb	r3, [r3, #3]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11f      	bne.n	8006c38 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c16:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c36:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	7c9b      	ldrb	r3, [r3, #18]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d003      	beq.n	8006c48 <USB_HC_StartXfer+0x2ec>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	7c9b      	ldrb	r3, [r3, #18]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d117      	bne.n	8006c78 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d113      	bne.n	8006c78 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	78db      	ldrb	r3, [r3, #3]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d10f      	bne.n	8006c78 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	6a3a      	ldr	r2, [r7, #32]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c76:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	7c9b      	ldrb	r3, [r3, #18]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d162      	bne.n	8006d46 <USB_HC_StartXfer+0x3ea>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	78db      	ldrb	r3, [r3, #3]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d15e      	bne.n	8006d46 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d858      	bhi.n	8006d44 <USB_HC_StartXfer+0x3e8>
 8006c92:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <USB_HC_StartXfer+0x33c>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006ccb 	.word	0x08006ccb
 8006ca0:	08006ced 	.word	0x08006ced
 8006ca4:	08006d0f 	.word	0x08006d0f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	6a3a      	ldr	r2, [r7, #32]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc6:	6053      	str	r3, [r2, #4]
          break;
 8006cc8:	e03d      	b.n	8006d46 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	6a3a      	ldr	r2, [r7, #32]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ce4:	f043 030e 	orr.w	r3, r3, #14
 8006ce8:	6053      	str	r3, [r2, #4]
          break;
 8006cea:	e02c      	b.n	8006d46 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	6a3a      	ldr	r2, [r7, #32]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d0a:	6053      	str	r3, [r2, #4]
          break;
 8006d0c:	e01b      	b.n	8006d46 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	6a3a      	ldr	r2, [r7, #32]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d2c:	6053      	str	r3, [r2, #4]
          break;
 8006d2e:	e00a      	b.n	8006d46 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6053      	str	r3, [r2, #4]
 8006d42:	e000      	b.n	8006d46 <USB_HC_StartXfer+0x3ea>
          break;
 8006d44:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d5c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	78db      	ldrb	r3, [r3, #3]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e003      	b.n	8006d78 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d76:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d7e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e055      	b.n	8006e48 <USB_HC_StartXfer+0x4ec>
 8006d9c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	78db      	ldrb	r3, [r3, #3]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d14e      	bne.n	8006e46 <USB_HC_StartXfer+0x4ea>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d04a      	beq.n	8006e46 <USB_HC_StartXfer+0x4ea>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	79db      	ldrb	r3, [r3, #7]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d146      	bne.n	8006e46 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	7c9b      	ldrb	r3, [r3, #18]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d831      	bhi.n	8006e24 <USB_HC_StartXfer+0x4c8>
 8006dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <USB_HC_StartXfer+0x46c>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006dfd 	.word	0x08006dfd
 8006dd0:	08006dd9 	.word	0x08006dd9
 8006dd4:	08006dfd 	.word	0x08006dfd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	3303      	adds	r3, #3
 8006dde:	089b      	lsrs	r3, r3, #2
 8006de0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006de2:	8afa      	ldrh	r2, [r7, #22]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d91c      	bls.n	8006e28 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f043 0220 	orr.w	r2, r3, #32
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dfa:	e015      	b.n	8006e28 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	3303      	adds	r3, #3
 8006e02:	089b      	lsrs	r3, r3, #2
 8006e04:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e06:	8afa      	ldrh	r2, [r7, #22]
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d90a      	bls.n	8006e2c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e22:	e003      	b.n	8006e2c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006e24:	bf00      	nop
 8006e26:	e002      	b.n	8006e2e <USB_HC_StartXfer+0x4d2>
        break;
 8006e28:	bf00      	nop
 8006e2a:	e000      	b.n	8006e2e <USB_HC_StartXfer+0x4d2>
        break;
 8006e2c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6999      	ldr	r1, [r3, #24]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	785a      	ldrb	r2, [r3, #1]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	9000      	str	r0, [sp, #0]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f7ff f9c3 	bl	80061cc <USB_WritePacket>
  }

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3728      	adds	r7, #40	@ 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	b29b      	uxth	r3, r3
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b089      	sub	sp, #36	@ 0x24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	0c9b      	lsrs	r3, r3, #18
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	0fdb      	lsrs	r3, r3, #31
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	0fdb      	lsrs	r3, r3, #31
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d10d      	bne.n	8006ef4 <USB_HC_Halt+0x82>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <USB_HC_Halt+0x82>
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d002      	beq.n	8006ef0 <USB_HC_Halt+0x7e>
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d101      	bne.n	8006ef4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e0d8      	b.n	80070a6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <USB_HC_Halt+0x8e>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d173      	bne.n	8006fe8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f1e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d14a      	bne.n	8006fc2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d133      	bne.n	8006fa0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f56:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f76:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f84:	d82e      	bhi.n	8006fe4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f9c:	d0ec      	beq.n	8006f78 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f9e:	e081      	b.n	80070a4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fbe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fc0:	e070      	b.n	80070a4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fe0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fe2:	e05f      	b.n	80070a4 <USB_HC_Halt+0x232>
            break;
 8006fe4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fe6:	e05d      	b.n	80070a4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007002:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007006:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d133      	bne.n	8007080 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007036:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	440a      	add	r2, r1
 800704e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007052:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007056:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3301      	adds	r3, #1
 800705c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007064:	d81d      	bhi.n	80070a2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800707c:	d0ec      	beq.n	8007058 <USB_HC_Halt+0x1e6>
 800707e:	e011      	b.n	80070a4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	440a      	add	r2, r1
 8007096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800709a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e000      	b.n	80070a4 <USB_HC_Halt+0x232>
          break;
 80070a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3724      	adds	r7, #36	@ 0x24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070c8:	2301      	movs	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	04da      	lsls	r2, r3, #19
 80070d0:	4b15      	ldr	r3, [pc, #84]	@ (8007128 <USB_DoPing+0x74>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007104:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007112:	461a      	mov	r2, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	1ff80000 	.word	0x1ff80000

0800712c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fe ff86 	bl	8006052 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007146:	2110      	movs	r1, #16
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fe ffdf 	bl	800610c <USB_FlushTxFifo>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff f809 	bl	8006170 <USB_FlushRxFifo>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007168:	2300      	movs	r3, #0
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	e01f      	b.n	80071ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007184:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800718c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007194:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a2:	461a      	mov	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	3301      	adds	r3, #1
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b0f      	cmp	r3, #15
 80071b2:	d9dc      	bls.n	800716e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	e034      	b.n	8007224 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ee:	461a      	mov	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3301      	adds	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007200:	d80c      	bhi.n	800721c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4413      	add	r3, r2
 800720a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007218:	d0ec      	beq.n	80071f4 <USB_StopHost+0xc8>
 800721a:	e000      	b.n	800721e <USB_StopHost+0xf2>
        break;
 800721c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	3301      	adds	r3, #1
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	2b0f      	cmp	r3, #15
 8007228:	d9c7      	bls.n	80071ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007230:	461a      	mov	r2, r3
 8007232:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007236:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800723e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fe fef5 	bl	8006030 <USB_EnableGlobalInt>

  return ret;
 8007246:	7ffb      	ldrb	r3, [r7, #31]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b089      	sub	sp, #36	@ 0x24
 8007254:	af04      	add	r7, sp, #16
 8007256:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007258:	2301      	movs	r3, #1
 800725a:	2202      	movs	r2, #2
 800725c:	2102      	movs	r1, #2
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fc83 	bl	8007b6a <USBH_FindInterface>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2bff      	cmp	r3, #255	@ 0xff
 800726c:	d002      	beq.n	8007274 <USBH_CDC_InterfaceInit+0x24>
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d901      	bls.n	8007278 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007274:	2302      	movs	r3, #2
 8007276:	e13d      	b.n	80074f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fc58 	bl	8007b32 <USBH_SelectInterface>
 8007282:	4603      	mov	r3, r0
 8007284:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800728c:	2302      	movs	r3, #2
 800728e:	e131      	b.n	80074f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007296:	2050      	movs	r0, #80	@ 0x50
 8007298:	f002 fb6a 	bl	8009970 <malloc>
 800729c:	4603      	mov	r3, r0
 800729e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80072b0:	2302      	movs	r3, #2
 80072b2:	e11f      	b.n	80074f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80072b4:	2250      	movs	r2, #80	@ 0x50
 80072b6:	2100      	movs	r1, #0
 80072b8:	68b8      	ldr	r0, [r7, #8]
 80072ba:	f002 fc17 	bl	8009aec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	211a      	movs	r1, #26
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	da15      	bge.n	8007302 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	211a      	movs	r1, #26
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072e6:	781a      	ldrb	r2, [r3, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	211a      	movs	r1, #26
 80072f2:	fb01 f303 	mul.w	r3, r1, r3
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072fc:	881a      	ldrh	r2, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 ffc4 	bl	8009296 <USBH_AllocPipe>
 800730e:	4603      	mov	r3, r0
 8007310:	461a      	mov	r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	7819      	ldrb	r1, [r3, #0]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	7858      	ldrb	r0, [r3, #1]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	8952      	ldrh	r2, [r2, #10]
 800732e:	9202      	str	r2, [sp, #8]
 8007330:	2203      	movs	r2, #3
 8007332:	9201      	str	r2, [sp, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	4623      	mov	r3, r4
 8007338:	4602      	mov	r2, r0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 ff7c 	bl	8009238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2200      	movs	r2, #0
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f002 fa8b 	bl	8009864 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800734e:	2300      	movs	r3, #0
 8007350:	2200      	movs	r2, #0
 8007352:	210a      	movs	r1, #10
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc08 	bl	8007b6a <USBH_FindInterface>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2bff      	cmp	r3, #255	@ 0xff
 8007362:	d002      	beq.n	800736a <USBH_CDC_InterfaceInit+0x11a>
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d901      	bls.n	800736e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800736a:	2302      	movs	r3, #2
 800736c:	e0c2      	b.n	80074f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	211a      	movs	r1, #26
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	b25b      	sxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	da16      	bge.n	80073b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	211a      	movs	r1, #26
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	4413      	add	r3, r2
 8007392:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	211a      	movs	r1, #26
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073ac:	881a      	ldrh	r2, [r3, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	835a      	strh	r2, [r3, #26]
 80073b2:	e015      	b.n	80073e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	211a      	movs	r1, #26
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	4413      	add	r3, r2
 80073c0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073c4:	781a      	ldrb	r2, [r3, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	211a      	movs	r1, #26
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	211a      	movs	r1, #26
 80073e6:	fb01 f303 	mul.w	r3, r1, r3
 80073ea:	4413      	add	r3, r2
 80073ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b25b      	sxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da16      	bge.n	8007426 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	211a      	movs	r1, #26
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	4413      	add	r3, r2
 8007404:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	211a      	movs	r1, #26
 8007414:	fb01 f303 	mul.w	r3, r1, r3
 8007418:	4413      	add	r3, r2
 800741a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800741e:	881a      	ldrh	r2, [r3, #0]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	835a      	strh	r2, [r3, #26]
 8007424:	e015      	b.n	8007452 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	211a      	movs	r1, #26
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	4413      	add	r3, r2
 8007432:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007436:	781a      	ldrb	r2, [r3, #0]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	211a      	movs	r1, #26
 8007442:	fb01 f303 	mul.w	r3, r1, r3
 8007446:	4413      	add	r3, r2
 8007448:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800744c:	881a      	ldrh	r2, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	7b9b      	ldrb	r3, [r3, #14]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 ff1c 	bl	8009296 <USBH_AllocPipe>
 800745e:	4603      	mov	r3, r0
 8007460:	461a      	mov	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	7bdb      	ldrb	r3, [r3, #15]
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 ff12 	bl	8009296 <USBH_AllocPipe>
 8007472:	4603      	mov	r3, r0
 8007474:	461a      	mov	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	7b59      	ldrb	r1, [r3, #13]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	7b98      	ldrb	r0, [r3, #14]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	8b12      	ldrh	r2, [r2, #24]
 8007492:	9202      	str	r2, [sp, #8]
 8007494:	2202      	movs	r2, #2
 8007496:	9201      	str	r2, [sp, #4]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	4623      	mov	r3, r4
 800749c:	4602      	mov	r2, r0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 feca 	bl	8009238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	7b19      	ldrb	r1, [r3, #12]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	7bd8      	ldrb	r0, [r3, #15]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	8b52      	ldrh	r2, [r2, #26]
 80074bc:	9202      	str	r2, [sp, #8]
 80074be:	2202      	movs	r2, #2
 80074c0:	9201      	str	r2, [sp, #4]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	4623      	mov	r3, r4
 80074c6:	4602      	mov	r2, r0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 feb5 	bl	8009238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	7b5b      	ldrb	r3, [r3, #13]
 80074da:	2200      	movs	r2, #0
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f002 f9c0 	bl	8009864 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	7b1b      	ldrb	r3, [r3, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f002 f9b9 	bl	8009864 <USBH_LL_SetToggle>

  return USBH_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd90      	pop	{r4, r7, pc}

080074fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00e      	beq.n	8007534 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 feaa 	bl	8009276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 fed5 	bl	80092d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	7b1b      	ldrb	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	7b1b      	ldrb	r3, [r3, #12]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fe97 	bl	8009276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	7b1b      	ldrb	r3, [r3, #12]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fec2 	bl	80092d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	7b5b      	ldrb	r3, [r3, #13]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00e      	beq.n	8007580 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	7b5b      	ldrb	r3, [r3, #13]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 fe84 	bl	8009276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	7b5b      	ldrb	r3, [r3, #13]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 feaf 	bl	80092d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	4618      	mov	r0, r3
 8007596:	f002 f9f3 	bl	8009980 <free>
    phost->pActiveClass->pData = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075a0:	2200      	movs	r2, #0
 80075a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3340      	adds	r3, #64	@ 0x40
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8b1 	bl	800772e <GetLineCoding>
 80075cc:	4603      	mov	r3, r0
 80075ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075dc:	2102      	movs	r1, #2
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075e2:	7afb      	ldrb	r3, [r7, #11]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800760c:	2b04      	cmp	r3, #4
 800760e:	d877      	bhi.n	8007700 <USBH_CDC_Process+0x114>
 8007610:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <USBH_CDC_Process+0x2c>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	0800762d 	.word	0x0800762d
 800761c:	08007633 	.word	0x08007633
 8007620:	08007663 	.word	0x08007663
 8007624:	080076d7 	.word	0x080076d7
 8007628:	080076e5 	.word	0x080076e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
      break;
 8007630:	e06d      	b.n	800770e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f897 	bl	800776c <SetLineCoding>
 800763e:	4603      	mov	r3, r0
 8007640:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007650:	e058      	b.n	8007704 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d055      	beq.n	8007704 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2204      	movs	r2, #4
 800765c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007660:	e050      	b.n	8007704 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	3340      	adds	r3, #64	@ 0x40
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f860 	bl	800772e <GetLineCoding>
 800766e:	4603      	mov	r3, r0
 8007670:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d126      	bne.n	80076c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768a:	791b      	ldrb	r3, [r3, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d13b      	bne.n	8007708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800769a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800769c:	429a      	cmp	r2, r3
 800769e:	d133      	bne.n	8007708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d12b      	bne.n	8007708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d124      	bne.n	8007708 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f958 	bl	8007974 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076c4:	e020      	b.n	8007708 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d01d      	beq.n	8007708 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2204      	movs	r2, #4
 80076d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80076d4:	e018      	b.n	8007708 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f867 	bl	80077aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f8da 	bl	8007896 <CDC_ProcessReception>
      break;
 80076e2:	e014      	b.n	800770e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 f81e 	bl	8008728 <USBH_ClrFeature>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80076fe:	e005      	b.n	800770c <USBH_CDC_Process+0x120>

    default:
      break;
 8007700:	bf00      	nop
 8007702:	e004      	b.n	800770e <USBH_CDC_Process+0x122>
      break;
 8007704:	bf00      	nop
 8007706:	e002      	b.n	800770e <USBH_CDC_Process+0x122>
      break;
 8007708:	bf00      	nop
 800770a:	e000      	b.n	800770e <USBH_CDC_Process+0x122>
      break;
 800770c:	bf00      	nop

  }

  return status;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	22a1      	movs	r2, #161	@ 0xa1
 800773c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2221      	movs	r2, #33	@ 0x21
 8007742:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2207      	movs	r2, #7
 8007754:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2207      	movs	r2, #7
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fb17 	bl	8008d90 <USBH_CtlReq>
 8007762:	4603      	mov	r3, r0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2221      	movs	r2, #33	@ 0x21
 800777a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2207      	movs	r2, #7
 8007792:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2207      	movs	r2, #7
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 faf8 	bl	8008d90 <USBH_CtlReq>
 80077a0:	4603      	mov	r3, r0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b086      	sub	sp, #24
 80077ae:	af02      	add	r7, sp, #8
 80077b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077bc:	2300      	movs	r3, #0
 80077be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d002      	beq.n	80077d0 <CDC_ProcessTransmission+0x26>
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d023      	beq.n	8007816 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80077ce:	e05e      	b.n	800788e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	8b12      	ldrh	r2, [r2, #24]
 80077d8:	4293      	cmp	r3, r2
 80077da:	d90b      	bls.n	80077f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	69d9      	ldr	r1, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8b1a      	ldrh	r2, [r3, #24]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	7b5b      	ldrb	r3, [r3, #13]
 80077e8:	2001      	movs	r0, #1
 80077ea:	9000      	str	r0, [sp, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fce0 	bl	80091b2 <USBH_BulkSendData>
 80077f2:	e00b      	b.n	800780c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	7b5b      	ldrb	r3, [r3, #13]
 8007802:	2001      	movs	r0, #1
 8007804:	9000      	str	r0, [sp, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fcd3 	bl	80091b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007814:	e03b      	b.n	800788e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	7b5b      	ldrb	r3, [r3, #13]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fff7 	bl	8009810 <USBH_LL_GetURBState>
 8007822:	4603      	mov	r3, r0
 8007824:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d128      	bne.n	800787e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	8b12      	ldrh	r2, [r2, #24]
 8007834:	4293      	cmp	r3, r2
 8007836:	d90e      	bls.n	8007856 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	8b12      	ldrh	r2, [r2, #24]
 8007840:	1a9a      	subs	r2, r3, r2
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	8b12      	ldrh	r2, [r2, #24]
 800784e:	441a      	add	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	61da      	str	r2, [r3, #28]
 8007854:	e002      	b.n	800785c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800786c:	e00e      	b.n	800788c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f868 	bl	800794c <USBH_CDC_TransmitCallback>
      break;
 800787c:	e006      	b.n	800788c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d103      	bne.n	800788c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800788c:	bf00      	nop
  }
}
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d002      	beq.n	80078bc <CDC_ProcessReception+0x26>
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d00e      	beq.n	80078d8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80078ba:	e043      	b.n	8007944 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	6a19      	ldr	r1, [r3, #32]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	8b5a      	ldrh	r2, [r3, #26]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	7b1b      	ldrb	r3, [r3, #12]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fc97 	bl	80091fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2204      	movs	r2, #4
 80078d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80078d6:	e035      	b.n	8007944 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	7b1b      	ldrb	r3, [r3, #12]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 ff96 	bl	8009810 <USBH_LL_GetURBState>
 80078e4:	4603      	mov	r3, r0
 80078e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078e8:	7cfb      	ldrb	r3, [r7, #19]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d129      	bne.n	8007942 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	7b1b      	ldrb	r3, [r3, #12]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fef9 	bl	80096ec <USBH_LL_GetLastXferSize>
 80078fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	429a      	cmp	r2, r3
 8007904:	d016      	beq.n	8007934 <CDC_ProcessReception+0x9e>
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	8b5b      	ldrh	r3, [r3, #26]
 800790a:	461a      	mov	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4293      	cmp	r3, r2
 8007910:	d110      	bne.n	8007934 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	1ad2      	subs	r2, r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	6a1a      	ldr	r2, [r3, #32]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	441a      	add	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2203      	movs	r2, #3
 800792e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007932:	e006      	b.n	8007942 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f80f 	bl	8007960 <USBH_CDC_ReceiveCallback>
      break;
 8007942:	bf00      	nop
  }
}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800799c:	2302      	movs	r3, #2
 800799e:	e029      	b.n	80079f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	79fa      	ldrb	r2, [r7, #7]
 80079a4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f81f 	bl	80079fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f001 fdc9 	bl	8009584 <USBH_LL_Init>

  return USBH_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e009      	b.n	8007a1e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	33e0      	adds	r3, #224	@ 0xe0
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	2200      	movs	r2, #0
 8007a16:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b0f      	cmp	r3, #15
 8007a22:	d9f2      	bls.n	8007a0a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e009      	b.n	8007a3e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a44:	d3f1      	bcc.n	8007a2a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2240      	movs	r2, #64	@ 0x40
 8007a6a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	331c      	adds	r3, #28
 8007a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f002 f825 	bl	8009aec <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 f81c 	bl	8009aec <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007aba:	2212      	movs	r2, #18
 8007abc:	2100      	movs	r1, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f002 f814 	bl	8009aec <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007aca:	223e      	movs	r2, #62	@ 0x3e
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f002 f80c 	bl	8009aec <memset>

  return USBH_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10e      	bne.n	8007b1a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b02:	1c59      	adds	r1, r3, #1
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	33de      	adds	r3, #222	@ 0xde
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
 8007b18:	e004      	b.n	8007b24 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	73fb      	strb	r3, [r7, #15]
 8007b1e:	e001      	b.n	8007b24 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b20:	2302      	movs	r3, #2
 8007b22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d204      	bcs.n	8007b58 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007b56:	e001      	b.n	8007b5c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b087      	sub	sp, #28
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	4608      	mov	r0, r1
 8007b74:	4611      	mov	r1, r2
 8007b76:	461a      	mov	r2, r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	70fb      	strb	r3, [r7, #3]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70bb      	strb	r3, [r7, #2]
 8007b80:	4613      	mov	r3, r2
 8007b82:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b92:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b94:	e025      	b.n	8007be2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	221a      	movs	r2, #26
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	795b      	ldrb	r3, [r3, #5]
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d002      	beq.n	8007bb8 <USBH_FindInterface+0x4e>
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	2bff      	cmp	r3, #255	@ 0xff
 8007bb6:	d111      	bne.n	8007bdc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bbc:	78ba      	ldrb	r2, [r7, #2]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d002      	beq.n	8007bc8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bc2:	78bb      	ldrb	r3, [r7, #2]
 8007bc4:	2bff      	cmp	r3, #255	@ 0xff
 8007bc6:	d109      	bne.n	8007bdc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bcc:	787a      	ldrb	r2, [r7, #1]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d002      	beq.n	8007bd8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bd2:	787b      	ldrb	r3, [r7, #1]
 8007bd4:	2bff      	cmp	r3, #255	@ 0xff
 8007bd6:	d101      	bne.n	8007bdc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	e006      	b.n	8007bea <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	3301      	adds	r3, #1
 8007be0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d9d6      	bls.n	8007b96 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007be8:	23ff      	movs	r3, #255	@ 0xff
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fcfc 	bl	80095fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c04:	2101      	movs	r1, #1
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fe15 	bl	8009836 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af04      	add	r7, sp, #16
 8007c1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c20:	2302      	movs	r3, #2
 8007c22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d102      	bne.n	8007c3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2203      	movs	r2, #3
 8007c38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b0b      	cmp	r3, #11
 8007c42:	f200 81bc 	bhi.w	8007fbe <USBH_Process+0x3a6>
 8007c46:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <USBH_Process+0x34>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007c7d 	.word	0x08007c7d
 8007c50:	08007caf 	.word	0x08007caf
 8007c54:	08007d19 	.word	0x08007d19
 8007c58:	08007f59 	.word	0x08007f59
 8007c5c:	08007fbf 	.word	0x08007fbf
 8007c60:	08007db9 	.word	0x08007db9
 8007c64:	08007eff 	.word	0x08007eff
 8007c68:	08007def 	.word	0x08007def
 8007c6c:	08007e0f 	.word	0x08007e0f
 8007c70:	08007e2d 	.word	0x08007e2d
 8007c74:	08007e71 	.word	0x08007e71
 8007c78:	08007f41 	.word	0x08007f41
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 819c 	beq.w	8007fc2 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c90:	20c8      	movs	r0, #200	@ 0xc8
 8007c92:	f001 fe1a 	bl	80098ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fd0d 	bl	80096b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007cac:	e189      	b.n	8007fc2 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d107      	bne.n	8007cca <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007cc8:	e18a      	b.n	8007fe0 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cd4:	d914      	bls.n	8007d00 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007cdc:	3301      	adds	r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d903      	bls.n	8007cf8 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	220d      	movs	r2, #13
 8007cf4:	701a      	strb	r2, [r3, #0]
      break;
 8007cf6:	e173      	b.n	8007fe0 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
      break;
 8007cfe:	e16f      	b.n	8007fe0 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d06:	f103 020a 	add.w	r2, r3, #10
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007d10:	200a      	movs	r0, #10
 8007d12:	f001 fdda 	bl	80098ca <USBH_Delay>
      break;
 8007d16:	e163      	b.n	8007fe0 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d28:	2104      	movs	r1, #4
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d2e:	2064      	movs	r0, #100	@ 0x64
 8007d30:	f001 fdcb 	bl	80098ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fc97 	bl	8009668 <USBH_LL_GetSpeed>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2205      	movs	r2, #5
 8007d48:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 faa2 	bl	8009296 <USBH_AllocPipe>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461a      	mov	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d5a:	2180      	movs	r1, #128	@ 0x80
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fa9a 	bl	8009296 <USBH_AllocPipe>
 8007d62:	4603      	mov	r3, r0
 8007d64:	461a      	mov	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	7919      	ldrb	r1, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d7e:	9202      	str	r2, [sp, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	9201      	str	r2, [sp, #4]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4603      	mov	r3, r0
 8007d88:	2280      	movs	r2, #128	@ 0x80
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fa54 	bl	8009238 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7959      	ldrb	r1, [r3, #5]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007da4:	9202      	str	r2, [sp, #8]
 8007da6:	2200      	movs	r2, #0
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	4603      	mov	r3, r0
 8007dae:	2200      	movs	r2, #0
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fa41 	bl	8009238 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007db6:	e113      	b.n	8007fe0 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f917 	bl	8007fec <USBH_HandleEnum>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f040 80fd 	bne.w	8007fc6 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d103      	bne.n	8007de6 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2208      	movs	r2, #8
 8007de2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007de4:	e0ef      	b.n	8007fc6 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2207      	movs	r2, #7
 8007dea:	701a      	strb	r2, [r3, #0]
      break;
 8007dec:	e0eb      	b.n	8007fc6 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 80e8 	beq.w	8007fca <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e00:	2101      	movs	r1, #1
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007e0c:	e0dd      	b.n	8007fca <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fc3f 	bl	800869a <USBH_SetCfg>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f040 80d5 	bne.w	8007fce <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2209      	movs	r2, #9
 8007e28:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007e2a:	e0d0      	b.n	8007fce <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d016      	beq.n	8007e68 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc4f 	bl	80086e0 <USBH_SetFeature>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	220a      	movs	r2, #10
 8007e52:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007e54:	e0bd      	b.n	8007fd2 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	f040 80b9 	bne.w	8007fd2 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	220a      	movs	r2, #10
 8007e64:	701a      	strb	r2, [r3, #0]
      break;
 8007e66:	e0b4      	b.n	8007fd2 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	701a      	strb	r2, [r3, #0]
      break;
 8007e6e:	e0b0      	b.n	8007fd2 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80ad 	beq.w	8007fd6 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]
 8007e88:	e016      	b.n	8007eb8 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e8a:	7bfa      	ldrb	r2, [r7, #15]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	32de      	adds	r2, #222	@ 0xde
 8007e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e94:	791a      	ldrb	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d108      	bne.n	8007eb2 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ea0:	7bfa      	ldrb	r2, [r7, #15]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	32de      	adds	r2, #222	@ 0xde
 8007ea6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007eb0:	e005      	b.n	8007ebe <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0e5      	beq.n	8007e8a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d016      	beq.n	8007ef6 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2206      	movs	r2, #6
 8007ede:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007eec:	e073      	b.n	8007fd6 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	220d      	movs	r2, #13
 8007ef2:	701a      	strb	r2, [r3, #0]
      break;
 8007ef4:	e06f      	b.n	8007fd6 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	220d      	movs	r2, #13
 8007efa:	701a      	strb	r2, [r3, #0]
      break;
 8007efc:	e06b      	b.n	8007fd6 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d017      	beq.n	8007f38 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
 8007f14:	4603      	mov	r3, r0
 8007f16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d103      	bne.n	8007f28 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	220b      	movs	r2, #11
 8007f24:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007f26:	e058      	b.n	8007fda <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d154      	bne.n	8007fda <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	220d      	movs	r2, #13
 8007f34:	701a      	strb	r2, [r3, #0]
      break;
 8007f36:	e050      	b.n	8007fda <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220d      	movs	r2, #13
 8007f3c:	701a      	strb	r2, [r3, #0]
      break;
 8007f3e:	e04c      	b.n	8007fda <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d049      	beq.n	8007fde <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
      }
      break;
 8007f56:	e042      	b.n	8007fde <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fd4b 	bl	80079fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d009      	beq.n	8007f84 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f94:	2105      	movs	r1, #5
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d107      	bne.n	8007fb6 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fe21 	bl	8007bf6 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007fb4:	e014      	b.n	8007fe0 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fb20 	bl	80095fc <USBH_LL_Start>
      break;
 8007fbc:	e010      	b.n	8007fe0 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007fbe:	bf00      	nop
 8007fc0:	e00e      	b.n	8007fe0 <USBH_Process+0x3c8>
      break;
 8007fc2:	bf00      	nop
 8007fc4:	e00c      	b.n	8007fe0 <USBH_Process+0x3c8>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e00a      	b.n	8007fe0 <USBH_Process+0x3c8>
    break;
 8007fca:	bf00      	nop
 8007fcc:	e008      	b.n	8007fe0 <USBH_Process+0x3c8>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e006      	b.n	8007fe0 <USBH_Process+0x3c8>
      break;
 8007fd2:	bf00      	nop
 8007fd4:	e004      	b.n	8007fe0 <USBH_Process+0x3c8>
      break;
 8007fd6:	bf00      	nop
 8007fd8:	e002      	b.n	8007fe0 <USBH_Process+0x3c8>
      break;
 8007fda:	bf00      	nop
 8007fdc:	e000      	b.n	8007fe0 <USBH_Process+0x3c8>
      break;
 8007fde:	bf00      	nop
  }
  return USBH_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b07      	cmp	r3, #7
 8008002:	f200 81bd 	bhi.w	8008380 <USBH_HandleEnum+0x394>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <USBH_HandleEnum+0x20>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	0800802d 	.word	0x0800802d
 8008010:	080080e7 	.word	0x080080e7
 8008014:	08008151 	.word	0x08008151
 8008018:	080081db 	.word	0x080081db
 800801c:	08008245 	.word	0x08008245
 8008020:	080082b5 	.word	0x080082b5
 8008024:	080082fb 	.word	0x080082fb
 8008028:	08008341 	.word	0x08008341
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800802c:	2108      	movs	r1, #8
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa50 	bl	80084d4 <USBH_Get_DevDesc>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d12e      	bne.n	800809c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7919      	ldrb	r1, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008062:	9202      	str	r2, [sp, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	9201      	str	r2, [sp, #4]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	4603      	mov	r3, r0
 800806c:	2280      	movs	r2, #128	@ 0x80
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 f8e2 	bl	8009238 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	7959      	ldrb	r1, [r3, #5]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008088:	9202      	str	r2, [sp, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	9201      	str	r2, [sp, #4]
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	4603      	mov	r3, r0
 8008092:	2200      	movs	r2, #0
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 f8cf 	bl	8009238 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800809a:	e173      	b.n	8008384 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	f040 8170 	bne.w	8008384 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080aa:	3301      	adds	r3, #1
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d903      	bls.n	80080c6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	220d      	movs	r2, #13
 80080c2:	701a      	strb	r2, [r3, #0]
      break;
 80080c4:	e15e      	b.n	8008384 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	795b      	ldrb	r3, [r3, #5]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f903 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	791b      	ldrb	r3, [r3, #4]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 f8fd 	bl	80092d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
      break;
 80080e4:	e14e      	b.n	8008384 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080e6:	2112      	movs	r1, #18
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9f3 	bl	80084d4 <USBH_Get_DevDesc>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080fe:	e143      	b.n	8008388 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	2b03      	cmp	r3, #3
 8008104:	f040 8140 	bne.w	8008388 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800810e:	3301      	adds	r3, #1
 8008110:	b2da      	uxtb	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800811e:	2b03      	cmp	r3, #3
 8008120:	d903      	bls.n	800812a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	220d      	movs	r2, #13
 8008126:	701a      	strb	r2, [r3, #0]
      break;
 8008128:	e12e      	b.n	8008388 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	795b      	ldrb	r3, [r3, #5]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 f8d1 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	791b      	ldrb	r3, [r3, #4]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f8cb 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
      break;
 800814e:	e11b      	b.n	8008388 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008150:	2101      	movs	r1, #1
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa7d 	bl	8008652 <USBH_SetAddress>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d130      	bne.n	80081c4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008162:	2002      	movs	r0, #2
 8008164:	f001 fbb1 	bl	80098ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2203      	movs	r2, #3
 8008174:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7919      	ldrb	r1, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800818a:	9202      	str	r2, [sp, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	9201      	str	r2, [sp, #4]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4603      	mov	r3, r0
 8008194:	2280      	movs	r2, #128	@ 0x80
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f84e 	bl	8009238 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7959      	ldrb	r1, [r3, #5]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081b0:	9202      	str	r2, [sp, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	9201      	str	r2, [sp, #4]
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	4603      	mov	r3, r0
 80081ba:	2200      	movs	r2, #0
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f83b 	bl	8009238 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081c2:	e0e3      	b.n	800838c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	f040 80e0 	bne.w	800838c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	220d      	movs	r2, #13
 80081d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	705a      	strb	r2, [r3, #1]
      break;
 80081d8:	e0d8      	b.n	800838c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081da:	2109      	movs	r1, #9
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f9a5 	bl	800852c <USBH_Get_CfgDesc>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d103      	bne.n	80081f4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2204      	movs	r2, #4
 80081f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081f2:	e0cd      	b.n	8008390 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	f040 80ca 	bne.w	8008390 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008202:	3301      	adds	r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008212:	2b03      	cmp	r3, #3
 8008214:	d903      	bls.n	800821e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	220d      	movs	r2, #13
 800821a:	701a      	strb	r2, [r3, #0]
      break;
 800821c:	e0b8      	b.n	8008390 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	795b      	ldrb	r3, [r3, #5]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f857 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	791b      	ldrb	r3, [r3, #4]
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f851 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
      break;
 8008242:	e0a5      	b.n	8008390 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f96d 	bl	800852c <USBH_Get_CfgDesc>
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2205      	movs	r2, #5
 8008260:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008262:	e097      	b.n	8008394 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b03      	cmp	r3, #3
 8008268:	f040 8094 	bne.w	8008394 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008272:	3301      	adds	r3, #1
 8008274:	b2da      	uxtb	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008282:	2b03      	cmp	r3, #3
 8008284:	d903      	bls.n	800828e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	220d      	movs	r2, #13
 800828a:	701a      	strb	r2, [r3, #0]
      break;
 800828c:	e082      	b.n	8008394 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	795b      	ldrb	r3, [r3, #5]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f81f 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	791b      	ldrb	r3, [r3, #4]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f819 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	701a      	strb	r2, [r3, #0]
      break;
 80082b2:	e06f      	b.n	8008394 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d019      	beq.n	80082f2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082ca:	23ff      	movs	r3, #255	@ 0xff
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f957 	bl	8008580 <USBH_Get_StringDesc>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2206      	movs	r2, #6
 80082e0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80082e2:	e059      	b.n	8008398 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d156      	bne.n	8008398 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2206      	movs	r2, #6
 80082ee:	705a      	strb	r2, [r3, #1]
      break;
 80082f0:	e052      	b.n	8008398 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2206      	movs	r2, #6
 80082f6:	705a      	strb	r2, [r3, #1]
      break;
 80082f8:	e04e      	b.n	8008398 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008300:	2b00      	cmp	r3, #0
 8008302:	d019      	beq.n	8008338 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008310:	23ff      	movs	r3, #255	@ 0xff
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f934 	bl	8008580 <USBH_Get_StringDesc>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2207      	movs	r2, #7
 8008326:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008328:	e038      	b.n	800839c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b03      	cmp	r3, #3
 800832e:	d135      	bne.n	800839c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2207      	movs	r2, #7
 8008334:	705a      	strb	r2, [r3, #1]
      break;
 8008336:	e031      	b.n	800839c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2207      	movs	r2, #7
 800833c:	705a      	strb	r2, [r3, #1]
      break;
 800833e:	e02d      	b.n	800839c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008346:	2b00      	cmp	r3, #0
 8008348:	d017      	beq.n	800837a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008356:	23ff      	movs	r3, #255	@ 0xff
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f911 	bl	8008580 <USBH_Get_StringDesc>
 800835e:	4603      	mov	r3, r0
 8008360:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800836c:	e018      	b.n	80083a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b03      	cmp	r3, #3
 8008372:	d115      	bne.n	80083a0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
      break;
 8008378:	e012      	b.n	80083a0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]
      break;
 800837e:	e00f      	b.n	80083a0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008380:	bf00      	nop
 8008382:	e00e      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 8008384:	bf00      	nop
 8008386:	e00c      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 8008388:	bf00      	nop
 800838a:	e00a      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 800838c:	bf00      	nop
 800838e:	e008      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 8008390:	bf00      	nop
 8008392:	e006      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 8008394:	bf00      	nop
 8008396:	e004      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 8008398:	bf00      	nop
 800839a:	e002      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 800839c:	bf00      	nop
 800839e:	e000      	b.n	80083a2 <USBH_HandleEnum+0x3b6>
      break;
 80083a0:	bf00      	nop
  }
  return Status;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f804 	bl	80083ee <USBH_HandleSof>
}
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b0b      	cmp	r3, #11
 80083fe:	d10a      	bne.n	8008416 <USBH_HandleSof+0x28>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
  }
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800842e:	bf00      	nop
}
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8008452:	bf00      	nop
}
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 f8c0 	bl	8009632 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	791b      	ldrb	r3, [r3, #4]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 ff0d 	bl	80092d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	795b      	ldrb	r3, [r3, #5]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 ff07 	bl	80092d8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80084e0:	887b      	ldrh	r3, [r7, #2]
 80084e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e6:	d901      	bls.n	80084ec <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e01b      	b.n	8008524 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80084f2:	887b      	ldrh	r3, [r7, #2]
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4613      	mov	r3, r2
 80084f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f872 	bl	80085e8 <USBH_GetDescriptor>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008514:	887a      	ldrh	r2, [r7, #2]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f929 	bl	8008770 <USBH_ParseDevDesc>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af02      	add	r7, sp, #8
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	331c      	adds	r3, #28
 800853c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800853e:	887b      	ldrh	r3, [r7, #2]
 8008540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008544:	d901      	bls.n	800854a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008546:	2303      	movs	r3, #3
 8008548:	e016      	b.n	8008578 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800854a:	887b      	ldrh	r3, [r7, #2]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008554:	2100      	movs	r1, #0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f846 	bl	80085e8 <USBH_GetDescriptor>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d107      	bne.n	8008576 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008566:	887b      	ldrh	r3, [r7, #2]
 8008568:	461a      	mov	r2, r3
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f9af 	bl	80088d0 <USBH_ParseCfgDesc>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	607a      	str	r2, [r7, #4]
 800858a:	461a      	mov	r2, r3
 800858c:	460b      	mov	r3, r1
 800858e:	72fb      	strb	r3, [r7, #11]
 8008590:	4613      	mov	r3, r2
 8008592:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008594:	893b      	ldrh	r3, [r7, #8]
 8008596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859a:	d802      	bhi.n	80085a2 <USBH_Get_StringDesc+0x22>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e01c      	b.n	80085e0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80085ae:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085b6:	893b      	ldrh	r3, [r7, #8]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	460b      	mov	r3, r1
 80085bc:	2100      	movs	r1, #0
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f812 	bl	80085e8 <USBH_GetDescriptor>
 80085c4:	4603      	mov	r3, r0
 80085c6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d107      	bne.n	80085de <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085d4:	893a      	ldrh	r2, [r7, #8]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fb8c 	bl	8008cf6 <USBH_ParseStringDesc>
  }

  return status;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	607b      	str	r3, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	72fb      	strb	r3, [r7, #11]
 80085f6:	4613      	mov	r3, r2
 80085f8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	789b      	ldrb	r3, [r3, #2]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d11c      	bne.n	800863c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008602:	7afb      	ldrb	r3, [r7, #11]
 8008604:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008608:	b2da      	uxtb	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2206      	movs	r2, #6
 8008612:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	893a      	ldrh	r2, [r7, #8]
 8008618:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800861a:	893b      	ldrh	r3, [r7, #8]
 800861c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008624:	d104      	bne.n	8008630 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f240 4209 	movw	r2, #1033	@ 0x409
 800862c:	829a      	strh	r2, [r3, #20]
 800862e:	e002      	b.n	8008636 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8b3a      	ldrh	r2, [r7, #24]
 800863a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800863c:	8b3b      	ldrh	r3, [r7, #24]
 800863e:	461a      	mov	r2, r3
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 fba4 	bl	8008d90 <USBH_CtlReq>
 8008648:	4603      	mov	r3, r0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b082      	sub	sp, #8
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	789b      	ldrb	r3, [r3, #2]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d10f      	bne.n	8008686 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2205      	movs	r2, #5
 8008670:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	b29a      	uxth	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008686:	2200      	movs	r2, #0
 8008688:	2100      	movs	r1, #0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb80 	bl	8008d90 <USBH_CtlReq>
 8008690:	4603      	mov	r3, r0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	789b      	ldrb	r3, [r3, #2]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d10e      	bne.n	80086cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2209      	movs	r2, #9
 80086b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	887a      	ldrh	r2, [r7, #2]
 80086be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fb5d 	bl	8008d90 <USBH_CtlReq>
 80086d6:	4603      	mov	r3, r0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	789b      	ldrb	r3, [r3, #2]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d10f      	bne.n	8008714 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2203      	movs	r2, #3
 80086fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008714:	2200      	movs	r2, #0
 8008716:	2100      	movs	r1, #0
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fb39 	bl	8008d90 <USBH_CtlReq>
 800871e:	4603      	mov	r3, r0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	789b      	ldrb	r3, [r3, #2]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d10f      	bne.n	800875c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	b29a      	uxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800875c:	2200      	movs	r2, #0
 800875e:	2100      	movs	r1, #0
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fb15 	bl	8008d90 <USBH_CtlReq>
 8008766:	4603      	mov	r3, r0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008784:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008790:	2302      	movs	r3, #2
 8008792:	e094      	b.n	80088be <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	785a      	ldrb	r2, [r3, #1]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	3302      	adds	r3, #2
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	3303      	adds	r3, #3
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	021b      	lsls	r3, r3, #8
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	4313      	orrs	r3, r2
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	791a      	ldrb	r2, [r3, #4]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	795a      	ldrb	r2, [r3, #5]
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	799a      	ldrb	r2, [r3, #6]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	79da      	ldrb	r2, [r3, #7]
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d004      	beq.n	80087f2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d11b      	bne.n	800882a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	79db      	ldrb	r3, [r3, #7]
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	dc0f      	bgt.n	800881a <USBH_ParseDevDesc+0xaa>
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	db0f      	blt.n	800881e <USBH_ParseDevDesc+0xae>
 80087fe:	3b08      	subs	r3, #8
 8008800:	4a32      	ldr	r2, [pc, #200]	@ (80088cc <USBH_ParseDevDesc+0x15c>)
 8008802:	fa22 f303 	lsr.w	r3, r2, r3
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	bf14      	ite	ne
 800880e:	2301      	movne	r3, #1
 8008810:	2300      	moveq	r3, #0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <USBH_ParseDevDesc+0xb6>
 8008818:	e001      	b.n	800881e <USBH_ParseDevDesc+0xae>
 800881a:	2b40      	cmp	r3, #64	@ 0x40
 800881c:	d003      	beq.n	8008826 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2208      	movs	r2, #8
 8008822:	71da      	strb	r2, [r3, #7]
        break;
 8008824:	e000      	b.n	8008828 <USBH_ParseDevDesc+0xb8>
        break;
 8008826:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008828:	e00e      	b.n	8008848 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008830:	2b02      	cmp	r3, #2
 8008832:	d107      	bne.n	8008844 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	79db      	ldrb	r3, [r3, #7]
 8008838:	2b08      	cmp	r3, #8
 800883a:	d005      	beq.n	8008848 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2208      	movs	r2, #8
 8008840:	71da      	strb	r2, [r3, #7]
 8008842:	e001      	b.n	8008848 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008844:	2303      	movs	r3, #3
 8008846:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	2b08      	cmp	r3, #8
 800884c:	d936      	bls.n	80088bc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	3308      	adds	r3, #8
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	3309      	adds	r3, #9
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	021b      	lsls	r3, r3, #8
 800885e:	b29b      	uxth	r3, r3
 8008860:	4313      	orrs	r3, r2
 8008862:	b29a      	uxth	r2, r3
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	330a      	adds	r3, #10
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	330b      	adds	r3, #11
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	4313      	orrs	r3, r2
 800887c:	b29a      	uxth	r2, r3
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	330c      	adds	r3, #12
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	461a      	mov	r2, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	330d      	adds	r3, #13
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	b29b      	uxth	r3, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	b29a      	uxth	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	7b9a      	ldrb	r2, [r3, #14]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	7bda      	ldrb	r2, [r3, #15]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	7c1a      	ldrb	r2, [r3, #16]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	7c5a      	ldrb	r2, [r3, #17]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	01000101 	.word	0x01000101

080088d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08c      	sub	sp, #48	@ 0x30
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	e0de      	b.n	8008ac0 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b09      	cmp	r3, #9
 800890c:	d002      	beq.n	8008914 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800890e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008910:	2209      	movs	r2, #9
 8008912:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	781a      	ldrb	r2, [r3, #0]
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	785a      	ldrb	r2, [r3, #1]
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3302      	adds	r3, #2
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	3303      	adds	r3, #3
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	b29b      	uxth	r3, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	b29b      	uxth	r3, r3
 800893a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893e:	bf28      	it	cs
 8008940:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008944:	b29a      	uxth	r2, r3
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	791a      	ldrb	r2, [r3, #4]
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	795a      	ldrb	r2, [r3, #5]
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	799a      	ldrb	r2, [r3, #6]
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	79da      	ldrb	r2, [r3, #7]
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	7a1a      	ldrb	r2, [r3, #8]
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	2b09      	cmp	r3, #9
 8008976:	f240 80a1 	bls.w	8008abc <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800897a:	2309      	movs	r3, #9
 800897c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008982:	e085      	b.n	8008a90 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008984:	f107 0316 	add.w	r3, r7, #22
 8008988:	4619      	mov	r1, r3
 800898a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800898c:	f000 f9e6 	bl	8008d5c <USBH_GetNextDesc>
 8008990:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	2b04      	cmp	r3, #4
 8008998:	d17a      	bne.n	8008a90 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b09      	cmp	r3, #9
 80089a0:	d002      	beq.n	80089a8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	2209      	movs	r2, #9
 80089a6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80089a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089ac:	221a      	movs	r2, #26
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	3308      	adds	r3, #8
 80089b4:	6a3a      	ldr	r2, [r7, #32]
 80089b6:	4413      	add	r3, r2
 80089b8:	3302      	adds	r3, #2
 80089ba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80089bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089be:	69f8      	ldr	r0, [r7, #28]
 80089c0:	f000 f882 	bl	8008ac8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089ce:	e043      	b.n	8008a58 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089d0:	f107 0316 	add.w	r3, r7, #22
 80089d4:	4619      	mov	r1, r3
 80089d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089d8:	f000 f9c0 	bl	8008d5c <USBH_GetNextDesc>
 80089dc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	d138      	bne.n	8008a58 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d113      	bne.n	8008a16 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d003      	beq.n	80089fe <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	799b      	ldrb	r3, [r3, #6]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d10b      	bne.n	8008a16 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	79db      	ldrb	r3, [r3, #7]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <USBH_ParseCfgDesc+0x14e>
 8008a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d007      	beq.n	8008a1e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a10:	2209      	movs	r2, #9
 8008a12:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a14:	e003      	b.n	8008a1e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a18:	2207      	movs	r2, #7
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e000      	b.n	8008a20 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a1e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a28:	3201      	adds	r2, #1
 8008a2a:	00d2      	lsls	r2, r2, #3
 8008a2c:	211a      	movs	r1, #26
 8008a2e:	fb01 f303 	mul.w	r3, r1, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	3308      	adds	r3, #8
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	4413      	add	r3, r2
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a40:	69b9      	ldr	r1, [r7, #24]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 f86f 	bl	8008b26 <USBH_ParseEPDesc>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a52:	3301      	adds	r3, #1
 8008a54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d80a      	bhi.n	8008a76 <USBH_ParseCfgDesc+0x1a6>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	791b      	ldrb	r3, [r3, #4]
 8008a64:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d204      	bcs.n	8008a76 <USBH_ParseCfgDesc+0x1a6>
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	885a      	ldrh	r2, [r3, #2]
 8008a70:	8afb      	ldrh	r3, [r7, #22]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d8ac      	bhi.n	80089d0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d201      	bcs.n	8008a86 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e01c      	b.n	8008ac0 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8008a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d805      	bhi.n	8008aa4 <USBH_ParseCfgDesc+0x1d4>
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	885a      	ldrh	r2, [r3, #2]
 8008a9c:	8afb      	ldrh	r3, [r7, #22]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	f63f af70 	bhi.w	8008984 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	791b      	ldrb	r3, [r3, #4]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	bf28      	it	cs
 8008aac:	2302      	movcs	r3, #2
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d201      	bcs.n	8008abc <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e001      	b.n	8008ac0 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8008abc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3730      	adds	r7, #48	@ 0x30
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	785a      	ldrb	r2, [r3, #1]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	789a      	ldrb	r2, [r3, #2]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	78da      	ldrb	r2, [r3, #3]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	791a      	ldrb	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	795a      	ldrb	r2, [r3, #5]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	799a      	ldrb	r2, [r3, #6]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	79da      	ldrb	r2, [r3, #7]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	7a1a      	ldrb	r2, [r3, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	721a      	strb	r2, [r3, #8]
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b087      	sub	sp, #28
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	60f8      	str	r0, [r7, #12]
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	785a      	ldrb	r2, [r3, #1]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	789a      	ldrb	r2, [r3, #2]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	78da      	ldrb	r2, [r3, #3]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3305      	adds	r3, #5
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	799a      	ldrb	r2, [r3, #6]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	889b      	ldrh	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d009      	beq.n	8008b94 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b88:	d804      	bhi.n	8008b94 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b92:	d901      	bls.n	8008b98 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008b94:	2303      	movs	r3, #3
 8008b96:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d136      	bne.n	8008c10 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	78db      	ldrb	r3, [r3, #3]
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d108      	bne.n	8008bc0 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	889b      	ldrh	r3, [r3, #4]
 8008bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb6:	f240 8097 	bls.w	8008ce8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	75fb      	strb	r3, [r7, #23]
 8008bbe:	e093      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	78db      	ldrb	r3, [r3, #3]
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d107      	bne.n	8008bdc <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	889b      	ldrh	r3, [r3, #4]
 8008bd0:	2b40      	cmp	r3, #64	@ 0x40
 8008bd2:	f240 8089 	bls.w	8008ce8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	75fb      	strb	r3, [r7, #23]
 8008bda:	e085      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	78db      	ldrb	r3, [r3, #3]
 8008be0:	f003 0303 	and.w	r3, r3, #3
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d005      	beq.n	8008bf4 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	78db      	ldrb	r3, [r3, #3]
 8008bec:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d10a      	bne.n	8008c0a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	799b      	ldrb	r3, [r3, #6]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <USBH_ParseEPDesc+0xde>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	799b      	ldrb	r3, [r3, #6]
 8008c00:	2b10      	cmp	r3, #16
 8008c02:	d970      	bls.n	8008ce6 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008c04:	2303      	movs	r3, #3
 8008c06:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c08:	e06d      	b.n	8008ce6 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	75fb      	strb	r3, [r7, #23]
 8008c0e:	e06b      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d13c      	bne.n	8008c94 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	78db      	ldrb	r3, [r3, #3]
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d005      	beq.n	8008c32 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	78db      	ldrb	r3, [r3, #3]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	889b      	ldrh	r3, [r3, #4]
 8008c36:	2b40      	cmp	r3, #64	@ 0x40
 8008c38:	d956      	bls.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c3e:	e053      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	78db      	ldrb	r3, [r3, #3]
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d10e      	bne.n	8008c6a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	799b      	ldrb	r3, [r3, #6]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d007      	beq.n	8008c64 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008c58:	2b10      	cmp	r3, #16
 8008c5a:	d803      	bhi.n	8008c64 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008c60:	2b40      	cmp	r3, #64	@ 0x40
 8008c62:	d941      	bls.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c64:	2303      	movs	r3, #3
 8008c66:	75fb      	strb	r3, [r7, #23]
 8008c68:	e03e      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	78db      	ldrb	r3, [r3, #3]
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d10b      	bne.n	8008c8e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	799b      	ldrb	r3, [r3, #6]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d004      	beq.n	8008c88 <USBH_ParseEPDesc+0x162>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	889b      	ldrh	r3, [r3, #4]
 8008c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c86:	d32f      	bcc.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	75fb      	strb	r3, [r7, #23]
 8008c8c:	e02c      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	75fb      	strb	r3, [r7, #23]
 8008c92:	e029      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d120      	bne.n	8008ce0 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	78db      	ldrb	r3, [r3, #3]
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d106      	bne.n	8008cb8 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	889b      	ldrh	r3, [r3, #4]
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d01a      	beq.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	75fb      	strb	r3, [r7, #23]
 8008cb6:	e017      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	78db      	ldrb	r3, [r3, #3]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d10a      	bne.n	8008cda <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	799b      	ldrb	r3, [r3, #6]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <USBH_ParseEPDesc+0x1ae>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	889b      	ldrh	r3, [r3, #4]
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d909      	bls.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	75fb      	strb	r3, [r7, #23]
 8008cd8:	e006      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	75fb      	strb	r3, [r7, #23]
 8008cde:	e003      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	75fb      	strb	r3, [r7, #23]
 8008ce4:	e000      	b.n	8008ce8 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ce6:	bf00      	nop
  }

  return status;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b087      	sub	sp, #28
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	4613      	mov	r3, r2
 8008d02:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d120      	bne.n	8008d50 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	1e9a      	subs	r2, r3, #2
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	4293      	cmp	r3, r2
 8008d18:	bf28      	it	cs
 8008d1a:	4613      	movcs	r3, r2
 8008d1c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3302      	adds	r3, #2
 8008d22:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d24:	2300      	movs	r3, #0
 8008d26:	82fb      	strh	r3, [r7, #22]
 8008d28:	e00b      	b.n	8008d42 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d2a:	8afb      	ldrh	r3, [r7, #22]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d3c:	8afb      	ldrh	r3, [r7, #22]
 8008d3e:	3302      	adds	r3, #2
 8008d40:	82fb      	strh	r3, [r7, #22]
 8008d42:	8afa      	ldrh	r2, [r7, #22]
 8008d44:	8abb      	ldrh	r3, [r7, #20]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d3ef      	bcc.n	8008d2a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	701a      	strb	r2, [r3, #0]
  }
}
 8008d50:	bf00      	nop
 8008d52:	371c      	adds	r7, #28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	7812      	ldrb	r2, [r2, #0]
 8008d6e:	4413      	add	r3, r2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4413      	add	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d82:	68fb      	ldr	r3, [r7, #12]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	789b      	ldrb	r3, [r3, #2]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d002      	beq.n	8008db0 <USBH_CtlReq+0x20>
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d00f      	beq.n	8008dce <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008dae:	e027      	b.n	8008e00 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	75fb      	strb	r3, [r7, #23]
      break;
 8008dcc:	e018      	b.n	8008e00 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f81c 	bl	8008e0c <USBH_HandleControl>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <USBH_CtlReq+0x54>
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d106      	bne.n	8008df2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	761a      	strb	r2, [r3, #24]
      break;
 8008df0:	e005      	b.n	8008dfe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d102      	bne.n	8008dfe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	709a      	strb	r2, [r3, #2]
      break;
 8008dfe:	bf00      	nop
  }
  return status;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7e1b      	ldrb	r3, [r3, #24]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	2b0a      	cmp	r3, #10
 8008e24:	f200 8157 	bhi.w	80090d6 <USBH_HandleControl+0x2ca>
 8008e28:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <USBH_HandleControl+0x24>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008e5d 	.word	0x08008e5d
 8008e34:	08008e77 	.word	0x08008e77
 8008e38:	08008ee1 	.word	0x08008ee1
 8008e3c:	08008f07 	.word	0x08008f07
 8008e40:	08008f41 	.word	0x08008f41
 8008e44:	08008f6b 	.word	0x08008f6b
 8008e48:	08008fbd 	.word	0x08008fbd
 8008e4c:	08008fdf 	.word	0x08008fdf
 8008e50:	0800901b 	.word	0x0800901b
 8008e54:	08009041 	.word	0x08009041
 8008e58:	0800907f 	.word	0x0800907f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f103 0110 	add.w	r1, r3, #16
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	795b      	ldrb	r3, [r3, #5]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f945 	bl	80090f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2202      	movs	r2, #2
 8008e72:	761a      	strb	r2, [r3, #24]
      break;
 8008e74:	e13a      	b.n	80090ec <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	795b      	ldrb	r3, [r3, #5]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fcc7 	bl	8009810 <USBH_LL_GetURBState>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d11e      	bne.n	8008eca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7c1b      	ldrb	r3, [r3, #16]
 8008e90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	8adb      	ldrh	r3, [r3, #22]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00a      	beq.n	8008eb4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ea0:	2b80      	cmp	r3, #128	@ 0x80
 8008ea2:	d103      	bne.n	8008eac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008eaa:	e116      	b.n	80090da <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2205      	movs	r2, #5
 8008eb0:	761a      	strb	r2, [r3, #24]
      break;
 8008eb2:	e112      	b.n	80090da <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008eb4:	7b7b      	ldrb	r3, [r7, #13]
 8008eb6:	2b80      	cmp	r3, #128	@ 0x80
 8008eb8:	d103      	bne.n	8008ec2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2209      	movs	r2, #9
 8008ebe:	761a      	strb	r2, [r3, #24]
      break;
 8008ec0:	e10b      	b.n	80090da <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2207      	movs	r2, #7
 8008ec6:	761a      	strb	r2, [r3, #24]
      break;
 8008ec8:	e107      	b.n	80090da <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d003      	beq.n	8008ed8 <USBH_HandleControl+0xcc>
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	f040 8101 	bne.w	80090da <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	220b      	movs	r2, #11
 8008edc:	761a      	strb	r2, [r3, #24]
      break;
 8008ede:	e0fc      	b.n	80090da <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6899      	ldr	r1, [r3, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	899a      	ldrh	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	791b      	ldrb	r3, [r3, #4]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f93c 	bl	8009176 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2204      	movs	r2, #4
 8008f02:	761a      	strb	r2, [r3, #24]
      break;
 8008f04:	e0f2      	b.n	80090ec <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	791b      	ldrb	r3, [r3, #4]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fc7f 	bl	8009810 <USBH_LL_GetURBState>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d103      	bne.n	8008f24 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2209      	movs	r2, #9
 8008f20:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008f22:	e0dc      	b.n	80090de <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	2b05      	cmp	r3, #5
 8008f28:	d102      	bne.n	8008f30 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2e:	e0d6      	b.n	80090de <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	f040 80d3 	bne.w	80090de <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	220b      	movs	r2, #11
 8008f3c:	761a      	strb	r2, [r3, #24]
      break;
 8008f3e:	e0ce      	b.n	80090de <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6899      	ldr	r1, [r3, #8]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	899a      	ldrh	r2, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	795b      	ldrb	r3, [r3, #5]
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	9000      	str	r0, [sp, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8eb 	bl	800912c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2206      	movs	r2, #6
 8008f66:	761a      	strb	r2, [r3, #24]
      break;
 8008f68:	e0c0      	b.n	80090ec <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	795b      	ldrb	r3, [r3, #5]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fc4d 	bl	8009810 <USBH_LL_GetURBState>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d103      	bne.n	8008f88 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2207      	movs	r2, #7
 8008f84:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008f86:	e0ac      	b.n	80090e2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	d105      	bne.n	8008f9a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	220c      	movs	r2, #12
 8008f92:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f94:	2303      	movs	r3, #3
 8008f96:	73fb      	strb	r3, [r7, #15]
      break;
 8008f98:	e0a3      	b.n	80090e2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d103      	bne.n	8008fa8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	761a      	strb	r2, [r3, #24]
      break;
 8008fa6:	e09c      	b.n	80090e2 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	f040 8099 	bne.w	80090e2 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	220b      	movs	r2, #11
 8008fb4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fb6:	2302      	movs	r3, #2
 8008fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fba:	e092      	b.n	80090e2 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	791b      	ldrb	r3, [r3, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f8d6 	bl	8009176 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2208      	movs	r2, #8
 8008fda:	761a      	strb	r2, [r3, #24]

      break;
 8008fdc:	e086      	b.n	80090ec <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fc13 	bl	8009810 <USBH_LL_GetURBState>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d105      	bne.n	8009000 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	220d      	movs	r2, #13
 8008ff8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008ffe:	e072      	b.n	80090e6 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	2b04      	cmp	r3, #4
 8009004:	d103      	bne.n	800900e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	220b      	movs	r2, #11
 800900a:	761a      	strb	r2, [r3, #24]
      break;
 800900c:	e06b      	b.n	80090e6 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b05      	cmp	r3, #5
 8009012:	d168      	bne.n	80090e6 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8009014:	2303      	movs	r3, #3
 8009016:	73fb      	strb	r3, [r7, #15]
      break;
 8009018:	e065      	b.n	80090e6 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	795b      	ldrb	r3, [r3, #5]
 800901e:	2201      	movs	r2, #1
 8009020:	9200      	str	r2, [sp, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	2100      	movs	r1, #0
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f880 	bl	800912c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009032:	b29a      	uxth	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	220a      	movs	r2, #10
 800903c:	761a      	strb	r2, [r3, #24]
      break;
 800903e:	e055      	b.n	80090ec <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	795b      	ldrb	r3, [r3, #5]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fbe2 	bl	8009810 <USBH_LL_GetURBState>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d105      	bne.n	8009062 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	220d      	movs	r2, #13
 800905e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009060:	e043      	b.n	80090ea <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d103      	bne.n	8009070 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2209      	movs	r2, #9
 800906c:	761a      	strb	r2, [r3, #24]
      break;
 800906e:	e03c      	b.n	80090ea <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	2b04      	cmp	r3, #4
 8009074:	d139      	bne.n	80090ea <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	220b      	movs	r2, #11
 800907a:	761a      	strb	r2, [r3, #24]
      break;
 800907c:	e035      	b.n	80090ea <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7e5b      	ldrb	r3, [r3, #25]
 8009082:	3301      	adds	r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	765a      	strb	r2, [r3, #25]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	7e5b      	ldrb	r3, [r3, #25]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d806      	bhi.n	80090a0 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800909e:	e025      	b.n	80090ec <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090a6:	2106      	movs	r1, #6
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	795b      	ldrb	r3, [r3, #5]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f90d 	bl	80092d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	791b      	ldrb	r3, [r3, #4]
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f907 	bl	80092d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80090d0:	2302      	movs	r3, #2
 80090d2:	73fb      	strb	r3, [r7, #15]
      break;
 80090d4:	e00a      	b.n	80090ec <USBH_HandleControl+0x2e0>

    default:
      break;
 80090d6:	bf00      	nop
 80090d8:	e008      	b.n	80090ec <USBH_HandleControl+0x2e0>
      break;
 80090da:	bf00      	nop
 80090dc:	e006      	b.n	80090ec <USBH_HandleControl+0x2e0>
      break;
 80090de:	bf00      	nop
 80090e0:	e004      	b.n	80090ec <USBH_HandleControl+0x2e0>
      break;
 80090e2:	bf00      	nop
 80090e4:	e002      	b.n	80090ec <USBH_HandleControl+0x2e0>
      break;
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <USBH_HandleControl+0x2e0>
      break;
 80090ea:	bf00      	nop
  }

  return status;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop

080090f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af04      	add	r7, sp, #16
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009106:	79f9      	ldrb	r1, [r7, #7]
 8009108:	2300      	movs	r3, #0
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	2308      	movs	r3, #8
 800910e:	9302      	str	r3, [sp, #8]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	2300      	movs	r3, #0
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	2300      	movs	r3, #0
 800911a:	2200      	movs	r2, #0
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fb46 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af04      	add	r7, sp, #16
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4611      	mov	r1, r2
 8009138:	461a      	mov	r2, r3
 800913a:	460b      	mov	r3, r1
 800913c:	80fb      	strh	r3, [r7, #6]
 800913e:	4613      	mov	r3, r2
 8009140:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009150:	7979      	ldrb	r1, [r7, #5]
 8009152:	7e3b      	ldrb	r3, [r7, #24]
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	9302      	str	r3, [sp, #8]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	2301      	movs	r3, #1
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2300      	movs	r3, #0
 8009164:	2200      	movs	r2, #0
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 fb21 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b088      	sub	sp, #32
 800917a:	af04      	add	r7, sp, #16
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	4611      	mov	r1, r2
 8009182:	461a      	mov	r2, r3
 8009184:	460b      	mov	r3, r1
 8009186:	80fb      	strh	r3, [r7, #6]
 8009188:	4613      	mov	r3, r2
 800918a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800918c:	7979      	ldrb	r1, [r7, #5]
 800918e:	2300      	movs	r3, #0
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	2301      	movs	r3, #1
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	2300      	movs	r3, #0
 80091a0:	2201      	movs	r2, #1
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 fb03 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091a8:	2300      	movs	r3, #0

}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af04      	add	r7, sp, #16
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	4611      	mov	r1, r2
 80091be:	461a      	mov	r2, r3
 80091c0:	460b      	mov	r3, r1
 80091c2:	80fb      	strh	r3, [r7, #6]
 80091c4:	4613      	mov	r3, r2
 80091c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091d6:	7979      	ldrb	r1, [r7, #5]
 80091d8:	7e3b      	ldrb	r3, [r7, #24]
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	2301      	movs	r3, #1
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2302      	movs	r3, #2
 80091ea:	2200      	movs	r2, #0
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 fade 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af04      	add	r7, sp, #16
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4611      	mov	r1, r2
 8009208:	461a      	mov	r2, r3
 800920a:	460b      	mov	r3, r1
 800920c:	80fb      	strh	r3, [r7, #6]
 800920e:	4613      	mov	r3, r2
 8009210:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009212:	7979      	ldrb	r1, [r7, #5]
 8009214:	2300      	movs	r3, #0
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	2301      	movs	r3, #1
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2302      	movs	r3, #2
 8009226:	2201      	movs	r2, #1
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 fac0 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af04      	add	r7, sp, #16
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	461a      	mov	r2, r3
 8009246:	4603      	mov	r3, r0
 8009248:	70fb      	strb	r3, [r7, #3]
 800924a:	460b      	mov	r3, r1
 800924c:	70bb      	strb	r3, [r7, #2]
 800924e:	4613      	mov	r3, r2
 8009250:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009252:	7878      	ldrb	r0, [r7, #1]
 8009254:	78ba      	ldrb	r2, [r7, #2]
 8009256:	78f9      	ldrb	r1, [r7, #3]
 8009258:	8b3b      	ldrh	r3, [r7, #24]
 800925a:	9302      	str	r3, [sp, #8]
 800925c:	7d3b      	ldrb	r3, [r7, #20]
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	7c3b      	ldrb	r3, [r7, #16]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	4603      	mov	r3, r0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa53 	bl	8009712 <USBH_LL_OpenPipe>

  return USBH_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa72 	bl	8009770 <USBH_LL_ClosePipe>

  return USBH_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f836 	bl	8009314 <USBH_GetFreePipe>
 80092a8:	4603      	mov	r3, r0
 80092aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00a      	beq.n	80092cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	89fb      	ldrh	r3, [r7, #14]
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	33e0      	adds	r3, #224	@ 0xe0
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80092cc:	89fb      	ldrh	r3, [r7, #14]
 80092ce:	b2db      	uxtb	r3, r3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	d80d      	bhi.n	8009306 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	33e0      	adds	r3, #224	@ 0xe0
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	33e0      	adds	r3, #224	@ 0xe0
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	440b      	add	r3, r1
 8009304:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e00f      	b.n	8009346 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	33e0      	adds	r3, #224	@ 0xe0
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	b29b      	uxth	r3, r3
 800933e:	e007      	b.n	8009350 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	3301      	adds	r3, #1
 8009344:	73fb      	strb	r3, [r7, #15]
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2b0f      	cmp	r3, #15
 800934a:	d9ec      	bls.n	8009326 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800934c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009360:	2201      	movs	r2, #1
 8009362:	490e      	ldr	r1, [pc, #56]	@ (800939c <MX_USB_HOST_Init+0x40>)
 8009364:	480e      	ldr	r0, [pc, #56]	@ (80093a0 <MX_USB_HOST_Init+0x44>)
 8009366:	f7fe fb0f 	bl	8007988 <USBH_Init>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009370:	f7f7 fc62 	bl	8000c38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009374:	490b      	ldr	r1, [pc, #44]	@ (80093a4 <MX_USB_HOST_Init+0x48>)
 8009376:	480a      	ldr	r0, [pc, #40]	@ (80093a0 <MX_USB_HOST_Init+0x44>)
 8009378:	f7fe fbb1 	bl	8007ade <USBH_RegisterClass>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009382:	f7f7 fc59 	bl	8000c38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009386:	4806      	ldr	r0, [pc, #24]	@ (80093a0 <MX_USB_HOST_Init+0x44>)
 8009388:	f7fe fc35 	bl	8007bf6 <USBH_Start>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009392:	f7f7 fc51 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009396:	bf00      	nop
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	080093bd 	.word	0x080093bd
 80093a0:	200001dc 	.word	0x200001dc
 80093a4:	2000000c 	.word	0x2000000c

080093a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80093ac:	4802      	ldr	r0, [pc, #8]	@ (80093b8 <MX_USB_HOST_Process+0x10>)
 80093ae:	f7fe fc33 	bl	8007c18 <USBH_Process>
}
 80093b2:	bf00      	nop
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200001dc 	.word	0x200001dc

080093bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d819      	bhi.n	8009404 <USBH_UserProcess+0x48>
 80093d0:	a201      	add	r2, pc, #4	@ (adr r2, 80093d8 <USBH_UserProcess+0x1c>)
 80093d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d6:	bf00      	nop
 80093d8:	08009405 	.word	0x08009405
 80093dc:	080093f5 	.word	0x080093f5
 80093e0:	08009405 	.word	0x08009405
 80093e4:	080093fd 	.word	0x080093fd
 80093e8:	080093ed 	.word	0x080093ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80093ec:	4b09      	ldr	r3, [pc, #36]	@ (8009414 <USBH_UserProcess+0x58>)
 80093ee:	2203      	movs	r2, #3
 80093f0:	701a      	strb	r2, [r3, #0]
  break;
 80093f2:	e008      	b.n	8009406 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80093f4:	4b07      	ldr	r3, [pc, #28]	@ (8009414 <USBH_UserProcess+0x58>)
 80093f6:	2202      	movs	r2, #2
 80093f8:	701a      	strb	r2, [r3, #0]
  break;
 80093fa:	e004      	b.n	8009406 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80093fc:	4b05      	ldr	r3, [pc, #20]	@ (8009414 <USBH_UserProcess+0x58>)
 80093fe:	2201      	movs	r2, #1
 8009400:	701a      	strb	r2, [r3, #0]
  break;
 8009402:	e000      	b.n	8009406 <USBH_UserProcess+0x4a>

  default:
  break;
 8009404:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	200005b4 	.word	0x200005b4

08009418 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08a      	sub	sp, #40	@ 0x28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009420:	f107 0314 	add.w	r3, r7, #20
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	605a      	str	r2, [r3, #4]
 800942a:	609a      	str	r2, [r3, #8]
 800942c:	60da      	str	r2, [r3, #12]
 800942e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009438:	d147      	bne.n	80094ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800943a:	2300      	movs	r3, #0
 800943c:	613b      	str	r3, [r7, #16]
 800943e:	4b25      	ldr	r3, [pc, #148]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009442:	4a24      	ldr	r2, [pc, #144]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	6313      	str	r3, [r2, #48]	@ 0x30
 800944a:	4b22      	ldr	r3, [pc, #136]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 800944c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009456:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800945a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800945c:	2300      	movs	r3, #0
 800945e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009464:	f107 0314 	add.w	r3, r7, #20
 8009468:	4619      	mov	r1, r3
 800946a:	481b      	ldr	r0, [pc, #108]	@ (80094d8 <HAL_HCD_MspInit+0xc0>)
 800946c:	f7f7 ffd2 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009470:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009476:	2302      	movs	r3, #2
 8009478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800947e:	2300      	movs	r3, #0
 8009480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009482:	230a      	movs	r3, #10
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009486:	f107 0314 	add.w	r3, r7, #20
 800948a:	4619      	mov	r1, r3
 800948c:	4812      	ldr	r0, [pc, #72]	@ (80094d8 <HAL_HCD_MspInit+0xc0>)
 800948e:	f7f7 ffc1 	bl	8001414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009492:	4b10      	ldr	r3, [pc, #64]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009496:	4a0f      	ldr	r2, [pc, #60]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800949c:	6353      	str	r3, [r2, #52]	@ 0x34
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 80094a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094a6:	4a0b      	ldr	r2, [pc, #44]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 80094a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80094ae:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 80094b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	2043      	movs	r0, #67	@ 0x43
 80094c0:	f7f7 ff71 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094c4:	2043      	movs	r0, #67	@ 0x43
 80094c6:	f7f7 ff8a 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094ca:	bf00      	nop
 80094cc:	3728      	adds	r7, #40	@ 0x28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40023800 	.word	0x40023800
 80094d8:	40020000 	.word	0x40020000

080094dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe ff6d 	bl	80083ca <USBH_LL_IncTimer>
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe ffa9 	bl	800845e <USBH_LL_Connect>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe ffb2 	bl	800848c <USBH_LL_Disconnect>
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
 800953c:	4613      	mov	r3, r2
 800953e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe ff5f 	bl	800841e <USBH_LL_PortEnabled>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe ff5f 	bl	800843a <USBH_LL_PortDisabled>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009592:	2b01      	cmp	r3, #1
 8009594:	d12a      	bne.n	80095ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009596:	4a18      	ldr	r2, [pc, #96]	@ (80095f8 <USBH_LL_Init+0x74>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a15      	ldr	r2, [pc, #84]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095a6:	4b14      	ldr	r3, [pc, #80]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80095ae:	4b12      	ldr	r3, [pc, #72]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095b0:	2208      	movs	r2, #8
 80095b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80095b4:	4b10      	ldr	r3, [pc, #64]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095ba:	4b0f      	ldr	r3, [pc, #60]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095bc:	2200      	movs	r2, #0
 80095be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80095c0:	4b0d      	ldr	r3, [pc, #52]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095c2:	2202      	movs	r2, #2
 80095c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095c6:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80095cc:	480a      	ldr	r0, [pc, #40]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095ce:	f7f8 f8d6 	bl	800177e <HAL_HCD_Init>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80095d8:	f7f7 fb2e 	bl	8000c38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80095dc:	4806      	ldr	r0, [pc, #24]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095de:	f7f8 fd37 	bl	8002050 <HAL_HCD_GetCurrentFrame>
 80095e2:	4603      	mov	r3, r0
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7fe fee0 	bl	80083ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200005b8 	.word	0x200005b8

080095fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009612:	4618      	mov	r0, r3
 8009614:	f7f8 fca4 	bl	8001f60 <HAL_HCD_Start>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4618      	mov	r0, r3
 8009620:	f000 f95e 	bl	80098e0 <USBH_Get_USB_Status>
 8009624:	4603      	mov	r3, r0
 8009626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009628:	7bbb      	ldrb	r3, [r7, #14]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009648:	4618      	mov	r0, r3
 800964a:	f7f8 fcac 	bl	8001fa6 <HAL_HCD_Stop>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f943 	bl	80098e0 <USBH_Get_USB_Status>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800967a:	4618      	mov	r0, r3
 800967c:	f7f8 fcf6 	bl	800206c <HAL_HCD_GetCurrentSpeed>
 8009680:	4603      	mov	r3, r0
 8009682:	2b02      	cmp	r3, #2
 8009684:	d00c      	beq.n	80096a0 <USBH_LL_GetSpeed+0x38>
 8009686:	2b02      	cmp	r3, #2
 8009688:	d80d      	bhi.n	80096a6 <USBH_LL_GetSpeed+0x3e>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <USBH_LL_GetSpeed+0x2c>
 800968e:	2b01      	cmp	r3, #1
 8009690:	d003      	beq.n	800969a <USBH_LL_GetSpeed+0x32>
 8009692:	e008      	b.n	80096a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
    break;
 8009698:	e008      	b.n	80096ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800969a:	2301      	movs	r3, #1
 800969c:	73fb      	strb	r3, [r7, #15]
    break;
 800969e:	e005      	b.n	80096ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80096a0:	2302      	movs	r3, #2
 80096a2:	73fb      	strb	r3, [r7, #15]
    break;
 80096a4:	e002      	b.n	80096ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80096a6:	2301      	movs	r3, #1
 80096a8:	73fb      	strb	r3, [r7, #15]
    break;
 80096aa:	bf00      	nop
  }
  return  speed;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7f8 fc87 	bl	8001fe0 <HAL_HCD_ResetPort>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f901 	bl	80098e0 <USBH_Get_USB_Status>
 80096de:	4603      	mov	r3, r0
 80096e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	4611      	mov	r1, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7f8 fc8f 	bl	8002026 <HAL_HCD_HC_GetXferCount>
 8009708:	4603      	mov	r3, r0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009712:	b590      	push	{r4, r7, lr}
 8009714:	b089      	sub	sp, #36	@ 0x24
 8009716:	af04      	add	r7, sp, #16
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	4608      	mov	r0, r1
 800971c:	4611      	mov	r1, r2
 800971e:	461a      	mov	r2, r3
 8009720:	4603      	mov	r3, r0
 8009722:	70fb      	strb	r3, [r7, #3]
 8009724:	460b      	mov	r3, r1
 8009726:	70bb      	strb	r3, [r7, #2]
 8009728:	4613      	mov	r3, r2
 800972a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800973a:	787c      	ldrb	r4, [r7, #1]
 800973c:	78ba      	ldrb	r2, [r7, #2]
 800973e:	78f9      	ldrb	r1, [r7, #3]
 8009740:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009742:	9302      	str	r3, [sp, #8]
 8009744:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	4623      	mov	r3, r4
 8009752:	f7f8 f87b 	bl	800184c <HAL_HCD_HC_Init>
 8009756:	4603      	mov	r3, r0
 8009758:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f8bf 	bl	80098e0 <USBH_Get_USB_Status>
 8009762:	4603      	mov	r3, r0
 8009764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009766:	7bbb      	ldrb	r3, [r7, #14]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	bd90      	pop	{r4, r7, pc}

08009770 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	4611      	mov	r1, r2
 800978e:	4618      	mov	r0, r3
 8009790:	f7f8 f914 	bl	80019bc <HAL_HCD_HC_Halt>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f8a0 	bl	80098e0 <USBH_Get_USB_Status>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80097ae:	b590      	push	{r4, r7, lr}
 80097b0:	b089      	sub	sp, #36	@ 0x24
 80097b2:	af04      	add	r7, sp, #16
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	461a      	mov	r2, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70bb      	strb	r3, [r7, #2]
 80097c4:	4613      	mov	r3, r2
 80097c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097d6:	787c      	ldrb	r4, [r7, #1]
 80097d8:	78ba      	ldrb	r2, [r7, #2]
 80097da:	78f9      	ldrb	r1, [r7, #3]
 80097dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80097e0:	9303      	str	r3, [sp, #12]
 80097e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097e4:	9302      	str	r3, [sp, #8]
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4623      	mov	r3, r4
 80097f2:	f7f8 f907 	bl	8001a04 <HAL_HCD_HC_SubmitRequest>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f86f 	bl	80098e0 <USBH_Get_USB_Status>
 8009802:	4603      	mov	r3, r0
 8009804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009806:	7bbb      	ldrb	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	bd90      	pop	{r4, r7, pc}

08009810 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7f8 fbe8 	bl	8001ffc <HAL_HCD_HC_GetURBState>
 800982c:	4603      	mov	r3, r0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009848:	2b01      	cmp	r3, #1
 800984a:	d103      	bne.n	8009854 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f872 	bl	8009938 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009854:	20c8      	movs	r0, #200	@ 0xc8
 8009856:	f7f7 fca7 	bl	80011a8 <HAL_Delay>
  return USBH_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
 8009870:	4613      	mov	r3, r2
 8009872:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800987a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	4613      	mov	r3, r2
 8009882:	011b      	lsls	r3, r3, #4
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	3317      	adds	r3, #23
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	68f9      	ldr	r1, [r7, #12]
 8009896:	4613      	mov	r3, r2
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	333c      	adds	r3, #60	@ 0x3c
 80098a2:	78ba      	ldrb	r2, [r7, #2]
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	e009      	b.n	80098bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	4613      	mov	r3, r2
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	333d      	adds	r3, #61	@ 0x3d
 80098b8:	78ba      	ldrb	r2, [r7, #2]
 80098ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7f7 fc68 	bl	80011a8 <HAL_Delay>
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d817      	bhi.n	8009924 <USBH_Get_USB_Status+0x44>
 80098f4:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <USBH_Get_USB_Status+0x1c>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	0800990d 	.word	0x0800990d
 8009900:	08009913 	.word	0x08009913
 8009904:	08009919 	.word	0x08009919
 8009908:	0800991f 	.word	0x0800991f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
    break;
 8009910:	e00b      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009912:	2302      	movs	r3, #2
 8009914:	73fb      	strb	r3, [r7, #15]
    break;
 8009916:	e008      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009918:	2301      	movs	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
    break;
 800991c:	e005      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800991e:	2302      	movs	r3, #2
 8009920:	73fb      	strb	r3, [r7, #15]
    break;
 8009922:	e002      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009924:	2302      	movs	r3, #2
 8009926:	73fb      	strb	r3, [r7, #15]
    break;
 8009928:	bf00      	nop
  }
  return usb_status;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800994c:	2300      	movs	r3, #0
 800994e:	73fb      	strb	r3, [r7, #15]
 8009950:	e001      	b.n	8009956 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009952:	2301      	movs	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	461a      	mov	r2, r3
 800995a:	2101      	movs	r1, #1
 800995c:	4803      	ldr	r0, [pc, #12]	@ (800996c <MX_DriverVbusFS+0x34>)
 800995e:	f7f7 fef5 	bl	800174c <HAL_GPIO_WritePin>
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	40020800 	.word	0x40020800

08009970 <malloc>:
 8009970:	4b02      	ldr	r3, [pc, #8]	@ (800997c <malloc+0xc>)
 8009972:	4601      	mov	r1, r0
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	f000 b82d 	b.w	80099d4 <_malloc_r>
 800997a:	bf00      	nop
 800997c:	2000002c 	.word	0x2000002c

08009980 <free>:
 8009980:	4b02      	ldr	r3, [pc, #8]	@ (800998c <free+0xc>)
 8009982:	4601      	mov	r1, r0
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	f000 b8f5 	b.w	8009b74 <_free_r>
 800998a:	bf00      	nop
 800998c:	2000002c 	.word	0x2000002c

08009990 <sbrk_aligned>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4e0f      	ldr	r6, [pc, #60]	@ (80099d0 <sbrk_aligned+0x40>)
 8009994:	460c      	mov	r4, r1
 8009996:	6831      	ldr	r1, [r6, #0]
 8009998:	4605      	mov	r5, r0
 800999a:	b911      	cbnz	r1, 80099a2 <sbrk_aligned+0x12>
 800999c:	f000 f8ae 	bl	8009afc <_sbrk_r>
 80099a0:	6030      	str	r0, [r6, #0]
 80099a2:	4621      	mov	r1, r4
 80099a4:	4628      	mov	r0, r5
 80099a6:	f000 f8a9 	bl	8009afc <_sbrk_r>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d103      	bne.n	80099b6 <sbrk_aligned+0x26>
 80099ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80099b2:	4620      	mov	r0, r4
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	1cc4      	adds	r4, r0, #3
 80099b8:	f024 0403 	bic.w	r4, r4, #3
 80099bc:	42a0      	cmp	r0, r4
 80099be:	d0f8      	beq.n	80099b2 <sbrk_aligned+0x22>
 80099c0:	1a21      	subs	r1, r4, r0
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f89a 	bl	8009afc <_sbrk_r>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d1f2      	bne.n	80099b2 <sbrk_aligned+0x22>
 80099cc:	e7ef      	b.n	80099ae <sbrk_aligned+0x1e>
 80099ce:	bf00      	nop
 80099d0:	20000998 	.word	0x20000998

080099d4 <_malloc_r>:
 80099d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d8:	1ccd      	adds	r5, r1, #3
 80099da:	f025 0503 	bic.w	r5, r5, #3
 80099de:	3508      	adds	r5, #8
 80099e0:	2d0c      	cmp	r5, #12
 80099e2:	bf38      	it	cc
 80099e4:	250c      	movcc	r5, #12
 80099e6:	2d00      	cmp	r5, #0
 80099e8:	4606      	mov	r6, r0
 80099ea:	db01      	blt.n	80099f0 <_malloc_r+0x1c>
 80099ec:	42a9      	cmp	r1, r5
 80099ee:	d904      	bls.n	80099fa <_malloc_r+0x26>
 80099f0:	230c      	movs	r3, #12
 80099f2:	6033      	str	r3, [r6, #0]
 80099f4:	2000      	movs	r0, #0
 80099f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ad0 <_malloc_r+0xfc>
 80099fe:	f000 f869 	bl	8009ad4 <__malloc_lock>
 8009a02:	f8d8 3000 	ldr.w	r3, [r8]
 8009a06:	461c      	mov	r4, r3
 8009a08:	bb44      	cbnz	r4, 8009a5c <_malloc_r+0x88>
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7ff ffbf 	bl	8009990 <sbrk_aligned>
 8009a12:	1c43      	adds	r3, r0, #1
 8009a14:	4604      	mov	r4, r0
 8009a16:	d158      	bne.n	8009aca <_malloc_r+0xf6>
 8009a18:	f8d8 4000 	ldr.w	r4, [r8]
 8009a1c:	4627      	mov	r7, r4
 8009a1e:	2f00      	cmp	r7, #0
 8009a20:	d143      	bne.n	8009aaa <_malloc_r+0xd6>
 8009a22:	2c00      	cmp	r4, #0
 8009a24:	d04b      	beq.n	8009abe <_malloc_r+0xea>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	4639      	mov	r1, r7
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	eb04 0903 	add.w	r9, r4, r3
 8009a30:	f000 f864 	bl	8009afc <_sbrk_r>
 8009a34:	4581      	cmp	r9, r0
 8009a36:	d142      	bne.n	8009abe <_malloc_r+0xea>
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	1a6d      	subs	r5, r5, r1
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f7ff ffa6 	bl	8009990 <sbrk_aligned>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d03a      	beq.n	8009abe <_malloc_r+0xea>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	442b      	add	r3, r5
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	bb62      	cbnz	r2, 8009ab0 <_malloc_r+0xdc>
 8009a56:	f8c8 7000 	str.w	r7, [r8]
 8009a5a:	e00f      	b.n	8009a7c <_malloc_r+0xa8>
 8009a5c:	6822      	ldr	r2, [r4, #0]
 8009a5e:	1b52      	subs	r2, r2, r5
 8009a60:	d420      	bmi.n	8009aa4 <_malloc_r+0xd0>
 8009a62:	2a0b      	cmp	r2, #11
 8009a64:	d917      	bls.n	8009a96 <_malloc_r+0xc2>
 8009a66:	1961      	adds	r1, r4, r5
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	6025      	str	r5, [r4, #0]
 8009a6c:	bf18      	it	ne
 8009a6e:	6059      	strne	r1, [r3, #4]
 8009a70:	6863      	ldr	r3, [r4, #4]
 8009a72:	bf08      	it	eq
 8009a74:	f8c8 1000 	streq.w	r1, [r8]
 8009a78:	5162      	str	r2, [r4, r5]
 8009a7a:	604b      	str	r3, [r1, #4]
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f000 f82f 	bl	8009ae0 <__malloc_unlock>
 8009a82:	f104 000b 	add.w	r0, r4, #11
 8009a86:	1d23      	adds	r3, r4, #4
 8009a88:	f020 0007 	bic.w	r0, r0, #7
 8009a8c:	1ac2      	subs	r2, r0, r3
 8009a8e:	bf1c      	itt	ne
 8009a90:	1a1b      	subne	r3, r3, r0
 8009a92:	50a3      	strne	r3, [r4, r2]
 8009a94:	e7af      	b.n	80099f6 <_malloc_r+0x22>
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	bf0c      	ite	eq
 8009a9c:	f8c8 2000 	streq.w	r2, [r8]
 8009aa0:	605a      	strne	r2, [r3, #4]
 8009aa2:	e7eb      	b.n	8009a7c <_malloc_r+0xa8>
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	6864      	ldr	r4, [r4, #4]
 8009aa8:	e7ae      	b.n	8009a08 <_malloc_r+0x34>
 8009aaa:	463c      	mov	r4, r7
 8009aac:	687f      	ldr	r7, [r7, #4]
 8009aae:	e7b6      	b.n	8009a1e <_malloc_r+0x4a>
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d1fb      	bne.n	8009ab0 <_malloc_r+0xdc>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6053      	str	r3, [r2, #4]
 8009abc:	e7de      	b.n	8009a7c <_malloc_r+0xa8>
 8009abe:	230c      	movs	r3, #12
 8009ac0:	6033      	str	r3, [r6, #0]
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f000 f80c 	bl	8009ae0 <__malloc_unlock>
 8009ac8:	e794      	b.n	80099f4 <_malloc_r+0x20>
 8009aca:	6005      	str	r5, [r0, #0]
 8009acc:	e7d6      	b.n	8009a7c <_malloc_r+0xa8>
 8009ace:	bf00      	nop
 8009ad0:	2000099c 	.word	0x2000099c

08009ad4 <__malloc_lock>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	@ (8009adc <__malloc_lock+0x8>)
 8009ad6:	f000 b84b 	b.w	8009b70 <__retarget_lock_acquire_recursive>
 8009ada:	bf00      	nop
 8009adc:	20000ad8 	.word	0x20000ad8

08009ae0 <__malloc_unlock>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	@ (8009ae8 <__malloc_unlock+0x8>)
 8009ae2:	f000 b846 	b.w	8009b72 <__retarget_lock_release_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20000ad8 	.word	0x20000ad8

08009aec <memset>:
 8009aec:	4402      	add	r2, r0
 8009aee:	4603      	mov	r3, r0
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d100      	bne.n	8009af6 <memset+0xa>
 8009af4:	4770      	bx	lr
 8009af6:	f803 1b01 	strb.w	r1, [r3], #1
 8009afa:	e7f9      	b.n	8009af0 <memset+0x4>

08009afc <_sbrk_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d06      	ldr	r5, [pc, #24]	@ (8009b18 <_sbrk_r+0x1c>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	602b      	str	r3, [r5, #0]
 8009b08:	f7f7 fa6a 	bl	8000fe0 <_sbrk>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_sbrk_r+0x1a>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_sbrk_r+0x1a>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20000adc 	.word	0x20000adc

08009b1c <__errno>:
 8009b1c:	4b01      	ldr	r3, [pc, #4]	@ (8009b24 <__errno+0x8>)
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	2000002c 	.word	0x2000002c

08009b28 <__libc_init_array>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b60 <__libc_init_array+0x38>)
 8009b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8009b64 <__libc_init_array+0x3c>)
 8009b2e:	1b64      	subs	r4, r4, r5
 8009b30:	10a4      	asrs	r4, r4, #2
 8009b32:	2600      	movs	r6, #0
 8009b34:	42a6      	cmp	r6, r4
 8009b36:	d109      	bne.n	8009b4c <__libc_init_array+0x24>
 8009b38:	4d0b      	ldr	r5, [pc, #44]	@ (8009b68 <__libc_init_array+0x40>)
 8009b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8009b6c <__libc_init_array+0x44>)
 8009b3c:	f000 f864 	bl	8009c08 <_init>
 8009b40:	1b64      	subs	r4, r4, r5
 8009b42:	10a4      	asrs	r4, r4, #2
 8009b44:	2600      	movs	r6, #0
 8009b46:	42a6      	cmp	r6, r4
 8009b48:	d105      	bne.n	8009b56 <__libc_init_array+0x2e>
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b50:	4798      	blx	r3
 8009b52:	3601      	adds	r6, #1
 8009b54:	e7ee      	b.n	8009b34 <__libc_init_array+0xc>
 8009b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b5a:	4798      	blx	r3
 8009b5c:	3601      	adds	r6, #1
 8009b5e:	e7f2      	b.n	8009b46 <__libc_init_array+0x1e>
 8009b60:	08009c44 	.word	0x08009c44
 8009b64:	08009c44 	.word	0x08009c44
 8009b68:	08009c44 	.word	0x08009c44
 8009b6c:	08009c48 	.word	0x08009c48

08009b70 <__retarget_lock_acquire_recursive>:
 8009b70:	4770      	bx	lr

08009b72 <__retarget_lock_release_recursive>:
 8009b72:	4770      	bx	lr

08009b74 <_free_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4605      	mov	r5, r0
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d041      	beq.n	8009c00 <_free_r+0x8c>
 8009b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b80:	1f0c      	subs	r4, r1, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfb8      	it	lt
 8009b86:	18e4      	addlt	r4, r4, r3
 8009b88:	f7ff ffa4 	bl	8009ad4 <__malloc_lock>
 8009b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c04 <_free_r+0x90>)
 8009b8e:	6813      	ldr	r3, [r2, #0]
 8009b90:	b933      	cbnz	r3, 8009ba0 <_free_r+0x2c>
 8009b92:	6063      	str	r3, [r4, #4]
 8009b94:	6014      	str	r4, [r2, #0]
 8009b96:	4628      	mov	r0, r5
 8009b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b9c:	f7ff bfa0 	b.w	8009ae0 <__malloc_unlock>
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d908      	bls.n	8009bb6 <_free_r+0x42>
 8009ba4:	6820      	ldr	r0, [r4, #0]
 8009ba6:	1821      	adds	r1, r4, r0
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	bf01      	itttt	eq
 8009bac:	6819      	ldreq	r1, [r3, #0]
 8009bae:	685b      	ldreq	r3, [r3, #4]
 8009bb0:	1809      	addeq	r1, r1, r0
 8009bb2:	6021      	streq	r1, [r4, #0]
 8009bb4:	e7ed      	b.n	8009b92 <_free_r+0x1e>
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	b10b      	cbz	r3, 8009bc0 <_free_r+0x4c>
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	d9fa      	bls.n	8009bb6 <_free_r+0x42>
 8009bc0:	6811      	ldr	r1, [r2, #0]
 8009bc2:	1850      	adds	r0, r2, r1
 8009bc4:	42a0      	cmp	r0, r4
 8009bc6:	d10b      	bne.n	8009be0 <_free_r+0x6c>
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	4401      	add	r1, r0
 8009bcc:	1850      	adds	r0, r2, r1
 8009bce:	4283      	cmp	r3, r0
 8009bd0:	6011      	str	r1, [r2, #0]
 8009bd2:	d1e0      	bne.n	8009b96 <_free_r+0x22>
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	6053      	str	r3, [r2, #4]
 8009bda:	4408      	add	r0, r1
 8009bdc:	6010      	str	r0, [r2, #0]
 8009bde:	e7da      	b.n	8009b96 <_free_r+0x22>
 8009be0:	d902      	bls.n	8009be8 <_free_r+0x74>
 8009be2:	230c      	movs	r3, #12
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	e7d6      	b.n	8009b96 <_free_r+0x22>
 8009be8:	6820      	ldr	r0, [r4, #0]
 8009bea:	1821      	adds	r1, r4, r0
 8009bec:	428b      	cmp	r3, r1
 8009bee:	bf04      	itt	eq
 8009bf0:	6819      	ldreq	r1, [r3, #0]
 8009bf2:	685b      	ldreq	r3, [r3, #4]
 8009bf4:	6063      	str	r3, [r4, #4]
 8009bf6:	bf04      	itt	eq
 8009bf8:	1809      	addeq	r1, r1, r0
 8009bfa:	6021      	streq	r1, [r4, #0]
 8009bfc:	6054      	str	r4, [r2, #4]
 8009bfe:	e7ca      	b.n	8009b96 <_free_r+0x22>
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
 8009c02:	bf00      	nop
 8009c04:	2000099c 	.word	0x2000099c

08009c08 <_init>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr

08009c14 <_fini>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	bf00      	nop
 8009c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1a:	bc08      	pop	{r3}
 8009c1c:	469e      	mov	lr, r3
 8009c1e:	4770      	bx	lr
